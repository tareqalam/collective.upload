{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///upload.js","webpack:///webpack/bootstrap 8e3748986e7b5dd94957","webpack:///./~/blueimp-load-image/js/load-image.js","webpack:///external \"jQuery\"","webpack:///./~/blueimp-file-upload/js/jquery.fileupload-process.js","webpack:///./~/blueimp-load-image/js/load-image-meta.js","webpack:///./~/blueimp-load-image/js/load-image-exif.js","webpack:///./~/blueimp-load-image/js/load-image-scale.js","webpack:///./~/blueimp-canvas-to-blob/js/canvas-to-blob.js","webpack:///./~/blueimp-file-upload/js/jquery.fileupload-audio.js","webpack:///./~/blueimp-file-upload/js/jquery.fileupload-image.js","webpack:///./~/blueimp-file-upload/js/jquery.fileupload-validate.js","webpack:///./~/blueimp-file-upload/js/jquery.fileupload-video.js","webpack:///./~/blueimp-file-upload/js/jquery.fileupload.js","webpack:///./~/blueimp-tmpl/js/tmpl.js","webpack:///./~/blueimp-file-upload/js/jquery.fileupload-ui.js","webpack:///./~/blueimp-file-upload/js/jquery.iframe-transport.js","webpack:///./~/blueimp-load-image/js/index.js","webpack:///./app/upload-icon.png","webpack:///./~/blueimp-file-upload/js/vendor/jquery.ui.widget.js","webpack:///./~/blueimp-load-image/js/load-image-exif-map.js","webpack:///./~/blueimp-load-image/js/load-image-fetch.js","webpack:///./~/blueimp-load-image/js/load-image-orientation.js","webpack:///./app/upload.js"],"names":["root","factory","exports","module","require","define","amd","this","__WEBPACK_EXTERNAL_MODULE_1__","modules","__webpack_require__","moduleId","installedModules","i","l","call","m","c","value","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","n","__esModule","object","property","prototype","hasOwnProperty","p","s","__WEBPACK_AMD_DEFINE_RESULT__","$","loadImage","file","callback","options","url","img","document","createElement","onerror","event","onload","fetchBlob","blob","createObjectURL","crossOrigin","src","isInstanceOf","_objectURL","readFile","e","target","result","revokeHelper","noRevoke","revokeObjectURL","urlAPI","window","URL","webkitURL","type","obj","toString","transform","data","method","FileReader","fileReader","undefined","__WEBPACK_AMD_DEFINE_FACTORY__","__WEBPACK_AMD_DEFINE_ARRAY__","apply","originalAdd","blueimp","fileupload","add","widget","processQueue","$this","process","processActions","_processFile","originalData","that","dfd","Deferred","resolveWith","chain","promise","_trigger","each","settings","func","errorThrown","rejectWith","action","then","always","done","fail","_transformProcessQueue","prefix","key","charAt","slice","toUpperCase","push","processing","_processing","extend","length","files","index","opts","_processingQueue","_create","_super","hasblobSlice","Blob","webkitSlice","mozSlice","blobSlice","arguments","metaDataParsers","jpeg","65505","parseMetaData","maxMetaDataSize","DataView","size","error","console","log","markerBytes","markerLength","parsers","buffer","dataView","offset","maxOffset","byteLength","headLength","getUint16","disableImageHead","imageHead","Uint8Array","subarray","hasMetaOption","meta","originalTransform","ExifMap","map","Orientation","id","getExifThumbnail","hexData","b","getUint8","join","exifTagTypes","1","getValue","dataOffset","2","String","fromCharCode","ascii","3","littleEndian","4","getUint32","5","9","getInt32","10","getExifValue","tiffOffset","tagSize","values","str","tagType","parseExifTag","tag","exif","parseExifTags","dirOffset","tagsNumber","dirEndOffset","parseExifData","disableExif","thumbnailData","disableExifThumbnail","Thumbnail","disableExifSub","disableExifGps","scale","transformCoordinates","getTransformedOptions","newOptions","width","height","aspectRatio","crop","naturalWidth","naturalHeight","maxWidth","maxHeight","renderImageToCanvas","canvas","sourceX","sourceY","sourceWidth","sourceHeight","destX","destY","destWidth","destHeight","getContext","drawImage","hasCanvasOption","scaleUp","Math","max","minWidth","minHeight","scaleDown","min","pixelRatio","downsamplingRatio","tmp","useCanvas","left","top","right","bottom","contain","cover","style","CanvasPrototype","HTMLCanvasElement","hasBlobConstructor","Boolean","hasArrayBufferViewSupport","BlobBuilder","WebKitBlobBuilder","MozBlobBuilder","MSBlobBuilder","dataURIPattern","dataURLtoBlob","atob","ArrayBuffer","dataURI","matches","mediaType","isBase64","dataString","byteString","arrayBuffer","intArray","bb","match","Error","decodeURIComponent","charCodeAt","append","getBlob","toBlob","mozGetAsFile","quality","toDataURL","unshift","fileTypes","maxFileSize","disabled","loadAudioFileTypes","_audioElement","loadAudio","audio","canPlayType","test","cloneNode","controls","setAudio","orientation","forceResize","thumbnail","loadImageFileTypes","loadImageMaxFileSize","imageMaxWidth","imageMaxHeight","imageOrientation","imageCrop","disableImageResize","previewMaxWidth","previewMaxHeight","previewOrientation","previewThumbnail","previewCrop","previewCanvas","resizeImage","resolve","newImg","preview","saveImage","replace","substr","loadImageMetaData","saveImageMetaData","_blobSlice","setImage","deleteImageReferences","acceptFileTypes","minFileSize","maxNumberOfFiles","getNumberOfFiles","noop","messages","validate","fileSize","i18n","loadVideoFileTypes","_videoElement","loadVideo","video","setVideo","getDragHandler","isDragOver","dataTransfer","originalEvent","inArray","types","Event","delegatedEvent","preventDefault","dropEffect","support","fileInput","RegExp","navigator","userAgent","prop","xhrFileUpload","ProgressEvent","xhrFormDataFileUpload","FormData","dropZone","pasteZone","replaceFileInput","paramName","singleFileUploads","limitMultiFileUploads","limitMultiFileUploadSize","limitMultiFileUploadSizeOverhead","sequentialUploads","limitConcurrentUploads","forceIframeTransport","redirect","redirectParamName","postMessage","multipart","maxChunkSize","uploadedBytes","recalculateProgress","progressInterval","bitrateInterval","autoUpload","message","context","formData","form","serializeArray","isDefaultPrevented","submit","processData","contentType","cache","timeout","_specialOptions","_BitrateTimer","timestamp","Date","now","getTime","loaded","bitrate","getBitrate","interval","timeDiff","_isXHRUpload","_getFormData","isArray","_getTotal","total","_initProgressObject","progress","_progress","_initResponseObject","_response","_onProgress","lengthComputable","_time","floor","chunkSize","_bitrateTimer","_initProgressListener","xhr","ajaxSettings","upload","bind","oe","_isInstanceOf","_initXHRData","headers","contentRange","encodeURI","field","uploadName","_initIframeSettings","targetHost","dataType","location","host","_initDataSettings","_chunkedUpload","_getParamName","input","_initFormSettings","href","formAcceptCharset","attr","_getAJAXSettings","_getDeferredState","deferred","state","isResolved","isRejected","_enhancePromise","success","complete","_getXHRPromise","resolveOrReject","args","abort","_addConvenienceMethods","getPromise","resolveFunc","rejectFunc","_processQueue","jqXHR","_onSend","response","_getUploadedBytes","range","getResponseHeader","parts","split","upperBytesPos","parseInt","testOnly","fs","ub","mcs","currentLoaded","ajax","textStatus","_beforeSend","_active","_onDone","_onFail","_onAlways","jqXHRorResult","jqXHRorError","aborted","slot","pipe","send","_sending","nextSlot","_slots","shift","_sequence","_onAdd","paramNameSet","paramNameSlice","fileSet","filesLength","limit","limitSize","overhead","batchSize","j","originalFiles","element","newData","_replaceFileInput","inputClone","clone","restoreFocus","is","activeElement","fileInputClone","reset","after","detach","focus","cleanData","unbind","el","_handleFileTreeEntry","entry","path","dirReader","entries","errorHandler","successHandler","_handleFileTreeEntries","readEntries","results","concat","isFile","_file","relativePath","isDirectory","createReader","when","Array","_getDroppedFiles","items","webkitGetAsEntry","getAsEntry","item","getAsFile","makeArray","_getSingleFileInputFiles","fileName","_getFileInputFiles","_onChange","_onPaste","clipboardData","_onDrop","_onDragOver","_onDragEnter","_onDragLeave","_initEventHandlers","_on","dragover","drop","dragenter","dragleave","paste","change","_destroyEventHandlers","_off","_destroy","_setOption","reinit","_initSpecialOptions","find","_getRegExp","modifiers","pop","_isRegExpOption","_initDataAttributes","attributes","toLowerCase","active","reject","tmpl","f","Function","arg","helper","regexp","load","getElementById","innerHTML","p1","p2","p3","p4","p5","\n","\r","\t"," ","encReg","encMap","<",">","&","\"","'","encode","uploadTemplateId","downloadTemplateId","filesContainer","prependFiles","unknownError","children","not","getFilesFromResponse","_renderUpload","addClass","_forceReflow","_transition","text","_formatFileSize","removeClass","_renderPreviews","transition","first","css","template","_addFinishedDeferreds","node","_renderDownload","replaceAll","remove","progressall","globalProgressNode","extendedProgressNode","html","_renderExtendedProgress","start","_resetFinishedDeferreds","stop","_getFinishedDeferreds","processstart","processstop","destroy","removeNode","_finishedUploads","_enableDragToDesktop","link","setData","ignore","bytes","toFixed","_formatBitrate","bits","_formatTime","seconds","date","days","getUTCHours","getUTCMinutes","getUTCSeconds","_formatPercentage","floatValue","_renderTemplate","formatFileSize","templatesContainer","elm","uploadTemplate","downloadTemplate","end","_startHandler","button","currentTarget","closest","_cancelHandler","_deleteHandler","offsetWidth","hasClass","toggleClass","_initButtonBarEventHandlers","fileUploadButtonBar","filesList","click","_destroyButtonBarEventHandlers","click .start","click .cancel","click .delete","_enableFileInputButton","parent","_disableFileInputButton","_initTemplates","_initFilesContainer","enable","wasDisabled","disable","counter","jsonAPI","jsonParse","JSON","ajaxTransport","async","iframe","addParamChar","initialIframeSrc","_","completeCallback","fileInputClones","paramNames","contents","firstChild","appendTo","setTimeout","val","removeAttr","replaceWith","body","ajaxSetup","converters","iframe text","iframe json","iframe html","iframe xml","xmlDoc","isXMLDoc","parseXML","XMLDocument","xml","iframe script","globalEval","widget_uuid","widget_slice","orig","elems","events","elem","_data","triggerHandler","base","fullName","existingConstructor","constructor","basePrototype","proxiedPrototype","namespace","Widget","expr","_createWidget","version","_proto","_childConstructors","isFunction","_superApply","returnValue","__super","__superApply","widgetEventPrefix","widgetName","widgetFullName","child","childPrototype","bridge","inputIndex","inputLength","isPlainObject","fn","isMethodCall","methodValue","instance","jquery","pushStack","option","_init","defaultElement","create","uuid","eventNamespace","bindings","hoverable","focusable","ownerDocument","defaultView","parentWindow","_getCreateOptions","_getCreateEventData","removeData","camelCase","curOption","_setOptions","suppressDisabledCheck","handlers","delegateElement","handler","handlerProxy","guid","eventName","selector","delegate","undelegate","_delay","delay","_hoverable","mouseenter","mouseleave","_focusable","focusin","focusout","trigger","show","hide","defaultEffect","effect","hasOptions","effectName","duration","isEmptyObject","effects","easing","queue","next","tags","256","257","34665","34853","40965","258","259","262","274","277","284","530","531","282","283","296","273","278","279","513","514","301","318","319","529","532","306","270","271","272","305","315","33432","36864","40960","40961","40962","40963","42240","37121","37122","37500","37510","40964","36867","36868","37520","37521","37522","33434","33437","34850","34852","34855","34856","34864","34865","34866","34867","34868","34869","37377","37378","37379","37380","37381","37382","37383","37384","37385","37396","37386","41483","41484","41486","41487","41488","41492","41493","41495","41728","41729","41730","41985","41986","41987","41988","41989","41990","41991","41992","41993","41994","41995","41996","42016","42032","42033","42034","42035","42036","42037","0","6","7","8","11","12","13","14","15","16","17","18","19","20","21","22","23","24","25","26","27","28","29","30","31","stringValues","ExposureProgram","MeteringMode","255","LightSource","Flash","32","65","69","71","73","77","79","89","93","95","SensingMethod","SceneCaptureType","SceneType","CustomRendered","WhiteBalance","GainControl","Contrast","Saturation","Sharpness","SubjectDistanceRange","FileSource","ComponentsConfiguration","getText","exifMapPrototype","getAll","fetch","Request","catch","err","originalHasCanvasOption","originalHasMetaOption","originalTransformCoordinates","originalGetTransformedOptions","ctx","styleWidth","styleHeight","translate","rotate","PI","_classCallCheck","Constructor","TypeError","_createClass","defineProperties","props","descriptor","writable","protoProps","staticProps","Upload","refresh","bindEvents","$el","initFileUpload","ImageDescription","Artist","last","prepOverlay","subtype","config","onLoad","proxy","onBeforeClose","reloadPage","on","crossSiteDrop","cancelOne","cancelAll","filesRE","extensions","translations","k","newk","substring","resizeMaxWidth","resizeMaxHeight","extractMetadata","finishUpload","finishAllUpload","escape","description","decodeUTF8","artist","hasBootstrap","modal","hasBootstrap3","emulateTransitionEnd","hasBootstrap2","parents","$html","_this","getData","filter","parser","pathname","$uploads","reload"],"mappings":"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","file":"upload.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"jQuery\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"jQuery\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"collective.upload\"] = factory(require(\"jQuery\"));\n\telse\n\t\troot[\"collective.upload\"] = factory(root[\"jQuery\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_1__) {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"jQuery\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"jQuery\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"collective.upload\"] = factory(require(\"jQuery\"));\n\telse\n\t\troot[\"collective.upload\"] = factory(root[\"jQuery\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_1__) {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// identity function for calling harmony imports with the correct context\n/******/ \t__webpack_require__.i = function(value) { return value; };\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"/++resource++collective.upload/\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 22);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_RESULT__;/*\n * JavaScript Load Image\n * https://github.com/blueimp/JavaScript-Load-Image\n *\n * Copyright 2011, Sebastian Tschan\n * https://blueimp.net\n *\n * Licensed under the MIT license:\n * https://opensource.org/licenses/MIT\n */\n\n/* global define, URL, webkitURL, FileReader */\n\n;(function ($) {\n  'use strict'\n\n  // Loads an image for a given File object.\n  // Invokes the callback with an img or optional canvas\n  // element (if supported by the browser) as parameter:\n  function loadImage (file, callback, options) {\n    var img = document.createElement('img')\n    var url\n    img.onerror = function (event) {\n      return loadImage.onerror(img, event, file, callback, options)\n    }\n    img.onload = function (event) {\n      return loadImage.onload(img, event, file, callback, options)\n    }\n    if (typeof file === 'string') {\n      loadImage.fetchBlob(file, function (blob) {\n        if (blob) {\n          file = blob\n          url = loadImage.createObjectURL(file)\n        } else {\n          url = file\n          if (options && options.crossOrigin) {\n            img.crossOrigin = options.crossOrigin\n          }\n        }\n        img.src = url\n      }, options)\n      return img\n    } else if (loadImage.isInstanceOf('Blob', file) ||\n        // Files are also Blob instances, but some browsers\n        // (Firefox 3.6) support the File API but not Blobs:\n        loadImage.isInstanceOf('File', file)) {\n      url = img._objectURL = loadImage.createObjectURL(file)\n      if (url) {\n        img.src = url\n        return img\n      }\n      return loadImage.readFile(file, function (e) {\n        var target = e.target\n        if (target && target.result) {\n          img.src = target.result\n        } else if (callback) {\n          callback(e)\n        }\n      })\n    }\n  }\n  // The check for URL.revokeObjectURL fixes an issue with Opera 12,\n  // which provides URL.createObjectURL but doesn't properly implement it:\n  var urlAPI = (window.createObjectURL && window) ||\n                (window.URL && URL.revokeObjectURL && URL) ||\n                (window.webkitURL && webkitURL)\n\n  function revokeHelper (img, options) {\n    if (img._objectURL && !(options && options.noRevoke)) {\n      loadImage.revokeObjectURL(img._objectURL)\n      delete img._objectURL\n    }\n  }\n\n  // If the callback given to this function returns a blob, it is used as image\n  // source instead of the original url and overrides the file argument used in\n  // the onload and onerror event callbacks:\n  loadImage.fetchBlob = function (url, callback, options) {\n    callback()\n  }\n\n  loadImage.isInstanceOf = function (type, obj) {\n    // Cross-frame instanceof check\n    return Object.prototype.toString.call(obj) === '[object ' + type + ']'\n  }\n\n  loadImage.transform = function (img, options, callback, file, data) {\n    callback(img, data)\n  }\n\n  loadImage.onerror = function (img, event, file, callback, options) {\n    revokeHelper(img, options)\n    if (callback) {\n      callback.call(img, event)\n    }\n  }\n\n  loadImage.onload = function (img, event, file, callback, options) {\n    revokeHelper(img, options)\n    if (callback) {\n      loadImage.transform(img, options, callback, file, {})\n    }\n  }\n\n  loadImage.createObjectURL = function (file) {\n    return urlAPI ? urlAPI.createObjectURL(file) : false\n  }\n\n  loadImage.revokeObjectURL = function (url) {\n    return urlAPI ? urlAPI.revokeObjectURL(url) : false\n  }\n\n  // Loads a given File object via FileReader interface,\n  // invokes the callback with the event object (load or error).\n  // The result can be read via event.target.result:\n  loadImage.readFile = function (file, callback, method) {\n    if (window.FileReader) {\n      var fileReader = new FileReader()\n      fileReader.onload = fileReader.onerror = callback\n      method = method || 'readAsDataURL'\n      if (fileReader[method]) {\n        fileReader[method](file)\n        return fileReader\n      }\n    }\n    return false\n  }\n\n  if (true) {\n    !(__WEBPACK_AMD_DEFINE_RESULT__ = function () {\n      return loadImage\n    }.call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__))\n  } else if (typeof module === 'object' && module.exports) {\n    module.exports = loadImage\n  } else {\n    $.loadImage = loadImage\n  }\n}(window))\n\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports) {\n\nmodule.exports = __WEBPACK_EXTERNAL_MODULE_1__;\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*\n * jQuery File Upload Processing Plugin\n * https://github.com/blueimp/jQuery-File-Upload\n *\n * Copyright 2012, Sebastian Tschan\n * https://blueimp.net\n *\n * Licensed under the MIT license:\n * https://opensource.org/licenses/MIT\n */\n\n/* jshint nomen:false */\n/* global define, require, window */\n\n;(function (factory) {\n    'use strict';\n    if (true) {\n        // Register as an anonymous AMD module:\n        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [\n            __webpack_require__(1),\n            __webpack_require__(11)\n        ], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    } else if (typeof exports === 'object') {\n        // Node/CommonJS:\n        factory(\n            require('jquery'),\n            require('./jquery.fileupload')\n        );\n    } else {\n        // Browser globals:\n        factory(\n            window.jQuery\n        );\n    }\n}(function ($) {\n    'use strict';\n\n    var originalAdd = $.blueimp.fileupload.prototype.options.add;\n\n    // The File Upload Processing plugin extends the fileupload widget\n    // with file processing functionality:\n    $.widget('blueimp.fileupload', $.blueimp.fileupload, {\n\n        options: {\n            // The list of processing actions:\n            processQueue: [\n                /*\n                {\n                    action: 'log',\n                    type: 'debug'\n                }\n                */\n            ],\n            add: function (e, data) {\n                var $this = $(this);\n                data.process(function () {\n                    return $this.fileupload('process', data);\n                });\n                originalAdd.call(this, e, data);\n            }\n        },\n\n        processActions: {\n            /*\n            log: function (data, options) {\n                console[options.type](\n                    'Processing \"' + data.files[data.index].name + '\"'\n                );\n            }\n            */\n        },\n\n        _processFile: function (data, originalData) {\n            var that = this,\n                dfd = $.Deferred().resolveWith(that, [data]),\n                chain = dfd.promise();\n            this._trigger('process', null, data);\n            $.each(data.processQueue, function (i, settings) {\n                var func = function (data) {\n                    if (originalData.errorThrown) {\n                        return $.Deferred()\n                                .rejectWith(that, [originalData]).promise();\n                    }\n                    return that.processActions[settings.action].call(\n                        that,\n                        data,\n                        settings\n                    );\n                };\n                chain = chain.then(func, settings.always && func);\n            });\n            chain\n                .done(function () {\n                    that._trigger('processdone', null, data);\n                    that._trigger('processalways', null, data);\n                })\n                .fail(function () {\n                    that._trigger('processfail', null, data);\n                    that._trigger('processalways', null, data);\n                });\n            return chain;\n        },\n\n        // Replaces the settings of each processQueue item that\n        // are strings starting with an \"@\", using the remaining\n        // substring as key for the option map,\n        // e.g. \"@autoUpload\" is replaced with options.autoUpload:\n        _transformProcessQueue: function (options) {\n            var processQueue = [];\n            $.each(options.processQueue, function () {\n                var settings = {},\n                    action = this.action,\n                    prefix = this.prefix === true ? action : this.prefix;\n                $.each(this, function (key, value) {\n                    if ($.type(value) === 'string' &&\n                            value.charAt(0) === '@') {\n                        settings[key] = options[\n                            value.slice(1) || (prefix ? prefix +\n                                key.charAt(0).toUpperCase() + key.slice(1) : key)\n                        ];\n                    } else {\n                        settings[key] = value;\n                    }\n\n                });\n                processQueue.push(settings);\n            });\n            options.processQueue = processQueue;\n        },\n\n        // Returns the number of files currently in the processsing queue:\n        processing: function () {\n            return this._processing;\n        },\n\n        // Processes the files given as files property of the data parameter,\n        // returns a Promise object that allows to bind callbacks:\n        process: function (data) {\n            var that = this,\n                options = $.extend({}, this.options, data);\n            if (options.processQueue && options.processQueue.length) {\n                this._transformProcessQueue(options);\n                if (this._processing === 0) {\n                    this._trigger('processstart');\n                }\n                $.each(data.files, function (index) {\n                    var opts = index ? $.extend({}, options) : options,\n                        func = function () {\n                            if (data.errorThrown) {\n                                return $.Deferred()\n                                        .rejectWith(that, [data]).promise();\n                            }\n                            return that._processFile(opts, data);\n                        };\n                    opts.index = index;\n                    that._processing += 1;\n                    that._processingQueue = that._processingQueue.then(func, func)\n                        .always(function () {\n                            that._processing -= 1;\n                            if (that._processing === 0) {\n                                that._trigger('processstop');\n                            }\n                        });\n                });\n            }\n            return this._processingQueue;\n        },\n\n        _create: function () {\n            this._super();\n            this._processing = 0;\n            this._processingQueue = $.Deferred().resolveWith(this)\n                .promise();\n        }\n\n    });\n\n}));\n\n\n/***/ }),\n/* 3 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*\n * JavaScript Load Image Meta\n * https://github.com/blueimp/JavaScript-Load-Image\n *\n * Copyright 2013, Sebastian Tschan\n * https://blueimp.net\n *\n * Image meta data handling implementation\n * based on the help and contribution of\n * Achim Stöhr.\n *\n * Licensed under the MIT license:\n * https://opensource.org/licenses/MIT\n */\n\n/* global define, Blob */\n\n;(function (factory) {\n  'use strict'\n  if (true) {\n    // Register as an anonymous AMD module:\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__))\n  } else if (typeof module === 'object' && module.exports) {\n    factory(require('./load-image'))\n  } else {\n    // Browser globals:\n    factory(window.loadImage)\n  }\n}(function (loadImage) {\n  'use strict'\n\n  var hasblobSlice = window.Blob && (Blob.prototype.slice ||\n  Blob.prototype.webkitSlice || Blob.prototype.mozSlice)\n\n  loadImage.blobSlice = hasblobSlice && function () {\n    var slice = this.slice || this.webkitSlice || this.mozSlice\n    return slice.apply(this, arguments)\n  }\n\n  loadImage.metaDataParsers = {\n    jpeg: {\n      0xffe1: [] // APP1 marker\n    }\n  }\n\n  // Parses image meta data and calls the callback with an object argument\n  // with the following properties:\n  // * imageHead: The complete image head as ArrayBuffer (Uint8Array for IE10)\n  // The options arguments accepts an object and supports the following properties:\n  // * maxMetaDataSize: Defines the maximum number of bytes to parse.\n  // * disableImageHead: Disables creating the imageHead property.\n  loadImage.parseMetaData = function (file, callback, options, data) {\n    options = options || {}\n    data = data || {}\n    var that = this\n    // 256 KiB should contain all EXIF/ICC/IPTC segments:\n    var maxMetaDataSize = options.maxMetaDataSize || 262144\n    var noMetaData = !(window.DataView && file && file.size >= 12 &&\n                      file.type === 'image/jpeg' && loadImage.blobSlice)\n    if (noMetaData || !loadImage.readFile(\n        loadImage.blobSlice.call(file, 0, maxMetaDataSize),\n        function (e) {\n          if (e.target.error) {\n            // FileReader error\n            console.log(e.target.error)\n            callback(data)\n            return\n          }\n          // Note on endianness:\n          // Since the marker and length bytes in JPEG files are always\n          // stored in big endian order, we can leave the endian parameter\n          // of the DataView methods undefined, defaulting to big endian.\n          var buffer = e.target.result\n          var dataView = new DataView(buffer)\n          var offset = 2\n          var maxOffset = dataView.byteLength - 4\n          var headLength = offset\n          var markerBytes\n          var markerLength\n          var parsers\n          var i\n          // Check for the JPEG marker (0xffd8):\n          if (dataView.getUint16(0) === 0xffd8) {\n            while (offset < maxOffset) {\n              markerBytes = dataView.getUint16(offset)\n              // Search for APPn (0xffeN) and COM (0xfffe) markers,\n              // which contain application-specific meta-data like\n              // Exif, ICC and IPTC data and text comments:\n              if ((markerBytes >= 0xffe0 && markerBytes <= 0xffef) ||\n                markerBytes === 0xfffe) {\n                // The marker bytes (2) are always followed by\n                // the length bytes (2), indicating the length of the\n                // marker segment, which includes the length bytes,\n                // but not the marker bytes, so we add 2:\n                markerLength = dataView.getUint16(offset + 2) + 2\n                if (offset + markerLength > dataView.byteLength) {\n                  console.log('Invalid meta data: Invalid segment size.')\n                  break\n                }\n                parsers = loadImage.metaDataParsers.jpeg[markerBytes]\n                if (parsers) {\n                  for (i = 0; i < parsers.length; i += 1) {\n                    parsers[i].call(\n                      that,\n                      dataView,\n                      offset,\n                      markerLength,\n                      data,\n                      options\n                    )\n                  }\n                }\n                offset += markerLength\n                headLength = offset\n              } else {\n                // Not an APPn or COM marker, probably safe to\n                // assume that this is the end of the meta data\n                break\n              }\n            }\n            // Meta length must be longer than JPEG marker (2)\n            // plus APPn marker (2), followed by length bytes (2):\n            if (!options.disableImageHead && headLength > 6) {\n              if (buffer.slice) {\n                data.imageHead = buffer.slice(0, headLength)\n              } else {\n                // Workaround for IE10, which does not yet\n                // support ArrayBuffer.slice:\n                data.imageHead = new Uint8Array(buffer)\n                  .subarray(0, headLength)\n              }\n            }\n          } else {\n            console.log('Invalid JPEG file: Missing JPEG marker.')\n          }\n          callback(data)\n        },\n        'readAsArrayBuffer'\n      )) {\n      callback(data)\n    }\n  }\n\n  // Determines if meta data should be loaded automatically:\n  loadImage.hasMetaOption = function (options) {\n    return options && options.meta\n  }\n\n  var originalTransform = loadImage.transform\n  loadImage.transform = function (img, options, callback, file, data) {\n    if (loadImage.hasMetaOption(options)) {\n      loadImage.parseMetaData(file, function (data) {\n        originalTransform.call(loadImage, img, options, callback, file, data)\n      }, options, data)\n    } else {\n      originalTransform.apply(loadImage, arguments)\n    }\n  }\n}))\n\n\n/***/ }),\n/* 4 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*\n * JavaScript Load Image Exif Parser\n * https://github.com/blueimp/JavaScript-Load-Image\n *\n * Copyright 2013, Sebastian Tschan\n * https://blueimp.net\n *\n * Licensed under the MIT license:\n * https://opensource.org/licenses/MIT\n */\n\n/* global define */\n\n;(function (factory) {\n  'use strict'\n  if (true) {\n    // Register as an anonymous AMD module:\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0), __webpack_require__(3)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__))\n  } else if (typeof module === 'object' && module.exports) {\n    factory(require('./load-image'), require('./load-image-meta'))\n  } else {\n    // Browser globals:\n    factory(window.loadImage)\n  }\n}(function (loadImage) {\n  'use strict'\n\n  loadImage.ExifMap = function () {\n    return this\n  }\n\n  loadImage.ExifMap.prototype.map = {\n    'Orientation': 0x0112\n  }\n\n  loadImage.ExifMap.prototype.get = function (id) {\n    return this[id] || this[this.map[id]]\n  }\n\n  loadImage.getExifThumbnail = function (dataView, offset, length) {\n    var hexData,\n      i,\n      b\n    if (!length || offset + length > dataView.byteLength) {\n      console.log('Invalid Exif data: Invalid thumbnail data.')\n      return\n    }\n    hexData = []\n    for (i = 0; i < length; i += 1) {\n      b = dataView.getUint8(offset + i)\n      hexData.push((b < 16 ? '0' : '') + b.toString(16))\n    }\n    return 'data:image/jpeg,%' + hexData.join('%')\n  }\n\n  loadImage.exifTagTypes = {\n    // byte, 8-bit unsigned int:\n    1: {\n      getValue: function (dataView, dataOffset) {\n        return dataView.getUint8(dataOffset)\n      },\n      size: 1\n    },\n    // ascii, 8-bit byte:\n    2: {\n      getValue: function (dataView, dataOffset) {\n        return String.fromCharCode(dataView.getUint8(dataOffset))\n      },\n      size: 1,\n      ascii: true\n    },\n    // short, 16 bit int:\n    3: {\n      getValue: function (dataView, dataOffset, littleEndian) {\n        return dataView.getUint16(dataOffset, littleEndian)\n      },\n      size: 2\n    },\n    // long, 32 bit int:\n    4: {\n      getValue: function (dataView, dataOffset, littleEndian) {\n        return dataView.getUint32(dataOffset, littleEndian)\n      },\n      size: 4\n    },\n    // rational = two long values, first is numerator, second is denominator:\n    5: {\n      getValue: function (dataView, dataOffset, littleEndian) {\n        return dataView.getUint32(dataOffset, littleEndian) /\n        dataView.getUint32(dataOffset + 4, littleEndian)\n      },\n      size: 8\n    },\n    // slong, 32 bit signed int:\n    9: {\n      getValue: function (dataView, dataOffset, littleEndian) {\n        return dataView.getInt32(dataOffset, littleEndian)\n      },\n      size: 4\n    },\n    // srational, two slongs, first is numerator, second is denominator:\n    10: {\n      getValue: function (dataView, dataOffset, littleEndian) {\n        return dataView.getInt32(dataOffset, littleEndian) /\n        dataView.getInt32(dataOffset + 4, littleEndian)\n      },\n      size: 8\n    }\n  }\n  // undefined, 8-bit byte, value depending on field:\n  loadImage.exifTagTypes[7] = loadImage.exifTagTypes[1]\n\n  loadImage.getExifValue = function (dataView, tiffOffset, offset, type, length, littleEndian) {\n    var tagType = loadImage.exifTagTypes[type]\n    var tagSize\n    var dataOffset\n    var values\n    var i\n    var str\n    var c\n    if (!tagType) {\n      console.log('Invalid Exif data: Invalid tag type.')\n      return\n    }\n    tagSize = tagType.size * length\n    // Determine if the value is contained in the dataOffset bytes,\n    // or if the value at the dataOffset is a pointer to the actual data:\n    dataOffset = tagSize > 4\n      ? tiffOffset + dataView.getUint32(offset + 8, littleEndian)\n      : (offset + 8)\n    if (dataOffset + tagSize > dataView.byteLength) {\n      console.log('Invalid Exif data: Invalid data offset.')\n      return\n    }\n    if (length === 1) {\n      return tagType.getValue(dataView, dataOffset, littleEndian)\n    }\n    values = []\n    for (i = 0; i < length; i += 1) {\n      values[i] = tagType.getValue(dataView, dataOffset + i * tagType.size, littleEndian)\n    }\n    if (tagType.ascii) {\n      str = ''\n      // Concatenate the chars:\n      for (i = 0; i < values.length; i += 1) {\n        c = values[i]\n        // Ignore the terminating NULL byte(s):\n        if (c === '\\u0000') {\n          break\n        }\n        str += c\n      }\n      return str\n    }\n    return values\n  }\n\n  loadImage.parseExifTag = function (dataView, tiffOffset, offset, littleEndian, data) {\n    var tag = dataView.getUint16(offset, littleEndian)\n    data.exif[tag] = loadImage.getExifValue(\n      dataView,\n      tiffOffset,\n      offset,\n      dataView.getUint16(offset + 2, littleEndian), // tag type\n      dataView.getUint32(offset + 4, littleEndian), // tag length\n      littleEndian\n    )\n  }\n\n  loadImage.parseExifTags = function (dataView, tiffOffset, dirOffset, littleEndian, data) {\n    var tagsNumber,\n      dirEndOffset,\n      i\n    if (dirOffset + 6 > dataView.byteLength) {\n      console.log('Invalid Exif data: Invalid directory offset.')\n      return\n    }\n    tagsNumber = dataView.getUint16(dirOffset, littleEndian)\n    dirEndOffset = dirOffset + 2 + 12 * tagsNumber\n    if (dirEndOffset + 4 > dataView.byteLength) {\n      console.log('Invalid Exif data: Invalid directory size.')\n      return\n    }\n    for (i = 0; i < tagsNumber; i += 1) {\n      this.parseExifTag(\n        dataView,\n        tiffOffset,\n        dirOffset + 2 + 12 * i, // tag offset\n        littleEndian,\n        data\n      )\n    }\n    // Return the offset to the next directory:\n    return dataView.getUint32(dirEndOffset, littleEndian)\n  }\n\n  loadImage.parseExifData = function (dataView, offset, length, data, options) {\n    if (options.disableExif) {\n      return\n    }\n    var tiffOffset = offset + 10\n    var littleEndian\n    var dirOffset\n    var thumbnailData\n    // Check for the ASCII code for \"Exif\" (0x45786966):\n    if (dataView.getUint32(offset + 4) !== 0x45786966) {\n      // No Exif data, might be XMP data instead\n      return\n    }\n    if (tiffOffset + 8 > dataView.byteLength) {\n      console.log('Invalid Exif data: Invalid segment size.')\n      return\n    }\n    // Check for the two null bytes:\n    if (dataView.getUint16(offset + 8) !== 0x0000) {\n      console.log('Invalid Exif data: Missing byte alignment offset.')\n      return\n    }\n    // Check the byte alignment:\n    switch (dataView.getUint16(tiffOffset)) {\n      case 0x4949:\n        littleEndian = true\n        break\n      case 0x4D4D:\n        littleEndian = false\n        break\n      default:\n        console.log('Invalid Exif data: Invalid byte alignment marker.')\n        return\n    }\n    // Check for the TIFF tag marker (0x002A):\n    if (dataView.getUint16(tiffOffset + 2, littleEndian) !== 0x002A) {\n      console.log('Invalid Exif data: Missing TIFF marker.')\n      return\n    }\n    // Retrieve the directory offset bytes, usually 0x00000008 or 8 decimal:\n    dirOffset = dataView.getUint32(tiffOffset + 4, littleEndian)\n    // Create the exif object to store the tags:\n    data.exif = new loadImage.ExifMap()\n    // Parse the tags of the main image directory and retrieve the\n    // offset to the next directory, usually the thumbnail directory:\n    dirOffset = loadImage.parseExifTags(\n      dataView,\n      tiffOffset,\n      tiffOffset + dirOffset,\n      littleEndian,\n      data\n    )\n    if (dirOffset && !options.disableExifThumbnail) {\n      thumbnailData = {exif: {}}\n      dirOffset = loadImage.parseExifTags(\n        dataView,\n        tiffOffset,\n        tiffOffset + dirOffset,\n        littleEndian,\n        thumbnailData\n      )\n      // Check for JPEG Thumbnail offset:\n      if (thumbnailData.exif[0x0201]) {\n        data.exif.Thumbnail = loadImage.getExifThumbnail(\n          dataView,\n          tiffOffset + thumbnailData.exif[0x0201],\n          thumbnailData.exif[0x0202] // Thumbnail data length\n        )\n      }\n    }\n    // Check for Exif Sub IFD Pointer:\n    if (data.exif[0x8769] && !options.disableExifSub) {\n      loadImage.parseExifTags(\n        dataView,\n        tiffOffset,\n        tiffOffset + data.exif[0x8769], // directory offset\n        littleEndian,\n        data\n      )\n    }\n    // Check for GPS Info IFD Pointer:\n    if (data.exif[0x8825] && !options.disableExifGps) {\n      loadImage.parseExifTags(\n        dataView,\n        tiffOffset,\n        tiffOffset + data.exif[0x8825], // directory offset\n        littleEndian,\n        data\n      )\n    }\n  }\n\n  // Registers the Exif parser for the APP1 JPEG meta data segment:\n  loadImage.metaDataParsers.jpeg[0xffe1].push(loadImage.parseExifData)\n\n  // Adds the following properties to the parseMetaData callback data:\n  // * exif: The exif tags, parsed by the parseExifData method\n\n  // Adds the following options to the parseMetaData method:\n  // * disableExif: Disables Exif parsing.\n  // * disableExifThumbnail: Disables parsing of the Exif Thumbnail.\n  // * disableExifSub: Disables parsing of the Exif Sub IFD.\n  // * disableExifGps: Disables parsing of the Exif GPS Info IFD.\n}))\n\n\n/***/ }),\n/* 5 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*\n * JavaScript Load Image Scaling\n * https://github.com/blueimp/JavaScript-Load-Image\n *\n * Copyright 2011, Sebastian Tschan\n * https://blueimp.net\n *\n * Licensed under the MIT license:\n * https://opensource.org/licenses/MIT\n */\n\n/* global define */\n\n;(function (factory) {\n  'use strict'\n  if (true) {\n    // Register as an anonymous AMD module:\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__))\n  } else if (typeof module === 'object' && module.exports) {\n    factory(require('./load-image'))\n  } else {\n    // Browser globals:\n    factory(window.loadImage)\n  }\n}(function (loadImage) {\n  'use strict'\n\n  var originalTransform = loadImage.transform\n\n  loadImage.transform = function (img, options, callback, file, data) {\n    originalTransform.call(\n      loadImage,\n      loadImage.scale(img, options, data),\n      options,\n      callback,\n      file,\n      data\n    )\n  }\n\n  // Transform image coordinates, allows to override e.g.\n  // the canvas orientation based on the orientation option,\n  // gets canvas, options passed as arguments:\n  loadImage.transformCoordinates = function () {\n    return\n  }\n\n  // Returns transformed options, allows to override e.g.\n  // maxWidth, maxHeight and crop options based on the aspectRatio.\n  // gets img, options passed as arguments:\n  loadImage.getTransformedOptions = function (img, options) {\n    var aspectRatio = options.aspectRatio\n    var newOptions\n    var i\n    var width\n    var height\n    if (!aspectRatio) {\n      return options\n    }\n    newOptions = {}\n    for (i in options) {\n      if (options.hasOwnProperty(i)) {\n        newOptions[i] = options[i]\n      }\n    }\n    newOptions.crop = true\n    width = img.naturalWidth || img.width\n    height = img.naturalHeight || img.height\n    if (width / height > aspectRatio) {\n      newOptions.maxWidth = height * aspectRatio\n      newOptions.maxHeight = height\n    } else {\n      newOptions.maxWidth = width\n      newOptions.maxHeight = width / aspectRatio\n    }\n    return newOptions\n  }\n\n  // Canvas render method, allows to implement a different rendering algorithm:\n  loadImage.renderImageToCanvas = function (\n    canvas,\n    img,\n    sourceX,\n    sourceY,\n    sourceWidth,\n    sourceHeight,\n    destX,\n    destY,\n    destWidth,\n    destHeight\n  ) {\n    canvas.getContext('2d').drawImage(\n      img,\n      sourceX,\n      sourceY,\n      sourceWidth,\n      sourceHeight,\n      destX,\n      destY,\n      destWidth,\n      destHeight\n    )\n    return canvas\n  }\n\n  // Determines if the target image should be a canvas element:\n  loadImage.hasCanvasOption = function (options) {\n    return options.canvas || options.crop || !!options.aspectRatio\n  }\n\n  // Scales and/or crops the given image (img or canvas HTML element)\n  // using the given options.\n  // Returns a canvas object if the browser supports canvas\n  // and the hasCanvasOption method returns true or a canvas\n  // object is passed as image, else the scaled image:\n  loadImage.scale = function (img, options, data) {\n    options = options || {}\n    var canvas = document.createElement('canvas')\n    var useCanvas = img.getContext ||\n                    (loadImage.hasCanvasOption(options) && canvas.getContext)\n    var width = img.naturalWidth || img.width\n    var height = img.naturalHeight || img.height\n    var destWidth = width\n    var destHeight = height\n    var maxWidth\n    var maxHeight\n    var minWidth\n    var minHeight\n    var sourceWidth\n    var sourceHeight\n    var sourceX\n    var sourceY\n    var pixelRatio\n    var downsamplingRatio\n    var tmp\n    function scaleUp () {\n      var scale = Math.max(\n        (minWidth || destWidth) / destWidth,\n        (minHeight || destHeight) / destHeight\n      )\n      if (scale > 1) {\n        destWidth *= scale\n        destHeight *= scale\n      }\n    }\n    function scaleDown () {\n      var scale = Math.min(\n        (maxWidth || destWidth) / destWidth,\n        (maxHeight || destHeight) / destHeight\n      )\n      if (scale < 1) {\n        destWidth *= scale\n        destHeight *= scale\n      }\n    }\n    if (useCanvas) {\n      options = loadImage.getTransformedOptions(img, options, data)\n      sourceX = options.left || 0\n      sourceY = options.top || 0\n      if (options.sourceWidth) {\n        sourceWidth = options.sourceWidth\n        if (options.right !== undefined && options.left === undefined) {\n          sourceX = width - sourceWidth - options.right\n        }\n      } else {\n        sourceWidth = width - sourceX - (options.right || 0)\n      }\n      if (options.sourceHeight) {\n        sourceHeight = options.sourceHeight\n        if (options.bottom !== undefined && options.top === undefined) {\n          sourceY = height - sourceHeight - options.bottom\n        }\n      } else {\n        sourceHeight = height - sourceY - (options.bottom || 0)\n      }\n      destWidth = sourceWidth\n      destHeight = sourceHeight\n    }\n    maxWidth = options.maxWidth\n    maxHeight = options.maxHeight\n    minWidth = options.minWidth\n    minHeight = options.minHeight\n    if (useCanvas && maxWidth && maxHeight && options.crop) {\n      destWidth = maxWidth\n      destHeight = maxHeight\n      tmp = sourceWidth / sourceHeight - maxWidth / maxHeight\n      if (tmp < 0) {\n        sourceHeight = maxHeight * sourceWidth / maxWidth\n        if (options.top === undefined && options.bottom === undefined) {\n          sourceY = (height - sourceHeight) / 2\n        }\n      } else if (tmp > 0) {\n        sourceWidth = maxWidth * sourceHeight / maxHeight\n        if (options.left === undefined && options.right === undefined) {\n          sourceX = (width - sourceWidth) / 2\n        }\n      }\n    } else {\n      if (options.contain || options.cover) {\n        minWidth = maxWidth = maxWidth || minWidth\n        minHeight = maxHeight = maxHeight || minHeight\n      }\n      if (options.cover) {\n        scaleDown()\n        scaleUp()\n      } else {\n        scaleUp()\n        scaleDown()\n      }\n    }\n    if (useCanvas) {\n      pixelRatio = options.pixelRatio\n      if (pixelRatio > 1) {\n        canvas.style.width = destWidth + 'px'\n        canvas.style.height = destHeight + 'px'\n        destWidth *= pixelRatio\n        destHeight *= pixelRatio\n        canvas.getContext('2d').scale(pixelRatio, pixelRatio)\n      }\n      downsamplingRatio = options.downsamplingRatio\n      if (downsamplingRatio > 0 && downsamplingRatio < 1 &&\n            destWidth < sourceWidth && destHeight < sourceHeight) {\n        while (sourceWidth * downsamplingRatio > destWidth) {\n          canvas.width = sourceWidth * downsamplingRatio\n          canvas.height = sourceHeight * downsamplingRatio\n          loadImage.renderImageToCanvas(\n            canvas,\n            img,\n            sourceX,\n            sourceY,\n            sourceWidth,\n            sourceHeight,\n            0,\n            0,\n            canvas.width,\n            canvas.height\n          )\n          sourceX = 0\n          sourceY = 0\n          sourceWidth = canvas.width\n          sourceHeight = canvas.height\n          img = document.createElement('canvas')\n          img.width = sourceWidth\n          img.height = sourceHeight\n          loadImage.renderImageToCanvas(\n            img,\n            canvas,\n            0,\n            0,\n            sourceWidth,\n            sourceHeight,\n            0,\n            0,\n            sourceWidth,\n            sourceHeight\n          )\n        }\n      }\n      canvas.width = destWidth\n      canvas.height = destHeight\n      loadImage.transformCoordinates(\n        canvas,\n        options\n      )\n      return loadImage.renderImageToCanvas(\n        canvas,\n        img,\n        sourceX,\n        sourceY,\n        sourceWidth,\n        sourceHeight,\n        0,\n        0,\n        destWidth,\n        destHeight\n      )\n    }\n    img.width = destWidth\n    img.height = destHeight\n    return img\n  }\n}))\n\n\n/***/ }),\n/* 6 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_RESULT__;/*\n * JavaScript Canvas to Blob\n * https://github.com/blueimp/JavaScript-Canvas-to-Blob\n *\n * Copyright 2012, Sebastian Tschan\n * https://blueimp.net\n *\n * Licensed under the MIT license:\n * http://www.opensource.org/licenses/MIT\n *\n * Based on stackoverflow user Stoive's code snippet:\n * http://stackoverflow.com/q/4998908\n */\n\n/* global atob, Blob, define */\n\n;(function (window) {\n  'use strict'\n\n  var CanvasPrototype = window.HTMLCanvasElement &&\n                          window.HTMLCanvasElement.prototype\n  var hasBlobConstructor = window.Blob && (function () {\n    try {\n      return Boolean(new Blob())\n    } catch (e) {\n      return false\n    }\n  }())\n  var hasArrayBufferViewSupport = hasBlobConstructor && window.Uint8Array &&\n    (function () {\n      try {\n        return new Blob([new Uint8Array(100)]).size === 100\n      } catch (e) {\n        return false\n      }\n    }())\n  var BlobBuilder = window.BlobBuilder || window.WebKitBlobBuilder ||\n                      window.MozBlobBuilder || window.MSBlobBuilder\n  var dataURIPattern = /^data:((.*?)(;charset=.*?)?)(;base64)?,/\n  var dataURLtoBlob = (hasBlobConstructor || BlobBuilder) && window.atob &&\n    window.ArrayBuffer && window.Uint8Array &&\n    function (dataURI) {\n      var matches,\n        mediaType,\n        isBase64,\n        dataString,\n        byteString,\n        arrayBuffer,\n        intArray,\n        i,\n        bb\n      // Parse the dataURI components as per RFC 2397\n      matches = dataURI.match(dataURIPattern)\n      if (!matches) {\n        throw new Error('invalid data URI')\n      }\n      // Default to text/plain;charset=US-ASCII\n      mediaType = matches[2]\n        ? matches[1]\n        : 'text/plain' + (matches[3] || ';charset=US-ASCII')\n      isBase64 = !!matches[4]\n      dataString = dataURI.slice(matches[0].length)\n      if (isBase64) {\n        // Convert base64 to raw binary data held in a string:\n        byteString = atob(dataString)\n      } else {\n        // Convert base64/URLEncoded data component to raw binary:\n        byteString = decodeURIComponent(dataString)\n      }\n      // Write the bytes of the string to an ArrayBuffer:\n      arrayBuffer = new ArrayBuffer(byteString.length)\n      intArray = new Uint8Array(arrayBuffer)\n      for (i = 0; i < byteString.length; i += 1) {\n        intArray[i] = byteString.charCodeAt(i)\n      }\n      // Write the ArrayBuffer (or ArrayBufferView) to a blob:\n      if (hasBlobConstructor) {\n        return new Blob(\n          [hasArrayBufferViewSupport ? intArray : arrayBuffer],\n          {type: mediaType}\n        )\n      }\n      bb = new BlobBuilder()\n      bb.append(arrayBuffer)\n      return bb.getBlob(mediaType)\n    }\n  if (window.HTMLCanvasElement && !CanvasPrototype.toBlob) {\n    if (CanvasPrototype.mozGetAsFile) {\n      CanvasPrototype.toBlob = function (callback, type, quality) {\n        if (quality && CanvasPrototype.toDataURL && dataURLtoBlob) {\n          callback(dataURLtoBlob(this.toDataURL(type, quality)))\n        } else {\n          callback(this.mozGetAsFile('blob', type))\n        }\n      }\n    } else if (CanvasPrototype.toDataURL && dataURLtoBlob) {\n      CanvasPrototype.toBlob = function (callback, type, quality) {\n        callback(dataURLtoBlob(this.toDataURL(type, quality)))\n      }\n    }\n  }\n  if (true) {\n    !(__WEBPACK_AMD_DEFINE_RESULT__ = function () {\n      return dataURLtoBlob\n    }.call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__))\n  } else if (typeof module === 'object' && module.exports) {\n    module.exports = dataURLtoBlob\n  } else {\n    window.dataURLtoBlob = dataURLtoBlob\n  }\n}(window))\n\n\n/***/ }),\n/* 7 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*\n * jQuery File Upload Audio Preview Plugin\n * https://github.com/blueimp/jQuery-File-Upload\n *\n * Copyright 2013, Sebastian Tschan\n * https://blueimp.net\n *\n * Licensed under the MIT license:\n * https://opensource.org/licenses/MIT\n */\n\n/* jshint nomen:false */\n/* global define, require, window, document */\n\n;(function (factory) {\n    'use strict';\n    if (true) {\n        // Register as an anonymous AMD module:\n        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [\n            __webpack_require__(1),\n            __webpack_require__(0),\n            __webpack_require__(2)\n        ], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    } else if (typeof exports === 'object') {\n        // Node/CommonJS:\n        factory(\n            require('jquery'),\n            require('blueimp-load-image/js/load-image'),\n            require('./jquery.fileupload-process')\n        );\n    } else {\n        // Browser globals:\n        factory(\n            window.jQuery,\n            window.loadImage\n        );\n    }\n}(function ($, loadImage) {\n    'use strict';\n\n    // Prepend to the default processQueue:\n    $.blueimp.fileupload.prototype.options.processQueue.unshift(\n        {\n            action: 'loadAudio',\n            // Use the action as prefix for the \"@\" options:\n            prefix: true,\n            fileTypes: '@',\n            maxFileSize: '@',\n            disabled: '@disableAudioPreview'\n        },\n        {\n            action: 'setAudio',\n            name: '@audioPreviewName',\n            disabled: '@disableAudioPreview'\n        }\n    );\n\n    // The File Upload Audio Preview plugin extends the fileupload widget\n    // with audio preview functionality:\n    $.widget('blueimp.fileupload', $.blueimp.fileupload, {\n\n        options: {\n            // The regular expression for the types of audio files to load,\n            // matched against the file type:\n            loadAudioFileTypes: /^audio\\/.*$/\n        },\n\n        _audioElement: document.createElement('audio'),\n\n        processActions: {\n\n            // Loads the audio file given via data.files and data.index\n            // as audio element if the browser supports playing it.\n            // Accepts the options fileTypes (regular expression)\n            // and maxFileSize (integer) to limit the files to load:\n            loadAudio: function (data, options) {\n                if (options.disabled) {\n                    return data;\n                }\n                var file = data.files[data.index],\n                    url,\n                    audio;\n                if (this._audioElement.canPlayType &&\n                        this._audioElement.canPlayType(file.type) &&\n                        ($.type(options.maxFileSize) !== 'number' ||\n                            file.size <= options.maxFileSize) &&\n                        (!options.fileTypes ||\n                            options.fileTypes.test(file.type))) {\n                    url = loadImage.createObjectURL(file);\n                    if (url) {\n                        audio = this._audioElement.cloneNode(false);\n                        audio.src = url;\n                        audio.controls = true;\n                        data.audio = audio;\n                        return data;\n                    }\n                }\n                return data;\n            },\n\n            // Sets the audio element as a property of the file object:\n            setAudio: function (data, options) {\n                if (data.audio && !options.disabled) {\n                    data.files[data.index][options.name || 'preview'] = data.audio;\n                }\n                return data;\n            }\n\n        }\n\n    });\n\n}));\n\n\n/***/ }),\n/* 8 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*\n * jQuery File Upload Image Preview & Resize Plugin\n * https://github.com/blueimp/jQuery-File-Upload\n *\n * Copyright 2013, Sebastian Tschan\n * https://blueimp.net\n *\n * Licensed under the MIT license:\n * https://opensource.org/licenses/MIT\n */\n\n/* jshint nomen:false */\n/* global define, require, window, Blob */\n\n;(function (factory) {\n    'use strict';\n    if (true) {\n        // Register as an anonymous AMD module:\n        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [\n            __webpack_require__(1),\n            __webpack_require__(0),\n            __webpack_require__(3),\n            __webpack_require__(5),\n            __webpack_require__(4),\n            __webpack_require__(6),\n            __webpack_require__(2)\n        ], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    } else if (typeof exports === 'object') {\n        // Node/CommonJS:\n        factory(\n            require('jquery'),\n            require('blueimp-load-image/js/load-image'),\n            require('blueimp-load-image/js/load-image-meta'),\n            require('blueimp-load-image/js/load-image-scale'),\n            require('blueimp-load-image/js/load-image-exif'),\n            require('blueimp-canvas-to-blob'),\n            require('./jquery.fileupload-process')\n        );\n    } else {\n        // Browser globals:\n        factory(\n            window.jQuery,\n            window.loadImage\n        );\n    }\n}(function ($, loadImage) {\n    'use strict';\n\n    // Prepend to the default processQueue:\n    $.blueimp.fileupload.prototype.options.processQueue.unshift(\n        {\n            action: 'loadImageMetaData',\n            disableImageHead: '@',\n            disableExif: '@',\n            disableExifThumbnail: '@',\n            disableExifSub: '@',\n            disableExifGps: '@',\n            disabled: '@disableImageMetaDataLoad'\n        },\n        {\n            action: 'loadImage',\n            // Use the action as prefix for the \"@\" options:\n            prefix: true,\n            fileTypes: '@',\n            maxFileSize: '@',\n            noRevoke: '@',\n            disabled: '@disableImageLoad'\n        },\n        {\n            action: 'resizeImage',\n            // Use \"image\" as prefix for the \"@\" options:\n            prefix: 'image',\n            maxWidth: '@',\n            maxHeight: '@',\n            minWidth: '@',\n            minHeight: '@',\n            crop: '@',\n            orientation: '@',\n            forceResize: '@',\n            disabled: '@disableImageResize'\n        },\n        {\n            action: 'saveImage',\n            quality: '@imageQuality',\n            type: '@imageType',\n            disabled: '@disableImageResize'\n        },\n        {\n            action: 'saveImageMetaData',\n            disabled: '@disableImageMetaDataSave'\n        },\n        {\n            action: 'resizeImage',\n            // Use \"preview\" as prefix for the \"@\" options:\n            prefix: 'preview',\n            maxWidth: '@',\n            maxHeight: '@',\n            minWidth: '@',\n            minHeight: '@',\n            crop: '@',\n            orientation: '@',\n            thumbnail: '@',\n            canvas: '@',\n            disabled: '@disableImagePreview'\n        },\n        {\n            action: 'setImage',\n            name: '@imagePreviewName',\n            disabled: '@disableImagePreview'\n        },\n        {\n            action: 'deleteImageReferences',\n            disabled: '@disableImageReferencesDeletion'\n        }\n    );\n\n    // The File Upload Resize plugin extends the fileupload widget\n    // with image resize functionality:\n    $.widget('blueimp.fileupload', $.blueimp.fileupload, {\n\n        options: {\n            // The regular expression for the types of images to load:\n            // matched against the file type:\n            loadImageFileTypes: /^image\\/(gif|jpeg|png|svg\\+xml)$/,\n            // The maximum file size of images to load:\n            loadImageMaxFileSize: 10000000, // 10MB\n            // The maximum width of resized images:\n            imageMaxWidth: 1920,\n            // The maximum height of resized images:\n            imageMaxHeight: 1080,\n            // Defines the image orientation (1-8) or takes the orientation\n            // value from Exif data if set to true:\n            imageOrientation: false,\n            // Define if resized images should be cropped or only scaled:\n            imageCrop: false,\n            // Disable the resize image functionality by default:\n            disableImageResize: true,\n            // The maximum width of the preview images:\n            previewMaxWidth: 80,\n            // The maximum height of the preview images:\n            previewMaxHeight: 80,\n            // Defines the preview orientation (1-8) or takes the orientation\n            // value from Exif data if set to true:\n            previewOrientation: true,\n            // Create the preview using the Exif data thumbnail:\n            previewThumbnail: true,\n            // Define if preview images should be cropped or only scaled:\n            previewCrop: false,\n            // Define if preview images should be resized as canvas elements:\n            previewCanvas: true\n        },\n\n        processActions: {\n\n            // Loads the image given via data.files and data.index\n            // as img element, if the browser supports the File API.\n            // Accepts the options fileTypes (regular expression)\n            // and maxFileSize (integer) to limit the files to load:\n            loadImage: function (data, options) {\n                if (options.disabled) {\n                    return data;\n                }\n                var that = this,\n                    file = data.files[data.index],\n                    dfd = $.Deferred();\n                if (($.type(options.maxFileSize) === 'number' &&\n                            file.size > options.maxFileSize) ||\n                        (options.fileTypes &&\n                            !options.fileTypes.test(file.type)) ||\n                        !loadImage(\n                            file,\n                            function (img) {\n                                if (img.src) {\n                                    data.img = img;\n                                }\n                                dfd.resolveWith(that, [data]);\n                            },\n                            options\n                        )) {\n                    return data;\n                }\n                return dfd.promise();\n            },\n\n            // Resizes the image given as data.canvas or data.img\n            // and updates data.canvas or data.img with the resized image.\n            // Also stores the resized image as preview property.\n            // Accepts the options maxWidth, maxHeight, minWidth,\n            // minHeight, canvas and crop:\n            resizeImage: function (data, options) {\n                if (options.disabled || !(data.canvas || data.img)) {\n                    return data;\n                }\n                options = $.extend({canvas: true}, options);\n                var that = this,\n                    dfd = $.Deferred(),\n                    img = (options.canvas && data.canvas) || data.img,\n                    resolve = function (newImg) {\n                        if (newImg && (newImg.width !== img.width ||\n                                newImg.height !== img.height ||\n                                options.forceResize)) {\n                            data[newImg.getContext ? 'canvas' : 'img'] = newImg;\n                        }\n                        data.preview = newImg;\n                        dfd.resolveWith(that, [data]);\n                    },\n                    thumbnail;\n                if (data.exif) {\n                    if (options.orientation === true) {\n                        options.orientation = data.exif.get('Orientation');\n                    }\n                    if (options.thumbnail) {\n                        thumbnail = data.exif.get('Thumbnail');\n                        if (thumbnail) {\n                            loadImage(thumbnail, resolve, options);\n                            return dfd.promise();\n                        }\n                    }\n                    // Prevent orienting the same image twice:\n                    if (data.orientation) {\n                        delete options.orientation;\n                    } else {\n                        data.orientation = options.orientation;\n                    }\n                }\n                if (img) {\n                    resolve(loadImage.scale(img, options));\n                    return dfd.promise();\n                }\n                return data;\n            },\n\n            // Saves the processed image given as data.canvas\n            // inplace at data.index of data.files:\n            saveImage: function (data, options) {\n                if (!data.canvas || options.disabled) {\n                    return data;\n                }\n                var that = this,\n                    file = data.files[data.index],\n                    dfd = $.Deferred();\n                if (data.canvas.toBlob) {\n                    data.canvas.toBlob(\n                        function (blob) {\n                            if (!blob.name) {\n                                if (file.type === blob.type) {\n                                    blob.name = file.name;\n                                } else if (file.name) {\n                                    blob.name = file.name.replace(\n                                        /\\.\\w+$/,\n                                        '.' + blob.type.substr(6)\n                                    );\n                                }\n                            }\n                            // Don't restore invalid meta data:\n                            if (file.type !== blob.type) {\n                                delete data.imageHead;\n                            }\n                            // Store the created blob at the position\n                            // of the original file in the files list:\n                            data.files[data.index] = blob;\n                            dfd.resolveWith(that, [data]);\n                        },\n                        options.type || file.type,\n                        options.quality\n                    );\n                } else {\n                    return data;\n                }\n                return dfd.promise();\n            },\n\n            loadImageMetaData: function (data, options) {\n                if (options.disabled) {\n                    return data;\n                }\n                var that = this,\n                    dfd = $.Deferred();\n                loadImage.parseMetaData(data.files[data.index], function (result) {\n                    $.extend(data, result);\n                    dfd.resolveWith(that, [data]);\n                }, options);\n                return dfd.promise();\n            },\n\n            saveImageMetaData: function (data, options) {\n                if (!(data.imageHead && data.canvas &&\n                        data.canvas.toBlob && !options.disabled)) {\n                    return data;\n                }\n                var file = data.files[data.index],\n                    blob = new Blob([\n                        data.imageHead,\n                        // Resized images always have a head size of 20 bytes,\n                        // including the JPEG marker and a minimal JFIF header:\n                        this._blobSlice.call(file, 20)\n                    ], {type: file.type});\n                blob.name = file.name;\n                data.files[data.index] = blob;\n                return data;\n            },\n\n            // Sets the resized version of the image as a property of the\n            // file object, must be called after \"saveImage\":\n            setImage: function (data, options) {\n                if (data.preview && !options.disabled) {\n                    data.files[data.index][options.name || 'preview'] = data.preview;\n                }\n                return data;\n            },\n\n            deleteImageReferences: function (data, options) {\n                if (!options.disabled) {\n                    delete data.img;\n                    delete data.canvas;\n                    delete data.preview;\n                    delete data.imageHead;\n                }\n                return data;\n            }\n\n        }\n\n    });\n\n}));\n\n\n/***/ }),\n/* 9 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*\n * jQuery File Upload Validation Plugin\n * https://github.com/blueimp/jQuery-File-Upload\n *\n * Copyright 2013, Sebastian Tschan\n * https://blueimp.net\n *\n * Licensed under the MIT license:\n * https://opensource.org/licenses/MIT\n */\n\n/* global define, require, window */\n\n;(function (factory) {\n    'use strict';\n    if (true) {\n        // Register as an anonymous AMD module:\n        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [\n            __webpack_require__(1),\n            __webpack_require__(2)\n        ], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    } else if (typeof exports === 'object') {\n        // Node/CommonJS:\n        factory(\n            require('jquery'),\n            require('./jquery.fileupload-process')\n        );\n    } else {\n        // Browser globals:\n        factory(\n            window.jQuery\n        );\n    }\n}(function ($) {\n    'use strict';\n\n    // Append to the default processQueue:\n    $.blueimp.fileupload.prototype.options.processQueue.push(\n        {\n            action: 'validate',\n            // Always trigger this action,\n            // even if the previous action was rejected:\n            always: true,\n            // Options taken from the global options map:\n            acceptFileTypes: '@',\n            maxFileSize: '@',\n            minFileSize: '@',\n            maxNumberOfFiles: '@',\n            disabled: '@disableValidation'\n        }\n    );\n\n    // The File Upload Validation plugin extends the fileupload widget\n    // with file validation functionality:\n    $.widget('blueimp.fileupload', $.blueimp.fileupload, {\n\n        options: {\n            /*\n            // The regular expression for allowed file types, matches\n            // against either file type or file name:\n            acceptFileTypes: /(\\.|\\/)(gif|jpe?g|png)$/i,\n            // The maximum allowed file size in bytes:\n            maxFileSize: 10000000, // 10 MB\n            // The minimum allowed file size in bytes:\n            minFileSize: undefined, // No minimal file size\n            // The limit of files to be uploaded:\n            maxNumberOfFiles: 10,\n            */\n\n            // Function returning the current number of files,\n            // has to be overriden for maxNumberOfFiles validation:\n            getNumberOfFiles: $.noop,\n\n            // Error and info messages:\n            messages: {\n                maxNumberOfFiles: 'Maximum number of files exceeded',\n                acceptFileTypes: 'File type not allowed',\n                maxFileSize: 'File is too large',\n                minFileSize: 'File is too small'\n            }\n        },\n\n        processActions: {\n\n            validate: function (data, options) {\n                if (options.disabled) {\n                    return data;\n                }\n                var dfd = $.Deferred(),\n                    settings = this.options,\n                    file = data.files[data.index],\n                    fileSize;\n                if (options.minFileSize || options.maxFileSize) {\n                    fileSize = file.size;\n                }\n                if ($.type(options.maxNumberOfFiles) === 'number' &&\n                        (settings.getNumberOfFiles() || 0) + data.files.length >\n                            options.maxNumberOfFiles) {\n                    file.error = settings.i18n('maxNumberOfFiles');\n                } else if (options.acceptFileTypes &&\n                        !(options.acceptFileTypes.test(file.type) ||\n                        options.acceptFileTypes.test(file.name))) {\n                    file.error = settings.i18n('acceptFileTypes');\n                } else if (fileSize > options.maxFileSize) {\n                    file.error = settings.i18n('maxFileSize');\n                } else if ($.type(fileSize) === 'number' &&\n                        fileSize < options.minFileSize) {\n                    file.error = settings.i18n('minFileSize');\n                } else {\n                    delete file.error;\n                }\n                if (file.error || data.files.error) {\n                    data.files.error = true;\n                    dfd.rejectWith(this, [data]);\n                } else {\n                    dfd.resolveWith(this, [data]);\n                }\n                return dfd.promise();\n            }\n\n        }\n\n    });\n\n}));\n\n\n/***/ }),\n/* 10 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*\n * jQuery File Upload Video Preview Plugin\n * https://github.com/blueimp/jQuery-File-Upload\n *\n * Copyright 2013, Sebastian Tschan\n * https://blueimp.net\n *\n * Licensed under the MIT license:\n * https://opensource.org/licenses/MIT\n */\n\n/* jshint nomen:false */\n/* global define, require, window, document */\n\n;(function (factory) {\n    'use strict';\n    if (true) {\n        // Register as an anonymous AMD module:\n        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [\n            __webpack_require__(1),\n            __webpack_require__(0),\n            __webpack_require__(2)\n        ], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    } else if (typeof exports === 'object') {\n        // Node/CommonJS:\n        factory(\n            require('jquery'),\n            require('blueimp-load-image/js/load-image'),\n            require('./jquery.fileupload-process')\n        );\n    } else {\n        // Browser globals:\n        factory(\n            window.jQuery,\n            window.loadImage\n        );\n    }\n}(function ($, loadImage) {\n    'use strict';\n\n    // Prepend to the default processQueue:\n    $.blueimp.fileupload.prototype.options.processQueue.unshift(\n        {\n            action: 'loadVideo',\n            // Use the action as prefix for the \"@\" options:\n            prefix: true,\n            fileTypes: '@',\n            maxFileSize: '@',\n            disabled: '@disableVideoPreview'\n        },\n        {\n            action: 'setVideo',\n            name: '@videoPreviewName',\n            disabled: '@disableVideoPreview'\n        }\n    );\n\n    // The File Upload Video Preview plugin extends the fileupload widget\n    // with video preview functionality:\n    $.widget('blueimp.fileupload', $.blueimp.fileupload, {\n\n        options: {\n            // The regular expression for the types of video files to load,\n            // matched against the file type:\n            loadVideoFileTypes: /^video\\/.*$/\n        },\n\n        _videoElement: document.createElement('video'),\n\n        processActions: {\n\n            // Loads the video file given via data.files and data.index\n            // as video element if the browser supports playing it.\n            // Accepts the options fileTypes (regular expression)\n            // and maxFileSize (integer) to limit the files to load:\n            loadVideo: function (data, options) {\n                if (options.disabled) {\n                    return data;\n                }\n                var file = data.files[data.index],\n                    url,\n                    video;\n                if (this._videoElement.canPlayType &&\n                        this._videoElement.canPlayType(file.type) &&\n                        ($.type(options.maxFileSize) !== 'number' ||\n                            file.size <= options.maxFileSize) &&\n                        (!options.fileTypes ||\n                            options.fileTypes.test(file.type))) {\n                    url = loadImage.createObjectURL(file);\n                    if (url) {\n                        video = this._videoElement.cloneNode(false);\n                        video.src = url;\n                        video.controls = true;\n                        data.video = video;\n                        return data;\n                    }\n                }\n                return data;\n            },\n\n            // Sets the video element as a property of the file object:\n            setVideo: function (data, options) {\n                if (data.video && !options.disabled) {\n                    data.files[data.index][options.name || 'preview'] = data.video;\n                }\n                return data;\n            }\n\n        }\n\n    });\n\n}));\n\n\n/***/ }),\n/* 11 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*\n * jQuery File Upload Plugin\n * https://github.com/blueimp/jQuery-File-Upload\n *\n * Copyright 2010, Sebastian Tschan\n * https://blueimp.net\n *\n * Licensed under the MIT license:\n * https://opensource.org/licenses/MIT\n */\n\n/* jshint nomen:false */\n/* global define, require, window, document, location, Blob, FormData */\n\n;(function (factory) {\n    'use strict';\n    if (true) {\n        // Register as an anonymous AMD module:\n        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [\n            __webpack_require__(1),\n            __webpack_require__(18)\n        ], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    } else if (typeof exports === 'object') {\n        // Node/CommonJS:\n        factory(\n            require('jquery'),\n            require('./vendor/jquery.ui.widget')\n        );\n    } else {\n        // Browser globals:\n        factory(window.jQuery);\n    }\n}(function ($) {\n    'use strict';\n\n    // Detect file input support, based on\n    // http://viljamis.com/blog/2012/file-upload-support-on-mobile/\n    $.support.fileInput = !(new RegExp(\n        // Handle devices which give false positives for the feature detection:\n        '(Android (1\\\\.[0156]|2\\\\.[01]))' +\n            '|(Windows Phone (OS 7|8\\\\.0))|(XBLWP)|(ZuneWP)|(WPDesktop)' +\n            '|(w(eb)?OSBrowser)|(webOS)' +\n            '|(Kindle/(1\\\\.0|2\\\\.[05]|3\\\\.0))'\n    ).test(window.navigator.userAgent) ||\n        // Feature detection for all other devices:\n        $('<input type=\"file\">').prop('disabled'));\n\n    // The FileReader API is not actually used, but works as feature detection,\n    // as some Safari versions (5?) support XHR file uploads via the FormData API,\n    // but not non-multipart XHR file uploads.\n    // window.XMLHttpRequestUpload is not available on IE10, so we check for\n    // window.ProgressEvent instead to detect XHR2 file upload capability:\n    $.support.xhrFileUpload = !!(window.ProgressEvent && window.FileReader);\n    $.support.xhrFormDataFileUpload = !!window.FormData;\n\n    // Detect support for Blob slicing (required for chunked uploads):\n    $.support.blobSlice = window.Blob && (Blob.prototype.slice ||\n        Blob.prototype.webkitSlice || Blob.prototype.mozSlice);\n\n    // Helper function to create drag handlers for dragover/dragenter/dragleave:\n    function getDragHandler(type) {\n        var isDragOver = type === 'dragover';\n        return function (e) {\n            e.dataTransfer = e.originalEvent && e.originalEvent.dataTransfer;\n            var dataTransfer = e.dataTransfer;\n            if (dataTransfer && $.inArray('Files', dataTransfer.types) !== -1 &&\n                    this._trigger(\n                        type,\n                        $.Event(type, {delegatedEvent: e})\n                    ) !== false) {\n                e.preventDefault();\n                if (isDragOver) {\n                    dataTransfer.dropEffect = 'copy';\n                }\n            }\n        };\n    }\n\n    // The fileupload widget listens for change events on file input fields defined\n    // via fileInput setting and paste or drop events of the given dropZone.\n    // In addition to the default jQuery Widget methods, the fileupload widget\n    // exposes the \"add\" and \"send\" methods, to add or directly send files using\n    // the fileupload API.\n    // By default, files added via file input selection, paste, drag & drop or\n    // \"add\" method are uploaded immediately, but it is possible to override\n    // the \"add\" callback option to queue file uploads.\n    $.widget('blueimp.fileupload', {\n\n        options: {\n            // The drop target element(s), by the default the complete document.\n            // Set to null to disable drag & drop support:\n            dropZone: $(document),\n            // The paste target element(s), by the default undefined.\n            // Set to a DOM node or jQuery object to enable file pasting:\n            pasteZone: undefined,\n            // The file input field(s), that are listened to for change events.\n            // If undefined, it is set to the file input fields inside\n            // of the widget element on plugin initialization.\n            // Set to null to disable the change listener.\n            fileInput: undefined,\n            // By default, the file input field is replaced with a clone after\n            // each input field change event. This is required for iframe transport\n            // queues and allows change events to be fired for the same file\n            // selection, but can be disabled by setting the following option to false:\n            replaceFileInput: true,\n            // The parameter name for the file form data (the request argument name).\n            // If undefined or empty, the name property of the file input field is\n            // used, or \"files[]\" if the file input name property is also empty,\n            // can be a string or an array of strings:\n            paramName: undefined,\n            // By default, each file of a selection is uploaded using an individual\n            // request for XHR type uploads. Set to false to upload file\n            // selections in one request each:\n            singleFileUploads: true,\n            // To limit the number of files uploaded with one XHR request,\n            // set the following option to an integer greater than 0:\n            limitMultiFileUploads: undefined,\n            // The following option limits the number of files uploaded with one\n            // XHR request to keep the request size under or equal to the defined\n            // limit in bytes:\n            limitMultiFileUploadSize: undefined,\n            // Multipart file uploads add a number of bytes to each uploaded file,\n            // therefore the following option adds an overhead for each file used\n            // in the limitMultiFileUploadSize configuration:\n            limitMultiFileUploadSizeOverhead: 512,\n            // Set the following option to true to issue all file upload requests\n            // in a sequential order:\n            sequentialUploads: false,\n            // To limit the number of concurrent uploads,\n            // set the following option to an integer greater than 0:\n            limitConcurrentUploads: undefined,\n            // Set the following option to true to force iframe transport uploads:\n            forceIframeTransport: false,\n            // Set the following option to the location of a redirect url on the\n            // origin server, for cross-domain iframe transport uploads:\n            redirect: undefined,\n            // The parameter name for the redirect url, sent as part of the form\n            // data and set to 'redirect' if this option is empty:\n            redirectParamName: undefined,\n            // Set the following option to the location of a postMessage window,\n            // to enable postMessage transport uploads:\n            postMessage: undefined,\n            // By default, XHR file uploads are sent as multipart/form-data.\n            // The iframe transport is always using multipart/form-data.\n            // Set to false to enable non-multipart XHR uploads:\n            multipart: true,\n            // To upload large files in smaller chunks, set the following option\n            // to a preferred maximum chunk size. If set to 0, null or undefined,\n            // or the browser does not support the required Blob API, files will\n            // be uploaded as a whole.\n            maxChunkSize: undefined,\n            // When a non-multipart upload or a chunked multipart upload has been\n            // aborted, this option can be used to resume the upload by setting\n            // it to the size of the already uploaded bytes. This option is most\n            // useful when modifying the options object inside of the \"add\" or\n            // \"send\" callbacks, as the options are cloned for each file upload.\n            uploadedBytes: undefined,\n            // By default, failed (abort or error) file uploads are removed from the\n            // global progress calculation. Set the following option to false to\n            // prevent recalculating the global progress data:\n            recalculateProgress: true,\n            // Interval in milliseconds to calculate and trigger progress events:\n            progressInterval: 100,\n            // Interval in milliseconds to calculate progress bitrate:\n            bitrateInterval: 500,\n            // By default, uploads are started automatically when adding files:\n            autoUpload: true,\n\n            // Error and info messages:\n            messages: {\n                uploadedBytes: 'Uploaded bytes exceed file size'\n            },\n\n            // Translation function, gets the message key to be translated\n            // and an object with context specific data as arguments:\n            i18n: function (message, context) {\n                message = this.messages[message] || message.toString();\n                if (context) {\n                    $.each(context, function (key, value) {\n                        message = message.replace('{' + key + '}', value);\n                    });\n                }\n                return message;\n            },\n\n            // Additional form data to be sent along with the file uploads can be set\n            // using this option, which accepts an array of objects with name and\n            // value properties, a function returning such an array, a FormData\n            // object (for XHR file uploads), or a simple object.\n            // The form of the first fileInput is given as parameter to the function:\n            formData: function (form) {\n                return form.serializeArray();\n            },\n\n            // The add callback is invoked as soon as files are added to the fileupload\n            // widget (via file input selection, drag & drop, paste or add API call).\n            // If the singleFileUploads option is enabled, this callback will be\n            // called once for each file in the selection for XHR file uploads, else\n            // once for each file selection.\n            //\n            // The upload starts when the submit method is invoked on the data parameter.\n            // The data object contains a files property holding the added files\n            // and allows you to override plugin options as well as define ajax settings.\n            //\n            // Listeners for this callback can also be bound the following way:\n            // .bind('fileuploadadd', func);\n            //\n            // data.submit() returns a Promise object and allows to attach additional\n            // handlers using jQuery's Deferred callbacks:\n            // data.submit().done(func).fail(func).always(func);\n            add: function (e, data) {\n                if (e.isDefaultPrevented()) {\n                    return false;\n                }\n                if (data.autoUpload || (data.autoUpload !== false &&\n                        $(this).fileupload('option', 'autoUpload'))) {\n                    data.process().done(function () {\n                        data.submit();\n                    });\n                }\n            },\n\n            // Other callbacks:\n\n            // Callback for the submit event of each file upload:\n            // submit: function (e, data) {}, // .bind('fileuploadsubmit', func);\n\n            // Callback for the start of each file upload request:\n            // send: function (e, data) {}, // .bind('fileuploadsend', func);\n\n            // Callback for successful uploads:\n            // done: function (e, data) {}, // .bind('fileuploaddone', func);\n\n            // Callback for failed (abort or error) uploads:\n            // fail: function (e, data) {}, // .bind('fileuploadfail', func);\n\n            // Callback for completed (success, abort or error) requests:\n            // always: function (e, data) {}, // .bind('fileuploadalways', func);\n\n            // Callback for upload progress events:\n            // progress: function (e, data) {}, // .bind('fileuploadprogress', func);\n\n            // Callback for global upload progress events:\n            // progressall: function (e, data) {}, // .bind('fileuploadprogressall', func);\n\n            // Callback for uploads start, equivalent to the global ajaxStart event:\n            // start: function (e) {}, // .bind('fileuploadstart', func);\n\n            // Callback for uploads stop, equivalent to the global ajaxStop event:\n            // stop: function (e) {}, // .bind('fileuploadstop', func);\n\n            // Callback for change events of the fileInput(s):\n            // change: function (e, data) {}, // .bind('fileuploadchange', func);\n\n            // Callback for paste events to the pasteZone(s):\n            // paste: function (e, data) {}, // .bind('fileuploadpaste', func);\n\n            // Callback for drop events of the dropZone(s):\n            // drop: function (e, data) {}, // .bind('fileuploaddrop', func);\n\n            // Callback for dragover events of the dropZone(s):\n            // dragover: function (e) {}, // .bind('fileuploaddragover', func);\n\n            // Callback for the start of each chunk upload request:\n            // chunksend: function (e, data) {}, // .bind('fileuploadchunksend', func);\n\n            // Callback for successful chunk uploads:\n            // chunkdone: function (e, data) {}, // .bind('fileuploadchunkdone', func);\n\n            // Callback for failed (abort or error) chunk uploads:\n            // chunkfail: function (e, data) {}, // .bind('fileuploadchunkfail', func);\n\n            // Callback for completed (success, abort or error) chunk upload requests:\n            // chunkalways: function (e, data) {}, // .bind('fileuploadchunkalways', func);\n\n            // The plugin options are used as settings object for the ajax calls.\n            // The following are jQuery ajax settings required for the file uploads:\n            processData: false,\n            contentType: false,\n            cache: false,\n            timeout: 0\n        },\n\n        // A list of options that require reinitializing event listeners and/or\n        // special initialization code:\n        _specialOptions: [\n            'fileInput',\n            'dropZone',\n            'pasteZone',\n            'multipart',\n            'forceIframeTransport'\n        ],\n\n        _blobSlice: $.support.blobSlice && function () {\n            var slice = this.slice || this.webkitSlice || this.mozSlice;\n            return slice.apply(this, arguments);\n        },\n\n        _BitrateTimer: function () {\n            this.timestamp = ((Date.now) ? Date.now() : (new Date()).getTime());\n            this.loaded = 0;\n            this.bitrate = 0;\n            this.getBitrate = function (now, loaded, interval) {\n                var timeDiff = now - this.timestamp;\n                if (!this.bitrate || !interval || timeDiff > interval) {\n                    this.bitrate = (loaded - this.loaded) * (1000 / timeDiff) * 8;\n                    this.loaded = loaded;\n                    this.timestamp = now;\n                }\n                return this.bitrate;\n            };\n        },\n\n        _isXHRUpload: function (options) {\n            return !options.forceIframeTransport &&\n                ((!options.multipart && $.support.xhrFileUpload) ||\n                $.support.xhrFormDataFileUpload);\n        },\n\n        _getFormData: function (options) {\n            var formData;\n            if ($.type(options.formData) === 'function') {\n                return options.formData(options.form);\n            }\n            if ($.isArray(options.formData)) {\n                return options.formData;\n            }\n            if ($.type(options.formData) === 'object') {\n                formData = [];\n                $.each(options.formData, function (name, value) {\n                    formData.push({name: name, value: value});\n                });\n                return formData;\n            }\n            return [];\n        },\n\n        _getTotal: function (files) {\n            var total = 0;\n            $.each(files, function (index, file) {\n                total += file.size || 1;\n            });\n            return total;\n        },\n\n        _initProgressObject: function (obj) {\n            var progress = {\n                loaded: 0,\n                total: 0,\n                bitrate: 0\n            };\n            if (obj._progress) {\n                $.extend(obj._progress, progress);\n            } else {\n                obj._progress = progress;\n            }\n        },\n\n        _initResponseObject: function (obj) {\n            var prop;\n            if (obj._response) {\n                for (prop in obj._response) {\n                    if (obj._response.hasOwnProperty(prop)) {\n                        delete obj._response[prop];\n                    }\n                }\n            } else {\n                obj._response = {};\n            }\n        },\n\n        _onProgress: function (e, data) {\n            if (e.lengthComputable) {\n                var now = ((Date.now) ? Date.now() : (new Date()).getTime()),\n                    loaded;\n                if (data._time && data.progressInterval &&\n                        (now - data._time < data.progressInterval) &&\n                        e.loaded !== e.total) {\n                    return;\n                }\n                data._time = now;\n                loaded = Math.floor(\n                    e.loaded / e.total * (data.chunkSize || data._progress.total)\n                ) + (data.uploadedBytes || 0);\n                // Add the difference from the previously loaded state\n                // to the global loaded counter:\n                this._progress.loaded += (loaded - data._progress.loaded);\n                this._progress.bitrate = this._bitrateTimer.getBitrate(\n                    now,\n                    this._progress.loaded,\n                    data.bitrateInterval\n                );\n                data._progress.loaded = data.loaded = loaded;\n                data._progress.bitrate = data.bitrate = data._bitrateTimer.getBitrate(\n                    now,\n                    loaded,\n                    data.bitrateInterval\n                );\n                // Trigger a custom progress event with a total data property set\n                // to the file size(s) of the current upload and a loaded data\n                // property calculated accordingly:\n                this._trigger(\n                    'progress',\n                    $.Event('progress', {delegatedEvent: e}),\n                    data\n                );\n                // Trigger a global progress event for all current file uploads,\n                // including ajax calls queued for sequential file uploads:\n                this._trigger(\n                    'progressall',\n                    $.Event('progressall', {delegatedEvent: e}),\n                    this._progress\n                );\n            }\n        },\n\n        _initProgressListener: function (options) {\n            var that = this,\n                xhr = options.xhr ? options.xhr() : $.ajaxSettings.xhr();\n            // Accesss to the native XHR object is required to add event listeners\n            // for the upload progress event:\n            if (xhr.upload) {\n                $(xhr.upload).bind('progress', function (e) {\n                    var oe = e.originalEvent;\n                    // Make sure the progress event properties get copied over:\n                    e.lengthComputable = oe.lengthComputable;\n                    e.loaded = oe.loaded;\n                    e.total = oe.total;\n                    that._onProgress(e, options);\n                });\n                options.xhr = function () {\n                    return xhr;\n                };\n            }\n        },\n\n        _isInstanceOf: function (type, obj) {\n            // Cross-frame instanceof check\n            return Object.prototype.toString.call(obj) === '[object ' + type + ']';\n        },\n\n        _initXHRData: function (options) {\n            var that = this,\n                formData,\n                file = options.files[0],\n                // Ignore non-multipart setting if not supported:\n                multipart = options.multipart || !$.support.xhrFileUpload,\n                paramName = $.type(options.paramName) === 'array' ?\n                    options.paramName[0] : options.paramName;\n            options.headers = $.extend({}, options.headers);\n            if (options.contentRange) {\n                options.headers['Content-Range'] = options.contentRange;\n            }\n            if (!multipart || options.blob || !this._isInstanceOf('File', file)) {\n                options.headers['Content-Disposition'] = 'attachment; filename=\"' +\n                    encodeURI(file.name) + '\"';\n            }\n            if (!multipart) {\n                options.contentType = file.type || 'application/octet-stream';\n                options.data = options.blob || file;\n            } else if ($.support.xhrFormDataFileUpload) {\n                if (options.postMessage) {\n                    // window.postMessage does not allow sending FormData\n                    // objects, so we just add the File/Blob objects to\n                    // the formData array and let the postMessage window\n                    // create the FormData object out of this array:\n                    formData = this._getFormData(options);\n                    if (options.blob) {\n                        formData.push({\n                            name: paramName,\n                            value: options.blob\n                        });\n                    } else {\n                        $.each(options.files, function (index, file) {\n                            formData.push({\n                                name: ($.type(options.paramName) === 'array' &&\n                                    options.paramName[index]) || paramName,\n                                value: file\n                            });\n                        });\n                    }\n                } else {\n                    if (that._isInstanceOf('FormData', options.formData)) {\n                        formData = options.formData;\n                    } else {\n                        formData = new FormData();\n                        $.each(this._getFormData(options), function (index, field) {\n                            formData.append(field.name, field.value);\n                        });\n                    }\n                    if (options.blob) {\n                        formData.append(paramName, options.blob, file.name);\n                    } else {\n                        $.each(options.files, function (index, file) {\n                            // This check allows the tests to run with\n                            // dummy objects:\n                            if (that._isInstanceOf('File', file) ||\n                                    that._isInstanceOf('Blob', file)) {\n                                formData.append(\n                                    ($.type(options.paramName) === 'array' &&\n                                        options.paramName[index]) || paramName,\n                                    file,\n                                    file.uploadName || file.name\n                                );\n                            }\n                        });\n                    }\n                }\n                options.data = formData;\n            }\n            // Blob reference is not needed anymore, free memory:\n            options.blob = null;\n        },\n\n        _initIframeSettings: function (options) {\n            var targetHost = $('<a></a>').prop('href', options.url).prop('host');\n            // Setting the dataType to iframe enables the iframe transport:\n            options.dataType = 'iframe ' + (options.dataType || '');\n            // The iframe transport accepts a serialized array as form data:\n            options.formData = this._getFormData(options);\n            // Add redirect url to form data on cross-domain uploads:\n            if (options.redirect && targetHost && targetHost !== location.host) {\n                options.formData.push({\n                    name: options.redirectParamName || 'redirect',\n                    value: options.redirect\n                });\n            }\n        },\n\n        _initDataSettings: function (options) {\n            if (this._isXHRUpload(options)) {\n                if (!this._chunkedUpload(options, true)) {\n                    if (!options.data) {\n                        this._initXHRData(options);\n                    }\n                    this._initProgressListener(options);\n                }\n                if (options.postMessage) {\n                    // Setting the dataType to postmessage enables the\n                    // postMessage transport:\n                    options.dataType = 'postmessage ' + (options.dataType || '');\n                }\n            } else {\n                this._initIframeSettings(options);\n            }\n        },\n\n        _getParamName: function (options) {\n            var fileInput = $(options.fileInput),\n                paramName = options.paramName;\n            if (!paramName) {\n                paramName = [];\n                fileInput.each(function () {\n                    var input = $(this),\n                        name = input.prop('name') || 'files[]',\n                        i = (input.prop('files') || [1]).length;\n                    while (i) {\n                        paramName.push(name);\n                        i -= 1;\n                    }\n                });\n                if (!paramName.length) {\n                    paramName = [fileInput.prop('name') || 'files[]'];\n                }\n            } else if (!$.isArray(paramName)) {\n                paramName = [paramName];\n            }\n            return paramName;\n        },\n\n        _initFormSettings: function (options) {\n            // Retrieve missing options from the input field and the\n            // associated form, if available:\n            if (!options.form || !options.form.length) {\n                options.form = $(options.fileInput.prop('form'));\n                // If the given file input doesn't have an associated form,\n                // use the default widget file input's form:\n                if (!options.form.length) {\n                    options.form = $(this.options.fileInput.prop('form'));\n                }\n            }\n            options.paramName = this._getParamName(options);\n            if (!options.url) {\n                options.url = options.form.prop('action') || location.href;\n            }\n            // The HTTP request method must be \"POST\" or \"PUT\":\n            options.type = (options.type ||\n                ($.type(options.form.prop('method')) === 'string' &&\n                    options.form.prop('method')) || ''\n                ).toUpperCase();\n            if (options.type !== 'POST' && options.type !== 'PUT' &&\n                    options.type !== 'PATCH') {\n                options.type = 'POST';\n            }\n            if (!options.formAcceptCharset) {\n                options.formAcceptCharset = options.form.attr('accept-charset');\n            }\n        },\n\n        _getAJAXSettings: function (data) {\n            var options = $.extend({}, this.options, data);\n            this._initFormSettings(options);\n            this._initDataSettings(options);\n            return options;\n        },\n\n        // jQuery 1.6 doesn't provide .state(),\n        // while jQuery 1.8+ removed .isRejected() and .isResolved():\n        _getDeferredState: function (deferred) {\n            if (deferred.state) {\n                return deferred.state();\n            }\n            if (deferred.isResolved()) {\n                return 'resolved';\n            }\n            if (deferred.isRejected()) {\n                return 'rejected';\n            }\n            return 'pending';\n        },\n\n        // Maps jqXHR callbacks to the equivalent\n        // methods of the given Promise object:\n        _enhancePromise: function (promise) {\n            promise.success = promise.done;\n            promise.error = promise.fail;\n            promise.complete = promise.always;\n            return promise;\n        },\n\n        // Creates and returns a Promise object enhanced with\n        // the jqXHR methods abort, success, error and complete:\n        _getXHRPromise: function (resolveOrReject, context, args) {\n            var dfd = $.Deferred(),\n                promise = dfd.promise();\n            context = context || this.options.context || promise;\n            if (resolveOrReject === true) {\n                dfd.resolveWith(context, args);\n            } else if (resolveOrReject === false) {\n                dfd.rejectWith(context, args);\n            }\n            promise.abort = dfd.promise;\n            return this._enhancePromise(promise);\n        },\n\n        // Adds convenience methods to the data callback argument:\n        _addConvenienceMethods: function (e, data) {\n            var that = this,\n                getPromise = function (args) {\n                    return $.Deferred().resolveWith(that, args).promise();\n                };\n            data.process = function (resolveFunc, rejectFunc) {\n                if (resolveFunc || rejectFunc) {\n                    data._processQueue = this._processQueue =\n                        (this._processQueue || getPromise([this])).then(\n                            function () {\n                                if (data.errorThrown) {\n                                    return $.Deferred()\n                                        .rejectWith(that, [data]).promise();\n                                }\n                                return getPromise(arguments);\n                            }\n                        ).then(resolveFunc, rejectFunc);\n                }\n                return this._processQueue || getPromise([this]);\n            };\n            data.submit = function () {\n                if (this.state() !== 'pending') {\n                    data.jqXHR = this.jqXHR =\n                        (that._trigger(\n                            'submit',\n                            $.Event('submit', {delegatedEvent: e}),\n                            this\n                        ) !== false) && that._onSend(e, this);\n                }\n                return this.jqXHR || that._getXHRPromise();\n            };\n            data.abort = function () {\n                if (this.jqXHR) {\n                    return this.jqXHR.abort();\n                }\n                this.errorThrown = 'abort';\n                that._trigger('fail', null, this);\n                return that._getXHRPromise(false);\n            };\n            data.state = function () {\n                if (this.jqXHR) {\n                    return that._getDeferredState(this.jqXHR);\n                }\n                if (this._processQueue) {\n                    return that._getDeferredState(this._processQueue);\n                }\n            };\n            data.processing = function () {\n                return !this.jqXHR && this._processQueue && that\n                    ._getDeferredState(this._processQueue) === 'pending';\n            };\n            data.progress = function () {\n                return this._progress;\n            };\n            data.response = function () {\n                return this._response;\n            };\n        },\n\n        // Parses the Range header from the server response\n        // and returns the uploaded bytes:\n        _getUploadedBytes: function (jqXHR) {\n            var range = jqXHR.getResponseHeader('Range'),\n                parts = range && range.split('-'),\n                upperBytesPos = parts && parts.length > 1 &&\n                    parseInt(parts[1], 10);\n            return upperBytesPos && upperBytesPos + 1;\n        },\n\n        // Uploads a file in multiple, sequential requests\n        // by splitting the file up in multiple blob chunks.\n        // If the second parameter is true, only tests if the file\n        // should be uploaded in chunks, but does not invoke any\n        // upload requests:\n        _chunkedUpload: function (options, testOnly) {\n            options.uploadedBytes = options.uploadedBytes || 0;\n            var that = this,\n                file = options.files[0],\n                fs = file.size,\n                ub = options.uploadedBytes,\n                mcs = options.maxChunkSize || fs,\n                slice = this._blobSlice,\n                dfd = $.Deferred(),\n                promise = dfd.promise(),\n                jqXHR,\n                upload;\n            if (!(this._isXHRUpload(options) && slice && (ub || ($.type(mcs) === 'function' ? mcs(options) : mcs) < fs)) ||\n                    options.data) {\n                return false;\n            }\n            if (testOnly) {\n                return true;\n            }\n            if (ub >= fs) {\n                file.error = options.i18n('uploadedBytes');\n                return this._getXHRPromise(\n                    false,\n                    options.context,\n                    [null, 'error', file.error]\n                );\n            }\n            // The chunk upload method:\n            upload = function () {\n                // Clone the options object for each chunk upload:\n                var o = $.extend({}, options),\n                    currentLoaded = o._progress.loaded;\n                o.blob = slice.call(\n                    file,\n                    ub,\n                    ub + ($.type(mcs) === 'function' ? mcs(o) : mcs),\n                    file.type\n                );\n                // Store the current chunk size, as the blob itself\n                // will be dereferenced after data processing:\n                o.chunkSize = o.blob.size;\n                // Expose the chunk bytes position range:\n                o.contentRange = 'bytes ' + ub + '-' +\n                    (ub + o.chunkSize - 1) + '/' + fs;\n                // Process the upload data (the blob and potential form data):\n                that._initXHRData(o);\n                // Add progress listeners for this chunk upload:\n                that._initProgressListener(o);\n                jqXHR = ((that._trigger('chunksend', null, o) !== false && $.ajax(o)) ||\n                        that._getXHRPromise(false, o.context))\n                    .done(function (result, textStatus, jqXHR) {\n                        ub = that._getUploadedBytes(jqXHR) ||\n                            (ub + o.chunkSize);\n                        // Create a progress event if no final progress event\n                        // with loaded equaling total has been triggered\n                        // for this chunk:\n                        if (currentLoaded + o.chunkSize - o._progress.loaded) {\n                            that._onProgress($.Event('progress', {\n                                lengthComputable: true,\n                                loaded: ub - o.uploadedBytes,\n                                total: ub - o.uploadedBytes\n                            }), o);\n                        }\n                        options.uploadedBytes = o.uploadedBytes = ub;\n                        o.result = result;\n                        o.textStatus = textStatus;\n                        o.jqXHR = jqXHR;\n                        that._trigger('chunkdone', null, o);\n                        that._trigger('chunkalways', null, o);\n                        if (ub < fs) {\n                            // File upload not yet complete,\n                            // continue with the next chunk:\n                            upload();\n                        } else {\n                            dfd.resolveWith(\n                                o.context,\n                                [result, textStatus, jqXHR]\n                            );\n                        }\n                    })\n                    .fail(function (jqXHR, textStatus, errorThrown) {\n                        o.jqXHR = jqXHR;\n                        o.textStatus = textStatus;\n                        o.errorThrown = errorThrown;\n                        that._trigger('chunkfail', null, o);\n                        that._trigger('chunkalways', null, o);\n                        dfd.rejectWith(\n                            o.context,\n                            [jqXHR, textStatus, errorThrown]\n                        );\n                    });\n            };\n            this._enhancePromise(promise);\n            promise.abort = function () {\n                return jqXHR.abort();\n            };\n            upload();\n            return promise;\n        },\n\n        _beforeSend: function (e, data) {\n            if (this._active === 0) {\n                // the start callback is triggered when an upload starts\n                // and no other uploads are currently running,\n                // equivalent to the global ajaxStart event:\n                this._trigger('start');\n                // Set timer for global bitrate progress calculation:\n                this._bitrateTimer = new this._BitrateTimer();\n                // Reset the global progress values:\n                this._progress.loaded = this._progress.total = 0;\n                this._progress.bitrate = 0;\n            }\n            // Make sure the container objects for the .response() and\n            // .progress() methods on the data object are available\n            // and reset to their initial state:\n            this._initResponseObject(data);\n            this._initProgressObject(data);\n            data._progress.loaded = data.loaded = data.uploadedBytes || 0;\n            data._progress.total = data.total = this._getTotal(data.files) || 1;\n            data._progress.bitrate = data.bitrate = 0;\n            this._active += 1;\n            // Initialize the global progress values:\n            this._progress.loaded += data.loaded;\n            this._progress.total += data.total;\n        },\n\n        _onDone: function (result, textStatus, jqXHR, options) {\n            var total = options._progress.total,\n                response = options._response;\n            if (options._progress.loaded < total) {\n                // Create a progress event if no final progress event\n                // with loaded equaling total has been triggered:\n                this._onProgress($.Event('progress', {\n                    lengthComputable: true,\n                    loaded: total,\n                    total: total\n                }), options);\n            }\n            response.result = options.result = result;\n            response.textStatus = options.textStatus = textStatus;\n            response.jqXHR = options.jqXHR = jqXHR;\n            this._trigger('done', null, options);\n        },\n\n        _onFail: function (jqXHR, textStatus, errorThrown, options) {\n            var response = options._response;\n            if (options.recalculateProgress) {\n                // Remove the failed (error or abort) file upload from\n                // the global progress calculation:\n                this._progress.loaded -= options._progress.loaded;\n                this._progress.total -= options._progress.total;\n            }\n            response.jqXHR = options.jqXHR = jqXHR;\n            response.textStatus = options.textStatus = textStatus;\n            response.errorThrown = options.errorThrown = errorThrown;\n            this._trigger('fail', null, options);\n        },\n\n        _onAlways: function (jqXHRorResult, textStatus, jqXHRorError, options) {\n            // jqXHRorResult, textStatus and jqXHRorError are added to the\n            // options object via done and fail callbacks\n            this._trigger('always', null, options);\n        },\n\n        _onSend: function (e, data) {\n            if (!data.submit) {\n                this._addConvenienceMethods(e, data);\n            }\n            var that = this,\n                jqXHR,\n                aborted,\n                slot,\n                pipe,\n                options = that._getAJAXSettings(data),\n                send = function () {\n                    that._sending += 1;\n                    // Set timer for bitrate progress calculation:\n                    options._bitrateTimer = new that._BitrateTimer();\n                    jqXHR = jqXHR || (\n                        ((aborted || that._trigger(\n                            'send',\n                            $.Event('send', {delegatedEvent: e}),\n                            options\n                        ) === false) &&\n                        that._getXHRPromise(false, options.context, aborted)) ||\n                        that._chunkedUpload(options) || $.ajax(options)\n                    ).done(function (result, textStatus, jqXHR) {\n                        that._onDone(result, textStatus, jqXHR, options);\n                    }).fail(function (jqXHR, textStatus, errorThrown) {\n                        that._onFail(jqXHR, textStatus, errorThrown, options);\n                    }).always(function (jqXHRorResult, textStatus, jqXHRorError) {\n                        that._onAlways(\n                            jqXHRorResult,\n                            textStatus,\n                            jqXHRorError,\n                            options\n                        );\n                        that._sending -= 1;\n                        that._active -= 1;\n                        if (options.limitConcurrentUploads &&\n                                options.limitConcurrentUploads > that._sending) {\n                            // Start the next queued upload,\n                            // that has not been aborted:\n                            var nextSlot = that._slots.shift();\n                            while (nextSlot) {\n                                if (that._getDeferredState(nextSlot) === 'pending') {\n                                    nextSlot.resolve();\n                                    break;\n                                }\n                                nextSlot = that._slots.shift();\n                            }\n                        }\n                        if (that._active === 0) {\n                            // The stop callback is triggered when all uploads have\n                            // been completed, equivalent to the global ajaxStop event:\n                            that._trigger('stop');\n                        }\n                    });\n                    return jqXHR;\n                };\n            this._beforeSend(e, options);\n            if (this.options.sequentialUploads ||\n                    (this.options.limitConcurrentUploads &&\n                    this.options.limitConcurrentUploads <= this._sending)) {\n                if (this.options.limitConcurrentUploads > 1) {\n                    slot = $.Deferred();\n                    this._slots.push(slot);\n                    pipe = slot.then(send);\n                } else {\n                    this._sequence = this._sequence.then(send, send);\n                    pipe = this._sequence;\n                }\n                // Return the piped Promise object, enhanced with an abort method,\n                // which is delegated to the jqXHR object of the current upload,\n                // and jqXHR callbacks mapped to the equivalent Promise methods:\n                pipe.abort = function () {\n                    aborted = [undefined, 'abort', 'abort'];\n                    if (!jqXHR) {\n                        if (slot) {\n                            slot.rejectWith(options.context, aborted);\n                        }\n                        return send();\n                    }\n                    return jqXHR.abort();\n                };\n                return this._enhancePromise(pipe);\n            }\n            return send();\n        },\n\n        _onAdd: function (e, data) {\n            var that = this,\n                result = true,\n                options = $.extend({}, this.options, data),\n                files = data.files,\n                filesLength = files.length,\n                limit = options.limitMultiFileUploads,\n                limitSize = options.limitMultiFileUploadSize,\n                overhead = options.limitMultiFileUploadSizeOverhead,\n                batchSize = 0,\n                paramName = this._getParamName(options),\n                paramNameSet,\n                paramNameSlice,\n                fileSet,\n                i,\n                j = 0;\n            if (!filesLength) {\n                return false;\n            }\n            if (limitSize && files[0].size === undefined) {\n                limitSize = undefined;\n            }\n            if (!(options.singleFileUploads || limit || limitSize) ||\n                    !this._isXHRUpload(options)) {\n                fileSet = [files];\n                paramNameSet = [paramName];\n            } else if (!(options.singleFileUploads || limitSize) && limit) {\n                fileSet = [];\n                paramNameSet = [];\n                for (i = 0; i < filesLength; i += limit) {\n                    fileSet.push(files.slice(i, i + limit));\n                    paramNameSlice = paramName.slice(i, i + limit);\n                    if (!paramNameSlice.length) {\n                        paramNameSlice = paramName;\n                    }\n                    paramNameSet.push(paramNameSlice);\n                }\n            } else if (!options.singleFileUploads && limitSize) {\n                fileSet = [];\n                paramNameSet = [];\n                for (i = 0; i < filesLength; i = i + 1) {\n                    batchSize += files[i].size + overhead;\n                    if (i + 1 === filesLength ||\n                            ((batchSize + files[i + 1].size + overhead) > limitSize) ||\n                            (limit && i + 1 - j >= limit)) {\n                        fileSet.push(files.slice(j, i + 1));\n                        paramNameSlice = paramName.slice(j, i + 1);\n                        if (!paramNameSlice.length) {\n                            paramNameSlice = paramName;\n                        }\n                        paramNameSet.push(paramNameSlice);\n                        j = i + 1;\n                        batchSize = 0;\n                    }\n                }\n            } else {\n                paramNameSet = paramName;\n            }\n            data.originalFiles = files;\n            $.each(fileSet || files, function (index, element) {\n                var newData = $.extend({}, data);\n                newData.files = fileSet ? element : [element];\n                newData.paramName = paramNameSet[index];\n                that._initResponseObject(newData);\n                that._initProgressObject(newData);\n                that._addConvenienceMethods(e, newData);\n                result = that._trigger(\n                    'add',\n                    $.Event('add', {delegatedEvent: e}),\n                    newData\n                );\n                return result;\n            });\n            return result;\n        },\n\n        _replaceFileInput: function (data) {\n            var input = data.fileInput,\n                inputClone = input.clone(true),\n                restoreFocus = input.is(document.activeElement);\n            // Add a reference for the new cloned file input to the data argument:\n            data.fileInputClone = inputClone;\n            $('<form></form>').append(inputClone)[0].reset();\n            // Detaching allows to insert the fileInput on another form\n            // without loosing the file input value:\n            input.after(inputClone).detach();\n            // If the fileInput had focus before it was detached,\n            // restore focus to the inputClone.\n            if (restoreFocus) {\n                inputClone.focus();\n            }\n            // Avoid memory leaks with the detached file input:\n            $.cleanData(input.unbind('remove'));\n            // Replace the original file input element in the fileInput\n            // elements set with the clone, which has been copied including\n            // event handlers:\n            this.options.fileInput = this.options.fileInput.map(function (i, el) {\n                if (el === input[0]) {\n                    return inputClone[0];\n                }\n                return el;\n            });\n            // If the widget has been initialized on the file input itself,\n            // override this.element with the file input clone:\n            if (input[0] === this.element[0]) {\n                this.element = inputClone;\n            }\n        },\n\n        _handleFileTreeEntry: function (entry, path) {\n            var that = this,\n                dfd = $.Deferred(),\n                entries = [],\n                dirReader,\n                errorHandler = function (e) {\n                    if (e && !e.entry) {\n                        e.entry = entry;\n                    }\n                    // Since $.when returns immediately if one\n                    // Deferred is rejected, we use resolve instead.\n                    // This allows valid files and invalid items\n                    // to be returned together in one set:\n                    dfd.resolve([e]);\n                },\n                successHandler = function (entries) {\n                    that._handleFileTreeEntries(\n                        entries,\n                        path + entry.name + '/'\n                    ).done(function (files) {\n                        dfd.resolve(files);\n                    }).fail(errorHandler);\n                },\n                readEntries = function () {\n                    dirReader.readEntries(function (results) {\n                        if (!results.length) {\n                            successHandler(entries);\n                        } else {\n                            entries = entries.concat(results);\n                            readEntries();\n                        }\n                    }, errorHandler);\n                };\n            path = path || '';\n            if (entry.isFile) {\n                if (entry._file) {\n                    // Workaround for Chrome bug #149735\n                    entry._file.relativePath = path;\n                    dfd.resolve(entry._file);\n                } else {\n                    entry.file(function (file) {\n                        file.relativePath = path;\n                        dfd.resolve(file);\n                    }, errorHandler);\n                }\n            } else if (entry.isDirectory) {\n                dirReader = entry.createReader();\n                readEntries();\n            } else {\n                // Return an empy list for file system items\n                // other than files or directories:\n                dfd.resolve([]);\n            }\n            return dfd.promise();\n        },\n\n        _handleFileTreeEntries: function (entries, path) {\n            var that = this;\n            return $.when.apply(\n                $,\n                $.map(entries, function (entry) {\n                    return that._handleFileTreeEntry(entry, path);\n                })\n            ).then(function () {\n                return Array.prototype.concat.apply(\n                    [],\n                    arguments\n                );\n            });\n        },\n\n        _getDroppedFiles: function (dataTransfer) {\n            dataTransfer = dataTransfer || {};\n            var items = dataTransfer.items;\n            if (items && items.length && (items[0].webkitGetAsEntry ||\n                    items[0].getAsEntry)) {\n                return this._handleFileTreeEntries(\n                    $.map(items, function (item) {\n                        var entry;\n                        if (item.webkitGetAsEntry) {\n                            entry = item.webkitGetAsEntry();\n                            if (entry) {\n                                // Workaround for Chrome bug #149735:\n                                entry._file = item.getAsFile();\n                            }\n                            return entry;\n                        }\n                        return item.getAsEntry();\n                    })\n                );\n            }\n            return $.Deferred().resolve(\n                $.makeArray(dataTransfer.files)\n            ).promise();\n        },\n\n        _getSingleFileInputFiles: function (fileInput) {\n            fileInput = $(fileInput);\n            var entries = fileInput.prop('webkitEntries') ||\n                    fileInput.prop('entries'),\n                files,\n                value;\n            if (entries && entries.length) {\n                return this._handleFileTreeEntries(entries);\n            }\n            files = $.makeArray(fileInput.prop('files'));\n            if (!files.length) {\n                value = fileInput.prop('value');\n                if (!value) {\n                    return $.Deferred().resolve([]).promise();\n                }\n                // If the files property is not available, the browser does not\n                // support the File API and we add a pseudo File object with\n                // the input value as name with path information removed:\n                files = [{name: value.replace(/^.*\\\\/, '')}];\n            } else if (files[0].name === undefined && files[0].fileName) {\n                // File normalization for Safari 4 and Firefox 3:\n                $.each(files, function (index, file) {\n                    file.name = file.fileName;\n                    file.size = file.fileSize;\n                });\n            }\n            return $.Deferred().resolve(files).promise();\n        },\n\n        _getFileInputFiles: function (fileInput) {\n            if (!(fileInput instanceof $) || fileInput.length === 1) {\n                return this._getSingleFileInputFiles(fileInput);\n            }\n            return $.when.apply(\n                $,\n                $.map(fileInput, this._getSingleFileInputFiles)\n            ).then(function () {\n                return Array.prototype.concat.apply(\n                    [],\n                    arguments\n                );\n            });\n        },\n\n        _onChange: function (e) {\n            var that = this,\n                data = {\n                    fileInput: $(e.target),\n                    form: $(e.target.form)\n                };\n            this._getFileInputFiles(data.fileInput).always(function (files) {\n                data.files = files;\n                if (that.options.replaceFileInput) {\n                    that._replaceFileInput(data);\n                }\n                if (that._trigger(\n                        'change',\n                        $.Event('change', {delegatedEvent: e}),\n                        data\n                    ) !== false) {\n                    that._onAdd(e, data);\n                }\n            });\n        },\n\n        _onPaste: function (e) {\n            var items = e.originalEvent && e.originalEvent.clipboardData &&\n                    e.originalEvent.clipboardData.items,\n                data = {files: []};\n            if (items && items.length) {\n                $.each(items, function (index, item) {\n                    var file = item.getAsFile && item.getAsFile();\n                    if (file) {\n                        data.files.push(file);\n                    }\n                });\n                if (this._trigger(\n                        'paste',\n                        $.Event('paste', {delegatedEvent: e}),\n                        data\n                    ) !== false) {\n                    this._onAdd(e, data);\n                }\n            }\n        },\n\n        _onDrop: function (e) {\n            e.dataTransfer = e.originalEvent && e.originalEvent.dataTransfer;\n            var that = this,\n                dataTransfer = e.dataTransfer,\n                data = {};\n            if (dataTransfer && dataTransfer.files && dataTransfer.files.length) {\n                e.preventDefault();\n                this._getDroppedFiles(dataTransfer).always(function (files) {\n                    data.files = files;\n                    if (that._trigger(\n                            'drop',\n                            $.Event('drop', {delegatedEvent: e}),\n                            data\n                        ) !== false) {\n                        that._onAdd(e, data);\n                    }\n                });\n            }\n        },\n\n        _onDragOver: getDragHandler('dragover'),\n\n        _onDragEnter: getDragHandler('dragenter'),\n\n        _onDragLeave: getDragHandler('dragleave'),\n\n        _initEventHandlers: function () {\n            if (this._isXHRUpload(this.options)) {\n                this._on(this.options.dropZone, {\n                    dragover: this._onDragOver,\n                    drop: this._onDrop,\n                    // event.preventDefault() on dragenter is required for IE10+:\n                    dragenter: this._onDragEnter,\n                    // dragleave is not required, but added for completeness:\n                    dragleave: this._onDragLeave\n                });\n                this._on(this.options.pasteZone, {\n                    paste: this._onPaste\n                });\n            }\n            if ($.support.fileInput) {\n                this._on(this.options.fileInput, {\n                    change: this._onChange\n                });\n            }\n        },\n\n        _destroyEventHandlers: function () {\n            this._off(this.options.dropZone, 'dragenter dragleave dragover drop');\n            this._off(this.options.pasteZone, 'paste');\n            this._off(this.options.fileInput, 'change');\n        },\n\n        _destroy: function () {\n            this._destroyEventHandlers();\n        },\n\n        _setOption: function (key, value) {\n            var reinit = $.inArray(key, this._specialOptions) !== -1;\n            if (reinit) {\n                this._destroyEventHandlers();\n            }\n            this._super(key, value);\n            if (reinit) {\n                this._initSpecialOptions();\n                this._initEventHandlers();\n            }\n        },\n\n        _initSpecialOptions: function () {\n            var options = this.options;\n            if (options.fileInput === undefined) {\n                options.fileInput = this.element.is('input[type=\"file\"]') ?\n                        this.element : this.element.find('input[type=\"file\"]');\n            } else if (!(options.fileInput instanceof $)) {\n                options.fileInput = $(options.fileInput);\n            }\n            if (!(options.dropZone instanceof $)) {\n                options.dropZone = $(options.dropZone);\n            }\n            if (!(options.pasteZone instanceof $)) {\n                options.pasteZone = $(options.pasteZone);\n            }\n        },\n\n        _getRegExp: function (str) {\n            var parts = str.split('/'),\n                modifiers = parts.pop();\n            parts.shift();\n            return new RegExp(parts.join('/'), modifiers);\n        },\n\n        _isRegExpOption: function (key, value) {\n            return key !== 'url' && $.type(value) === 'string' &&\n                /^\\/.*\\/[igm]{0,3}$/.test(value);\n        },\n\n        _initDataAttributes: function () {\n            var that = this,\n                options = this.options,\n                data = this.element.data();\n            // Initialize options set via HTML5 data-attributes:\n            $.each(\n                this.element[0].attributes,\n                function (index, attr) {\n                    var key = attr.name.toLowerCase(),\n                        value;\n                    if (/^data-/.test(key)) {\n                        // Convert hyphen-ated key to camelCase:\n                        key = key.slice(5).replace(/-[a-z]/g, function (str) {\n                            return str.charAt(1).toUpperCase();\n                        });\n                        value = data[key];\n                        if (that._isRegExpOption(key, value)) {\n                            value = that._getRegExp(value);\n                        }\n                        options[key] = value;\n                    }\n                }\n            );\n        },\n\n        _create: function () {\n            this._initDataAttributes();\n            this._initSpecialOptions();\n            this._slots = [];\n            this._sequence = this._getXHRPromise(true);\n            this._sending = this._active = 0;\n            this._initProgressObject(this);\n            this._initEventHandlers();\n        },\n\n        // This method is exposed to the widget API and allows to query\n        // the number of active uploads:\n        active: function () {\n            return this._active;\n        },\n\n        // This method is exposed to the widget API and allows to query\n        // the widget upload progress.\n        // It returns an object with loaded, total and bitrate properties\n        // for the running uploads:\n        progress: function () {\n            return this._progress;\n        },\n\n        // This method is exposed to the widget API and allows adding files\n        // using the fileupload API. The data parameter accepts an object which\n        // must have a files property and can contain additional options:\n        // .fileupload('add', {files: filesList});\n        add: function (data) {\n            var that = this;\n            if (!data || this.options.disabled) {\n                return;\n            }\n            if (data.fileInput && !data.files) {\n                this._getFileInputFiles(data.fileInput).always(function (files) {\n                    data.files = files;\n                    that._onAdd(null, data);\n                });\n            } else {\n                data.files = $.makeArray(data.files);\n                this._onAdd(null, data);\n            }\n        },\n\n        // This method is exposed to the widget API and allows sending files\n        // using the fileupload API. The data parameter accepts an object which\n        // must have a files or fileInput property and can contain additional options:\n        // .fileupload('send', {files: filesList});\n        // The method returns a Promise object for the file upload call.\n        send: function (data) {\n            if (data && !this.options.disabled) {\n                if (data.fileInput && !data.files) {\n                    var that = this,\n                        dfd = $.Deferred(),\n                        promise = dfd.promise(),\n                        jqXHR,\n                        aborted;\n                    promise.abort = function () {\n                        aborted = true;\n                        if (jqXHR) {\n                            return jqXHR.abort();\n                        }\n                        dfd.reject(null, 'abort', 'abort');\n                        return promise;\n                    };\n                    this._getFileInputFiles(data.fileInput).always(\n                        function (files) {\n                            if (aborted) {\n                                return;\n                            }\n                            if (!files.length) {\n                                dfd.reject();\n                                return;\n                            }\n                            data.files = files;\n                            jqXHR = that._onSend(null, data);\n                            jqXHR.then(\n                                function (result, textStatus, jqXHR) {\n                                    dfd.resolve(result, textStatus, jqXHR);\n                                },\n                                function (jqXHR, textStatus, errorThrown) {\n                                    dfd.reject(jqXHR, textStatus, errorThrown);\n                                }\n                            );\n                        }\n                    );\n                    return this._enhancePromise(promise);\n                }\n                data.files = $.makeArray(data.files);\n                if (data.files.length) {\n                    return this._onSend(null, data);\n                }\n            }\n            return this._getXHRPromise(false, data && data.context);\n        }\n\n    });\n\n}));\n\n\n/***/ }),\n/* 12 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_RESULT__;/*\n * JavaScript Templates\n * https://github.com/blueimp/JavaScript-Templates\n *\n * Copyright 2011, Sebastian Tschan\n * https://blueimp.net\n *\n * Licensed under the MIT license:\n * http://www.opensource.org/licenses/MIT\n *\n * Inspired by John Resig's JavaScript Micro-Templating:\n * http://ejohn.org/blog/javascript-micro-templating/\n */\n\n/* global define */\n\n;(function ($) {\n  'use strict'\n  var tmpl = function (str, data) {\n    var f = !/[^\\w\\-\\.:]/.test(str)\n      ? tmpl.cache[str] = tmpl.cache[str] || tmpl(tmpl.load(str))\n      : new Function(// eslint-disable-line no-new-func\n        tmpl.arg + ',tmpl',\n        'var _e=tmpl.encode' + tmpl.helper + \",_s='\" +\n          str.replace(tmpl.regexp, tmpl.func) + \"';return _s;\"\n      )\n    return data ? f(data, tmpl) : function (data) {\n      return f(data, tmpl)\n    }\n  }\n  tmpl.cache = {}\n  tmpl.load = function (id) {\n    return document.getElementById(id).innerHTML\n  }\n  tmpl.regexp = /([\\s'\\\\])(?!(?:[^{]|\\{(?!%))*%\\})|(?:\\{%(=|#)([\\s\\S]+?)%\\})|(\\{%)|(%\\})/g\n  tmpl.func = function (s, p1, p2, p3, p4, p5) {\n    if (p1) { // whitespace, quote and backspace in HTML context\n      return {\n        '\\n': '\\\\n',\n        '\\r': '\\\\r',\n        '\\t': '\\\\t',\n        ' ': ' '\n      }[p1] || '\\\\' + p1\n    }\n    if (p2) { // interpolation: {%=prop%}, or unescaped: {%#prop%}\n      if (p2 === '=') {\n        return \"'+_e(\" + p3 + \")+'\"\n      }\n      return \"'+(\" + p3 + \"==null?'':\" + p3 + \")+'\"\n    }\n    if (p4) { // evaluation start tag: {%\n      return \"';\"\n    }\n    if (p5) { // evaluation end tag: %}\n      return \"_s+='\"\n    }\n  }\n  tmpl.encReg = /[<>&\"'\\x00]/g // eslint-disable-line no-control-regex\n  tmpl.encMap = {\n    '<': '&lt;',\n    '>': '&gt;',\n    '&': '&amp;',\n    '\"': '&quot;',\n    \"'\": '&#39;'\n  }\n  tmpl.encode = function (s) {\n    return (s == null ? '' : '' + s).replace(\n      tmpl.encReg,\n      function (c) {\n        return tmpl.encMap[c] || ''\n      }\n    )\n  }\n  tmpl.arg = 'o'\n  tmpl.helper = \",print=function(s,e){_s+=e?(s==null?'':s):_e(s);}\" +\n                  ',include=function(s,d){_s+=tmpl(s,d);}'\n  if (true) {\n    !(__WEBPACK_AMD_DEFINE_RESULT__ = function () {\n      return tmpl\n    }.call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__))\n  } else if (typeof module === 'object' && module.exports) {\n    module.exports = tmpl\n  } else {\n    $.tmpl = tmpl\n  }\n}(this))\n\n\n/***/ }),\n/* 13 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*\n * jQuery File Upload User Interface Plugin\n * https://github.com/blueimp/jQuery-File-Upload\n *\n * Copyright 2010, Sebastian Tschan\n * https://blueimp.net\n *\n * Licensed under the MIT license:\n * https://opensource.org/licenses/MIT\n */\n\n/* jshint nomen:false */\n/* global define, require, window */\n\n;(function (factory) {\n    'use strict';\n    if (true) {\n        // Register as an anonymous AMD module:\n        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [\n            __webpack_require__(1),\n            __webpack_require__(12),\n            __webpack_require__(8),\n            __webpack_require__(7),\n            __webpack_require__(10),\n            __webpack_require__(9)\n        ], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    } else if (typeof exports === 'object') {\n        // Node/CommonJS:\n        factory(\n            require('jquery'),\n            require('blueimp-tmpl'),\n            require('./jquery.fileupload-image'),\n            require('./jquery.fileupload-audio'),\n            require('./jquery.fileupload-video'),\n            require('./jquery.fileupload-validate')\n        );\n    } else {\n        // Browser globals:\n        factory(\n            window.jQuery,\n            window.tmpl\n        );\n    }\n}(function ($, tmpl) {\n    'use strict';\n\n    $.blueimp.fileupload.prototype._specialOptions.push(\n        'filesContainer',\n        'uploadTemplateId',\n        'downloadTemplateId'\n    );\n\n    // The UI version extends the file upload widget\n    // and adds complete user interface interaction:\n    $.widget('blueimp.fileupload', $.blueimp.fileupload, {\n\n        options: {\n            // By default, files added to the widget are uploaded as soon\n            // as the user clicks on the start buttons. To enable automatic\n            // uploads, set the following option to true:\n            autoUpload: false,\n            // The ID of the upload template:\n            uploadTemplateId: 'template-upload',\n            // The ID of the download template:\n            downloadTemplateId: 'template-download',\n            // The container for the list of files. If undefined, it is set to\n            // an element with class \"files\" inside of the widget element:\n            filesContainer: undefined,\n            // By default, files are appended to the files container.\n            // Set the following option to true, to prepend files instead:\n            prependFiles: false,\n            // The expected data type of the upload response, sets the dataType\n            // option of the $.ajax upload requests:\n            dataType: 'json',\n\n            // Error and info messages:\n            messages: {\n                unknownError: 'Unknown error'\n            },\n\n            // Function returning the current number of files,\n            // used by the maxNumberOfFiles validation:\n            getNumberOfFiles: function () {\n                return this.filesContainer.children()\n                    .not('.processing').length;\n            },\n\n            // Callback to retrieve the list of files from the server response:\n            getFilesFromResponse: function (data) {\n                if (data.result && $.isArray(data.result.files)) {\n                    return data.result.files;\n                }\n                return [];\n            },\n\n            // The add callback is invoked as soon as files are added to the fileupload\n            // widget (via file input selection, drag & drop or add API call).\n            // See the basic file upload widget for more information:\n            add: function (e, data) {\n                if (e.isDefaultPrevented()) {\n                    return false;\n                }\n                var $this = $(this),\n                    that = $this.data('blueimp-fileupload') ||\n                        $this.data('fileupload'),\n                    options = that.options;\n                data.context = that._renderUpload(data.files)\n                    .data('data', data)\n                    .addClass('processing');\n                options.filesContainer[\n                    options.prependFiles ? 'prepend' : 'append'\n                ](data.context);\n                that._forceReflow(data.context);\n                that._transition(data.context);\n                data.process(function () {\n                    return $this.fileupload('process', data);\n                }).always(function () {\n                    data.context.each(function (index) {\n                        $(this).find('.size').text(\n                            that._formatFileSize(data.files[index].size)\n                        );\n                    }).removeClass('processing');\n                    that._renderPreviews(data);\n                }).done(function () {\n                    data.context.find('.start').prop('disabled', false);\n                    if ((that._trigger('added', e, data) !== false) &&\n                            (options.autoUpload || data.autoUpload) &&\n                            data.autoUpload !== false) {\n                        data.submit();\n                    }\n                }).fail(function () {\n                    if (data.files.error) {\n                        data.context.each(function (index) {\n                            var error = data.files[index].error;\n                            if (error) {\n                                $(this).find('.error').text(error);\n                            }\n                        });\n                    }\n                });\n            },\n            // Callback for the start of each file upload request:\n            send: function (e, data) {\n                if (e.isDefaultPrevented()) {\n                    return false;\n                }\n                var that = $(this).data('blueimp-fileupload') ||\n                        $(this).data('fileupload');\n                if (data.context && data.dataType &&\n                        data.dataType.substr(0, 6) === 'iframe') {\n                    // Iframe Transport does not support progress events.\n                    // In lack of an indeterminate progress bar, we set\n                    // the progress to 100%, showing the full animated bar:\n                    data.context\n                        .find('.progress').addClass(\n                            !$.support.transition && 'progress-animated'\n                        )\n                        .attr('aria-valuenow', 100)\n                        .children().first().css(\n                            'width',\n                            '100%'\n                        );\n                }\n                return that._trigger('sent', e, data);\n            },\n            // Callback for successful uploads:\n            done: function (e, data) {\n                if (e.isDefaultPrevented()) {\n                    return false;\n                }\n                var that = $(this).data('blueimp-fileupload') ||\n                        $(this).data('fileupload'),\n                    getFilesFromResponse = data.getFilesFromResponse ||\n                        that.options.getFilesFromResponse,\n                    files = getFilesFromResponse(data),\n                    template,\n                    deferred;\n                if (data.context) {\n                    data.context.each(function (index) {\n                        var file = files[index] ||\n                                {error: 'Empty file upload result'};\n                        deferred = that._addFinishedDeferreds();\n                        that._transition($(this)).done(\n                            function () {\n                                var node = $(this);\n                                template = that._renderDownload([file])\n                                    .replaceAll(node);\n                                that._forceReflow(template);\n                                that._transition(template).done(\n                                    function () {\n                                        data.context = $(this);\n                                        that._trigger('completed', e, data);\n                                        that._trigger('finished', e, data);\n                                        deferred.resolve();\n                                    }\n                                );\n                            }\n                        );\n                    });\n                } else {\n                    template = that._renderDownload(files)[\n                        that.options.prependFiles ? 'prependTo' : 'appendTo'\n                    ](that.options.filesContainer);\n                    that._forceReflow(template);\n                    deferred = that._addFinishedDeferreds();\n                    that._transition(template).done(\n                        function () {\n                            data.context = $(this);\n                            that._trigger('completed', e, data);\n                            that._trigger('finished', e, data);\n                            deferred.resolve();\n                        }\n                    );\n                }\n            },\n            // Callback for failed (abort or error) uploads:\n            fail: function (e, data) {\n                if (e.isDefaultPrevented()) {\n                    return false;\n                }\n                var that = $(this).data('blueimp-fileupload') ||\n                        $(this).data('fileupload'),\n                    template,\n                    deferred;\n                if (data.context) {\n                    data.context.each(function (index) {\n                        if (data.errorThrown !== 'abort') {\n                            var file = data.files[index];\n                            file.error = file.error || data.errorThrown ||\n                                data.i18n('unknownError');\n                            deferred = that._addFinishedDeferreds();\n                            that._transition($(this)).done(\n                                function () {\n                                    var node = $(this);\n                                    template = that._renderDownload([file])\n                                        .replaceAll(node);\n                                    that._forceReflow(template);\n                                    that._transition(template).done(\n                                        function () {\n                                            data.context = $(this);\n                                            that._trigger('failed', e, data);\n                                            that._trigger('finished', e, data);\n                                            deferred.resolve();\n                                        }\n                                    );\n                                }\n                            );\n                        } else {\n                            deferred = that._addFinishedDeferreds();\n                            that._transition($(this)).done(\n                                function () {\n                                    $(this).remove();\n                                    that._trigger('failed', e, data);\n                                    that._trigger('finished', e, data);\n                                    deferred.resolve();\n                                }\n                            );\n                        }\n                    });\n                } else if (data.errorThrown !== 'abort') {\n                    data.context = that._renderUpload(data.files)[\n                        that.options.prependFiles ? 'prependTo' : 'appendTo'\n                    ](that.options.filesContainer)\n                        .data('data', data);\n                    that._forceReflow(data.context);\n                    deferred = that._addFinishedDeferreds();\n                    that._transition(data.context).done(\n                        function () {\n                            data.context = $(this);\n                            that._trigger('failed', e, data);\n                            that._trigger('finished', e, data);\n                            deferred.resolve();\n                        }\n                    );\n                } else {\n                    that._trigger('failed', e, data);\n                    that._trigger('finished', e, data);\n                    that._addFinishedDeferreds().resolve();\n                }\n            },\n            // Callback for upload progress events:\n            progress: function (e, data) {\n                if (e.isDefaultPrevented()) {\n                    return false;\n                }\n                var progress = Math.floor(data.loaded / data.total * 100);\n                if (data.context) {\n                    data.context.each(function () {\n                        $(this).find('.progress')\n                            .attr('aria-valuenow', progress)\n                            .children().first().css(\n                                'width',\n                                progress + '%'\n                            );\n                    });\n                }\n            },\n            // Callback for global upload progress events:\n            progressall: function (e, data) {\n                if (e.isDefaultPrevented()) {\n                    return false;\n                }\n                var $this = $(this),\n                    progress = Math.floor(data.loaded / data.total * 100),\n                    globalProgressNode = $this.find('.fileupload-progress'),\n                    extendedProgressNode = globalProgressNode\n                        .find('.progress-extended');\n                if (extendedProgressNode.length) {\n                    extendedProgressNode.html(\n                        ($this.data('blueimp-fileupload') || $this.data('fileupload'))\n                            ._renderExtendedProgress(data)\n                    );\n                }\n                globalProgressNode\n                    .find('.progress')\n                    .attr('aria-valuenow', progress)\n                    .children().first().css(\n                        'width',\n                        progress + '%'\n                    );\n            },\n            // Callback for uploads start, equivalent to the global ajaxStart event:\n            start: function (e) {\n                if (e.isDefaultPrevented()) {\n                    return false;\n                }\n                var that = $(this).data('blueimp-fileupload') ||\n                        $(this).data('fileupload');\n                that._resetFinishedDeferreds();\n                that._transition($(this).find('.fileupload-progress')).done(\n                    function () {\n                        that._trigger('started', e);\n                    }\n                );\n            },\n            // Callback for uploads stop, equivalent to the global ajaxStop event:\n            stop: function (e) {\n                if (e.isDefaultPrevented()) {\n                    return false;\n                }\n                var that = $(this).data('blueimp-fileupload') ||\n                        $(this).data('fileupload'),\n                    deferred = that._addFinishedDeferreds();\n                $.when.apply($, that._getFinishedDeferreds())\n                    .done(function () {\n                        that._trigger('stopped', e);\n                    });\n                that._transition($(this).find('.fileupload-progress')).done(\n                    function () {\n                        $(this).find('.progress')\n                            .attr('aria-valuenow', '0')\n                            .children().first().css('width', '0%');\n                        $(this).find('.progress-extended').html('&nbsp;');\n                        deferred.resolve();\n                    }\n                );\n            },\n            processstart: function (e) {\n                if (e.isDefaultPrevented()) {\n                    return false;\n                }\n                $(this).addClass('fileupload-processing');\n            },\n            processstop: function (e) {\n                if (e.isDefaultPrevented()) {\n                    return false;\n                }\n                $(this).removeClass('fileupload-processing');\n            },\n            // Callback for file deletion:\n            destroy: function (e, data) {\n                if (e.isDefaultPrevented()) {\n                    return false;\n                }\n                var that = $(this).data('blueimp-fileupload') ||\n                        $(this).data('fileupload'),\n                    removeNode = function () {\n                        that._transition(data.context).done(\n                            function () {\n                                $(this).remove();\n                                that._trigger('destroyed', e, data);\n                            }\n                        );\n                    };\n                if (data.url) {\n                    data.dataType = data.dataType || that.options.dataType;\n                    $.ajax(data).done(removeNode).fail(function () {\n                        that._trigger('destroyfailed', e, data);\n                    });\n                } else {\n                    removeNode();\n                }\n            }\n        },\n\n        _resetFinishedDeferreds: function () {\n            this._finishedUploads = [];\n        },\n\n        _addFinishedDeferreds: function (deferred) {\n            if (!deferred) {\n                deferred = $.Deferred();\n            }\n            this._finishedUploads.push(deferred);\n            return deferred;\n        },\n\n        _getFinishedDeferreds: function () {\n            return this._finishedUploads;\n        },\n\n        // Link handler, that allows to download files\n        // by drag & drop of the links to the desktop:\n        _enableDragToDesktop: function () {\n            var link = $(this),\n                url = link.prop('href'),\n                name = link.prop('download'),\n                type = 'application/octet-stream';\n            link.bind('dragstart', function (e) {\n                try {\n                    e.originalEvent.dataTransfer.setData(\n                        'DownloadURL',\n                        [type, name, url].join(':')\n                    );\n                } catch (ignore) {}\n            });\n        },\n\n        _formatFileSize: function (bytes) {\n            if (typeof bytes !== 'number') {\n                return '';\n            }\n            if (bytes >= 1000000000) {\n                return (bytes / 1000000000).toFixed(2) + ' GB';\n            }\n            if (bytes >= 1000000) {\n                return (bytes / 1000000).toFixed(2) + ' MB';\n            }\n            return (bytes / 1000).toFixed(2) + ' KB';\n        },\n\n        _formatBitrate: function (bits) {\n            if (typeof bits !== 'number') {\n                return '';\n            }\n            if (bits >= 1000000000) {\n                return (bits / 1000000000).toFixed(2) + ' Gbit/s';\n            }\n            if (bits >= 1000000) {\n                return (bits / 1000000).toFixed(2) + ' Mbit/s';\n            }\n            if (bits >= 1000) {\n                return (bits / 1000).toFixed(2) + ' kbit/s';\n            }\n            return bits.toFixed(2) + ' bit/s';\n        },\n\n        _formatTime: function (seconds) {\n            var date = new Date(seconds * 1000),\n                days = Math.floor(seconds / 86400);\n            days = days ? days + 'd ' : '';\n            return days +\n                ('0' + date.getUTCHours()).slice(-2) + ':' +\n                ('0' + date.getUTCMinutes()).slice(-2) + ':' +\n                ('0' + date.getUTCSeconds()).slice(-2);\n        },\n\n        _formatPercentage: function (floatValue) {\n            return (floatValue * 100).toFixed(2) + ' %';\n        },\n\n        _renderExtendedProgress: function (data) {\n            return this._formatBitrate(data.bitrate) + ' | ' +\n                this._formatTime(\n                    (data.total - data.loaded) * 8 / data.bitrate\n                ) + ' | ' +\n                this._formatPercentage(\n                    data.loaded / data.total\n                ) + ' | ' +\n                this._formatFileSize(data.loaded) + ' / ' +\n                this._formatFileSize(data.total);\n        },\n\n        _renderTemplate: function (func, files) {\n            if (!func) {\n                return $();\n            }\n            var result = func({\n                files: files,\n                formatFileSize: this._formatFileSize,\n                options: this.options\n            });\n            if (result instanceof $) {\n                return result;\n            }\n            return $(this.options.templatesContainer).html(result).children();\n        },\n\n        _renderPreviews: function (data) {\n            data.context.find('.preview').each(function (index, elm) {\n                $(elm).append(data.files[index].preview);\n            });\n        },\n\n        _renderUpload: function (files) {\n            return this._renderTemplate(\n                this.options.uploadTemplate,\n                files\n            );\n        },\n\n        _renderDownload: function (files) {\n            return this._renderTemplate(\n                this.options.downloadTemplate,\n                files\n            ).find('a[download]').each(this._enableDragToDesktop).end();\n        },\n\n        _startHandler: function (e) {\n            e.preventDefault();\n            var button = $(e.currentTarget),\n                template = button.closest('.template-upload'),\n                data = template.data('data');\n            button.prop('disabled', true);\n            if (data && data.submit) {\n                data.submit();\n            }\n        },\n\n        _cancelHandler: function (e) {\n            e.preventDefault();\n            var template = $(e.currentTarget)\n                    .closest('.template-upload,.template-download'),\n                data = template.data('data') || {};\n            data.context = data.context || template;\n            if (data.abort) {\n                data.abort();\n            } else {\n                data.errorThrown = 'abort';\n                this._trigger('fail', e, data);\n            }\n        },\n\n        _deleteHandler: function (e) {\n            e.preventDefault();\n            var button = $(e.currentTarget);\n            this._trigger('destroy', e, $.extend({\n                context: button.closest('.template-download'),\n                type: 'DELETE'\n            }, button.data()));\n        },\n\n        _forceReflow: function (node) {\n            return $.support.transition && node.length &&\n                node[0].offsetWidth;\n        },\n\n        _transition: function (node) {\n            var dfd = $.Deferred();\n            if ($.support.transition && node.hasClass('fade') && node.is(':visible')) {\n                node.bind(\n                    $.support.transition.end,\n                    function (e) {\n                        // Make sure we don't respond to other transitions events\n                        // in the container element, e.g. from button elements:\n                        if (e.target === node[0]) {\n                            node.unbind($.support.transition.end);\n                            dfd.resolveWith(node);\n                        }\n                    }\n                ).toggleClass('in');\n            } else {\n                node.toggleClass('in');\n                dfd.resolveWith(node);\n            }\n            return dfd;\n        },\n\n        _initButtonBarEventHandlers: function () {\n            var fileUploadButtonBar = this.element.find('.fileupload-buttonbar'),\n                filesList = this.options.filesContainer;\n            this._on(fileUploadButtonBar.find('.start'), {\n                click: function (e) {\n                    e.preventDefault();\n                    filesList.find('.start').click();\n                }\n            });\n            this._on(fileUploadButtonBar.find('.cancel'), {\n                click: function (e) {\n                    e.preventDefault();\n                    filesList.find('.cancel').click();\n                }\n            });\n            this._on(fileUploadButtonBar.find('.delete'), {\n                click: function (e) {\n                    e.preventDefault();\n                    filesList.find('.toggle:checked')\n                        .closest('.template-download')\n                        .find('.delete').click();\n                    fileUploadButtonBar.find('.toggle')\n                        .prop('checked', false);\n                }\n            });\n            this._on(fileUploadButtonBar.find('.toggle'), {\n                change: function (e) {\n                    filesList.find('.toggle').prop(\n                        'checked',\n                        $(e.currentTarget).is(':checked')\n                    );\n                }\n            });\n        },\n\n        _destroyButtonBarEventHandlers: function () {\n            this._off(\n                this.element.find('.fileupload-buttonbar')\n                    .find('.start, .cancel, .delete'),\n                'click'\n            );\n            this._off(\n                this.element.find('.fileupload-buttonbar .toggle'),\n                'change.'\n            );\n        },\n\n        _initEventHandlers: function () {\n            this._super();\n            this._on(this.options.filesContainer, {\n                'click .start': this._startHandler,\n                'click .cancel': this._cancelHandler,\n                'click .delete': this._deleteHandler\n            });\n            this._initButtonBarEventHandlers();\n        },\n\n        _destroyEventHandlers: function () {\n            this._destroyButtonBarEventHandlers();\n            this._off(this.options.filesContainer, 'click');\n            this._super();\n        },\n\n        _enableFileInputButton: function () {\n            this.element.find('.fileinput-button input')\n                .prop('disabled', false)\n                .parent().removeClass('disabled');\n        },\n\n        _disableFileInputButton: function () {\n            this.element.find('.fileinput-button input')\n                .prop('disabled', true)\n                .parent().addClass('disabled');\n        },\n\n        _initTemplates: function () {\n            var options = this.options;\n            options.templatesContainer = this.document[0].createElement(\n                options.filesContainer.prop('nodeName')\n            );\n            if (tmpl) {\n                if (options.uploadTemplateId) {\n                    options.uploadTemplate = tmpl(options.uploadTemplateId);\n                }\n                if (options.downloadTemplateId) {\n                    options.downloadTemplate = tmpl(options.downloadTemplateId);\n                }\n            }\n        },\n\n        _initFilesContainer: function () {\n            var options = this.options;\n            if (options.filesContainer === undefined) {\n                options.filesContainer = this.element.find('.files');\n            } else if (!(options.filesContainer instanceof $)) {\n                options.filesContainer = $(options.filesContainer);\n            }\n        },\n\n        _initSpecialOptions: function () {\n            this._super();\n            this._initFilesContainer();\n            this._initTemplates();\n        },\n\n        _create: function () {\n            this._super();\n            this._resetFinishedDeferreds();\n            if (!$.support.fileInput) {\n                this._disableFileInputButton();\n            }\n        },\n\n        enable: function () {\n            var wasDisabled = false;\n            if (this.options.disabled) {\n                wasDisabled = true;\n            }\n            this._super();\n            if (wasDisabled) {\n                this.element.find('input, button').prop('disabled', false);\n                this._enableFileInputButton();\n            }\n        },\n\n        disable: function () {\n            if (!this.options.disabled) {\n                this.element.find('input, button').prop('disabled', true);\n                this._disableFileInputButton();\n            }\n            this._super();\n        }\n\n    });\n\n}));\n\n\n/***/ }),\n/* 14 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*\n * jQuery Iframe Transport Plugin\n * https://github.com/blueimp/jQuery-File-Upload\n *\n * Copyright 2011, Sebastian Tschan\n * https://blueimp.net\n *\n * Licensed under the MIT license:\n * https://opensource.org/licenses/MIT\n */\n\n/* global define, require, window, document, JSON */\n\n;(function (factory) {\n    'use strict';\n    if (true) {\n        // Register as an anonymous AMD module:\n        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(1)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    } else if (typeof exports === 'object') {\n        // Node/CommonJS:\n        factory(require('jquery'));\n    } else {\n        // Browser globals:\n        factory(window.jQuery);\n    }\n}(function ($) {\n    'use strict';\n\n    // Helper variable to create unique names for the transport iframes:\n    var counter = 0,\n        jsonAPI = $,\n        jsonParse = 'parseJSON';\n\n    if ('JSON' in window && 'parse' in JSON) {\n      jsonAPI = JSON;\n      jsonParse = 'parse';\n    }\n\n    // The iframe transport accepts four additional options:\n    // options.fileInput: a jQuery collection of file input fields\n    // options.paramName: the parameter name for the file form data,\n    //  overrides the name property of the file input field(s),\n    //  can be a string or an array of strings.\n    // options.formData: an array of objects with name and value properties,\n    //  equivalent to the return data of .serializeArray(), e.g.:\n    //  [{name: 'a', value: 1}, {name: 'b', value: 2}]\n    // options.initialIframeSrc: the URL of the initial iframe src,\n    //  by default set to \"javascript:false;\"\n    $.ajaxTransport('iframe', function (options) {\n        if (options.async) {\n            // javascript:false as initial iframe src\n            // prevents warning popups on HTTPS in IE6:\n            /*jshint scripturl: true */\n            var initialIframeSrc = options.initialIframeSrc || 'javascript:false;',\n            /*jshint scripturl: false */\n                form,\n                iframe,\n                addParamChar;\n            return {\n                send: function (_, completeCallback) {\n                    form = $('<form style=\"display:none;\"></form>');\n                    form.attr('accept-charset', options.formAcceptCharset);\n                    addParamChar = /\\?/.test(options.url) ? '&' : '?';\n                    // XDomainRequest only supports GET and POST:\n                    if (options.type === 'DELETE') {\n                        options.url = options.url + addParamChar + '_method=DELETE';\n                        options.type = 'POST';\n                    } else if (options.type === 'PUT') {\n                        options.url = options.url + addParamChar + '_method=PUT';\n                        options.type = 'POST';\n                    } else if (options.type === 'PATCH') {\n                        options.url = options.url + addParamChar + '_method=PATCH';\n                        options.type = 'POST';\n                    }\n                    // IE versions below IE8 cannot set the name property of\n                    // elements that have already been added to the DOM,\n                    // so we set the name along with the iframe HTML markup:\n                    counter += 1;\n                    iframe = $(\n                        '<iframe src=\"' + initialIframeSrc +\n                            '\" name=\"iframe-transport-' + counter + '\"></iframe>'\n                    ).bind('load', function () {\n                        var fileInputClones,\n                            paramNames = $.isArray(options.paramName) ?\n                                    options.paramName : [options.paramName];\n                        iframe\n                            .unbind('load')\n                            .bind('load', function () {\n                                var response;\n                                // Wrap in a try/catch block to catch exceptions thrown\n                                // when trying to access cross-domain iframe contents:\n                                try {\n                                    response = iframe.contents();\n                                    // Google Chrome and Firefox do not throw an\n                                    // exception when calling iframe.contents() on\n                                    // cross-domain requests, so we unify the response:\n                                    if (!response.length || !response[0].firstChild) {\n                                        throw new Error();\n                                    }\n                                } catch (e) {\n                                    response = undefined;\n                                }\n                                // The complete callback returns the\n                                // iframe content document as response object:\n                                completeCallback(\n                                    200,\n                                    'success',\n                                    {'iframe': response}\n                                );\n                                // Fix for IE endless progress bar activity bug\n                                // (happens on form submits to iframe targets):\n                                $('<iframe src=\"' + initialIframeSrc + '\"></iframe>')\n                                    .appendTo(form);\n                                window.setTimeout(function () {\n                                    // Removing the form in a setTimeout call\n                                    // allows Chrome's developer tools to display\n                                    // the response result\n                                    form.remove();\n                                }, 0);\n                            });\n                        form\n                            .prop('target', iframe.prop('name'))\n                            .prop('action', options.url)\n                            .prop('method', options.type);\n                        if (options.formData) {\n                            $.each(options.formData, function (index, field) {\n                                $('<input type=\"hidden\"/>')\n                                    .prop('name', field.name)\n                                    .val(field.value)\n                                    .appendTo(form);\n                            });\n                        }\n                        if (options.fileInput && options.fileInput.length &&\n                                options.type === 'POST') {\n                            fileInputClones = options.fileInput.clone();\n                            // Insert a clone for each file input field:\n                            options.fileInput.after(function (index) {\n                                return fileInputClones[index];\n                            });\n                            if (options.paramName) {\n                                options.fileInput.each(function (index) {\n                                    $(this).prop(\n                                        'name',\n                                        paramNames[index] || options.paramName\n                                    );\n                                });\n                            }\n                            // Appending the file input fields to the hidden form\n                            // removes them from their original location:\n                            form\n                                .append(options.fileInput)\n                                .prop('enctype', 'multipart/form-data')\n                                // enctype must be set as encoding for IE:\n                                .prop('encoding', 'multipart/form-data');\n                            // Remove the HTML5 form attribute from the input(s):\n                            options.fileInput.removeAttr('form');\n                        }\n                        form.submit();\n                        // Insert the file input fields at their original location\n                        // by replacing the clones with the originals:\n                        if (fileInputClones && fileInputClones.length) {\n                            options.fileInput.each(function (index, input) {\n                                var clone = $(fileInputClones[index]);\n                                // Restore the original name and form properties:\n                                $(input)\n                                    .prop('name', clone.prop('name'))\n                                    .attr('form', clone.attr('form'));\n                                clone.replaceWith(input);\n                            });\n                        }\n                    });\n                    form.append(iframe).appendTo(document.body);\n                },\n                abort: function () {\n                    if (iframe) {\n                        // javascript:false as iframe src aborts the request\n                        // and prevents warning popups on HTTPS in IE6.\n                        // concat is used to avoid the \"Script URL\" JSLint error:\n                        iframe\n                            .unbind('load')\n                            .prop('src', initialIframeSrc);\n                    }\n                    if (form) {\n                        form.remove();\n                    }\n                }\n            };\n        }\n    });\n\n    // The iframe transport returns the iframe content document as response.\n    // The following adds converters from iframe to text, json, html, xml\n    // and script.\n    // Please note that the Content-Type for JSON responses has to be text/plain\n    // or text/html, if the browser doesn't include application/json in the\n    // Accept header, else IE will show a download dialog.\n    // The Content-Type for XML responses on the other hand has to be always\n    // application/xml or text/xml, so IE properly parses the XML response.\n    // See also\n    // https://github.com/blueimp/jQuery-File-Upload/wiki/Setup#content-type-negotiation\n    $.ajaxSetup({\n        converters: {\n            'iframe text': function (iframe) {\n                return iframe && $(iframe[0].body).text();\n            },\n            'iframe json': function (iframe) {\n                return iframe && jsonAPI[jsonParse]($(iframe[0].body).text());\n            },\n            'iframe html': function (iframe) {\n                return iframe && $(iframe[0].body).html();\n            },\n            'iframe xml': function (iframe) {\n                var xmlDoc = iframe && iframe[0];\n                return xmlDoc && $.isXMLDoc(xmlDoc) ? xmlDoc :\n                        $.parseXML((xmlDoc.XMLDocument && xmlDoc.XMLDocument.xml) ||\n                            $(xmlDoc.body).html());\n            },\n            'iframe script': function (iframe) {\n                return iframe && $.globalEval($(iframe[0].body).text());\n            }\n        }\n    });\n\n}));\n\n\n/***/ }),\n/* 15 */\n/***/ (function(module, exports, __webpack_require__) {\n\nmodule.exports = __webpack_require__(0)\n\n__webpack_require__(5)\n__webpack_require__(3)\n__webpack_require__(20)\n__webpack_require__(4)\n__webpack_require__(19)\n__webpack_require__(21)\n\n\n/***/ }),\n/* 16 */\n/***/ (function(module, exports) {\n\n// removed by extract-text-webpack-plugin\n\n/***/ }),\n/* 17 */\n/***/ (function(module, exports, __webpack_require__) {\n\nmodule.exports = __webpack_require__.p + \"upload-icon.png\";\n\n/***/ }),\n/* 18 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*! jQuery UI - v1.11.4+CommonJS - 2015-08-28\n* http://jqueryui.com\n* Includes: widget.js\n* Copyright 2015 jQuery Foundation and other contributors; Licensed MIT */\n\n(function( factory ) {\n\tif ( true ) {\n\n\t\t// AMD. Register as an anonymous module.\n\t\t!(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(1) ], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\t} else if ( typeof exports === \"object\" ) {\n\n\t\t// Node/CommonJS\n\t\tfactory( require( \"jquery\" ) );\n\n\t} else {\n\n\t\t// Browser globals\n\t\tfactory( jQuery );\n\t}\n}(function( $ ) {\n/*!\n * jQuery UI Widget 1.11.4\n * http://jqueryui.com\n *\n * Copyright jQuery Foundation and other contributors\n * Released under the MIT license.\n * http://jquery.org/license\n *\n * http://api.jqueryui.com/jQuery.widget/\n */\n\n\nvar widget_uuid = 0,\n\twidget_slice = Array.prototype.slice;\n\n$.cleanData = (function( orig ) {\n\treturn function( elems ) {\n\t\tvar events, elem, i;\n\t\tfor ( i = 0; (elem = elems[i]) != null; i++ ) {\n\t\t\ttry {\n\n\t\t\t\t// Only trigger remove when necessary to save time\n\t\t\t\tevents = $._data( elem, \"events\" );\n\t\t\t\tif ( events && events.remove ) {\n\t\t\t\t\t$( elem ).triggerHandler( \"remove\" );\n\t\t\t\t}\n\n\t\t\t// http://bugs.jquery.com/ticket/8235\n\t\t\t} catch ( e ) {}\n\t\t}\n\t\torig( elems );\n\t};\n})( $.cleanData );\n\n$.widget = function( name, base, prototype ) {\n\tvar fullName, existingConstructor, constructor, basePrototype,\n\t\t// proxiedPrototype allows the provided prototype to remain unmodified\n\t\t// so that it can be used as a mixin for multiple widgets (#8876)\n\t\tproxiedPrototype = {},\n\t\tnamespace = name.split( \".\" )[ 0 ];\n\n\tname = name.split( \".\" )[ 1 ];\n\tfullName = namespace + \"-\" + name;\n\n\tif ( !prototype ) {\n\t\tprototype = base;\n\t\tbase = $.Widget;\n\t}\n\n\t// create selector for plugin\n\t$.expr[ \":\" ][ fullName.toLowerCase() ] = function( elem ) {\n\t\treturn !!$.data( elem, fullName );\n\t};\n\n\t$[ namespace ] = $[ namespace ] || {};\n\texistingConstructor = $[ namespace ][ name ];\n\tconstructor = $[ namespace ][ name ] = function( options, element ) {\n\t\t// allow instantiation without \"new\" keyword\n\t\tif ( !this._createWidget ) {\n\t\t\treturn new constructor( options, element );\n\t\t}\n\n\t\t// allow instantiation without initializing for simple inheritance\n\t\t// must use \"new\" keyword (the code above always passes args)\n\t\tif ( arguments.length ) {\n\t\t\tthis._createWidget( options, element );\n\t\t}\n\t};\n\t// extend with the existing constructor to carry over any static properties\n\t$.extend( constructor, existingConstructor, {\n\t\tversion: prototype.version,\n\t\t// copy the object used to create the prototype in case we need to\n\t\t// redefine the widget later\n\t\t_proto: $.extend( {}, prototype ),\n\t\t// track widgets that inherit from this widget in case this widget is\n\t\t// redefined after a widget inherits from it\n\t\t_childConstructors: []\n\t});\n\n\tbasePrototype = new base();\n\t// we need to make the options hash a property directly on the new instance\n\t// otherwise we'll modify the options hash on the prototype that we're\n\t// inheriting from\n\tbasePrototype.options = $.widget.extend( {}, basePrototype.options );\n\t$.each( prototype, function( prop, value ) {\n\t\tif ( !$.isFunction( value ) ) {\n\t\t\tproxiedPrototype[ prop ] = value;\n\t\t\treturn;\n\t\t}\n\t\tproxiedPrototype[ prop ] = (function() {\n\t\t\tvar _super = function() {\n\t\t\t\t\treturn base.prototype[ prop ].apply( this, arguments );\n\t\t\t\t},\n\t\t\t\t_superApply = function( args ) {\n\t\t\t\t\treturn base.prototype[ prop ].apply( this, args );\n\t\t\t\t};\n\t\t\treturn function() {\n\t\t\t\tvar __super = this._super,\n\t\t\t\t\t__superApply = this._superApply,\n\t\t\t\t\treturnValue;\n\n\t\t\t\tthis._super = _super;\n\t\t\t\tthis._superApply = _superApply;\n\n\t\t\t\treturnValue = value.apply( this, arguments );\n\n\t\t\t\tthis._super = __super;\n\t\t\t\tthis._superApply = __superApply;\n\n\t\t\t\treturn returnValue;\n\t\t\t};\n\t\t})();\n\t});\n\tconstructor.prototype = $.widget.extend( basePrototype, {\n\t\t// TODO: remove support for widgetEventPrefix\n\t\t// always use the name + a colon as the prefix, e.g., draggable:start\n\t\t// don't prefix for widgets that aren't DOM-based\n\t\twidgetEventPrefix: existingConstructor ? (basePrototype.widgetEventPrefix || name) : name\n\t}, proxiedPrototype, {\n\t\tconstructor: constructor,\n\t\tnamespace: namespace,\n\t\twidgetName: name,\n\t\twidgetFullName: fullName\n\t});\n\n\t// If this widget is being redefined then we need to find all widgets that\n\t// are inheriting from it and redefine all of them so that they inherit from\n\t// the new version of this widget. We're essentially trying to replace one\n\t// level in the prototype chain.\n\tif ( existingConstructor ) {\n\t\t$.each( existingConstructor._childConstructors, function( i, child ) {\n\t\t\tvar childPrototype = child.prototype;\n\n\t\t\t// redefine the child widget using the same prototype that was\n\t\t\t// originally used, but inherit from the new version of the base\n\t\t\t$.widget( childPrototype.namespace + \".\" + childPrototype.widgetName, constructor, child._proto );\n\t\t});\n\t\t// remove the list of existing child constructors from the old constructor\n\t\t// so the old child constructors can be garbage collected\n\t\tdelete existingConstructor._childConstructors;\n\t} else {\n\t\tbase._childConstructors.push( constructor );\n\t}\n\n\t$.widget.bridge( name, constructor );\n\n\treturn constructor;\n};\n\n$.widget.extend = function( target ) {\n\tvar input = widget_slice.call( arguments, 1 ),\n\t\tinputIndex = 0,\n\t\tinputLength = input.length,\n\t\tkey,\n\t\tvalue;\n\tfor ( ; inputIndex < inputLength; inputIndex++ ) {\n\t\tfor ( key in input[ inputIndex ] ) {\n\t\t\tvalue = input[ inputIndex ][ key ];\n\t\t\tif ( input[ inputIndex ].hasOwnProperty( key ) && value !== undefined ) {\n\t\t\t\t// Clone objects\n\t\t\t\tif ( $.isPlainObject( value ) ) {\n\t\t\t\t\ttarget[ key ] = $.isPlainObject( target[ key ] ) ?\n\t\t\t\t\t\t$.widget.extend( {}, target[ key ], value ) :\n\t\t\t\t\t\t// Don't extend strings, arrays, etc. with objects\n\t\t\t\t\t\t$.widget.extend( {}, value );\n\t\t\t\t// Copy everything else by reference\n\t\t\t\t} else {\n\t\t\t\t\ttarget[ key ] = value;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn target;\n};\n\n$.widget.bridge = function( name, object ) {\n\tvar fullName = object.prototype.widgetFullName || name;\n\t$.fn[ name ] = function( options ) {\n\t\tvar isMethodCall = typeof options === \"string\",\n\t\t\targs = widget_slice.call( arguments, 1 ),\n\t\t\treturnValue = this;\n\n\t\tif ( isMethodCall ) {\n\t\t\tthis.each(function() {\n\t\t\t\tvar methodValue,\n\t\t\t\t\tinstance = $.data( this, fullName );\n\t\t\t\tif ( options === \"instance\" ) {\n\t\t\t\t\treturnValue = instance;\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\tif ( !instance ) {\n\t\t\t\t\treturn $.error( \"cannot call methods on \" + name + \" prior to initialization; \" +\n\t\t\t\t\t\t\"attempted to call method '\" + options + \"'\" );\n\t\t\t\t}\n\t\t\t\tif ( !$.isFunction( instance[options] ) || options.charAt( 0 ) === \"_\" ) {\n\t\t\t\t\treturn $.error( \"no such method '\" + options + \"' for \" + name + \" widget instance\" );\n\t\t\t\t}\n\t\t\t\tmethodValue = instance[ options ].apply( instance, args );\n\t\t\t\tif ( methodValue !== instance && methodValue !== undefined ) {\n\t\t\t\t\treturnValue = methodValue && methodValue.jquery ?\n\t\t\t\t\t\treturnValue.pushStack( methodValue.get() ) :\n\t\t\t\t\t\tmethodValue;\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t});\n\t\t} else {\n\n\t\t\t// Allow multiple hashes to be passed on init\n\t\t\tif ( args.length ) {\n\t\t\t\toptions = $.widget.extend.apply( null, [ options ].concat(args) );\n\t\t\t}\n\n\t\t\tthis.each(function() {\n\t\t\t\tvar instance = $.data( this, fullName );\n\t\t\t\tif ( instance ) {\n\t\t\t\t\tinstance.option( options || {} );\n\t\t\t\t\tif ( instance._init ) {\n\t\t\t\t\t\tinstance._init();\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t$.data( this, fullName, new object( options, this ) );\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\treturn returnValue;\n\t};\n};\n\n$.Widget = function( /* options, element */ ) {};\n$.Widget._childConstructors = [];\n\n$.Widget.prototype = {\n\twidgetName: \"widget\",\n\twidgetEventPrefix: \"\",\n\tdefaultElement: \"<div>\",\n\toptions: {\n\t\tdisabled: false,\n\n\t\t// callbacks\n\t\tcreate: null\n\t},\n\t_createWidget: function( options, element ) {\n\t\telement = $( element || this.defaultElement || this )[ 0 ];\n\t\tthis.element = $( element );\n\t\tthis.uuid = widget_uuid++;\n\t\tthis.eventNamespace = \".\" + this.widgetName + this.uuid;\n\n\t\tthis.bindings = $();\n\t\tthis.hoverable = $();\n\t\tthis.focusable = $();\n\n\t\tif ( element !== this ) {\n\t\t\t$.data( element, this.widgetFullName, this );\n\t\t\tthis._on( true, this.element, {\n\t\t\t\tremove: function( event ) {\n\t\t\t\t\tif ( event.target === element ) {\n\t\t\t\t\t\tthis.destroy();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t\tthis.document = $( element.style ?\n\t\t\t\t// element within the document\n\t\t\t\telement.ownerDocument :\n\t\t\t\t// element is window or document\n\t\t\t\telement.document || element );\n\t\t\tthis.window = $( this.document[0].defaultView || this.document[0].parentWindow );\n\t\t}\n\n\t\tthis.options = $.widget.extend( {},\n\t\t\tthis.options,\n\t\t\tthis._getCreateOptions(),\n\t\t\toptions );\n\n\t\tthis._create();\n\t\tthis._trigger( \"create\", null, this._getCreateEventData() );\n\t\tthis._init();\n\t},\n\t_getCreateOptions: $.noop,\n\t_getCreateEventData: $.noop,\n\t_create: $.noop,\n\t_init: $.noop,\n\n\tdestroy: function() {\n\t\tthis._destroy();\n\t\t// we can probably remove the unbind calls in 2.0\n\t\t// all event bindings should go through this._on()\n\t\tthis.element\n\t\t\t.unbind( this.eventNamespace )\n\t\t\t.removeData( this.widgetFullName )\n\t\t\t// support: jquery <1.6.3\n\t\t\t// http://bugs.jquery.com/ticket/9413\n\t\t\t.removeData( $.camelCase( this.widgetFullName ) );\n\t\tthis.widget()\n\t\t\t.unbind( this.eventNamespace )\n\t\t\t.removeAttr( \"aria-disabled\" )\n\t\t\t.removeClass(\n\t\t\t\tthis.widgetFullName + \"-disabled \" +\n\t\t\t\t\"ui-state-disabled\" );\n\n\t\t// clean up events and states\n\t\tthis.bindings.unbind( this.eventNamespace );\n\t\tthis.hoverable.removeClass( \"ui-state-hover\" );\n\t\tthis.focusable.removeClass( \"ui-state-focus\" );\n\t},\n\t_destroy: $.noop,\n\n\twidget: function() {\n\t\treturn this.element;\n\t},\n\n\toption: function( key, value ) {\n\t\tvar options = key,\n\t\t\tparts,\n\t\t\tcurOption,\n\t\t\ti;\n\n\t\tif ( arguments.length === 0 ) {\n\t\t\t// don't return a reference to the internal hash\n\t\t\treturn $.widget.extend( {}, this.options );\n\t\t}\n\n\t\tif ( typeof key === \"string\" ) {\n\t\t\t// handle nested keys, e.g., \"foo.bar\" => { foo: { bar: ___ } }\n\t\t\toptions = {};\n\t\t\tparts = key.split( \".\" );\n\t\t\tkey = parts.shift();\n\t\t\tif ( parts.length ) {\n\t\t\t\tcurOption = options[ key ] = $.widget.extend( {}, this.options[ key ] );\n\t\t\t\tfor ( i = 0; i < parts.length - 1; i++ ) {\n\t\t\t\t\tcurOption[ parts[ i ] ] = curOption[ parts[ i ] ] || {};\n\t\t\t\t\tcurOption = curOption[ parts[ i ] ];\n\t\t\t\t}\n\t\t\t\tkey = parts.pop();\n\t\t\t\tif ( arguments.length === 1 ) {\n\t\t\t\t\treturn curOption[ key ] === undefined ? null : curOption[ key ];\n\t\t\t\t}\n\t\t\t\tcurOption[ key ] = value;\n\t\t\t} else {\n\t\t\t\tif ( arguments.length === 1 ) {\n\t\t\t\t\treturn this.options[ key ] === undefined ? null : this.options[ key ];\n\t\t\t\t}\n\t\t\t\toptions[ key ] = value;\n\t\t\t}\n\t\t}\n\n\t\tthis._setOptions( options );\n\n\t\treturn this;\n\t},\n\t_setOptions: function( options ) {\n\t\tvar key;\n\n\t\tfor ( key in options ) {\n\t\t\tthis._setOption( key, options[ key ] );\n\t\t}\n\n\t\treturn this;\n\t},\n\t_setOption: function( key, value ) {\n\t\tthis.options[ key ] = value;\n\n\t\tif ( key === \"disabled\" ) {\n\t\t\tthis.widget()\n\t\t\t\t.toggleClass( this.widgetFullName + \"-disabled\", !!value );\n\n\t\t\t// If the widget is becoming disabled, then nothing is interactive\n\t\t\tif ( value ) {\n\t\t\t\tthis.hoverable.removeClass( \"ui-state-hover\" );\n\t\t\t\tthis.focusable.removeClass( \"ui-state-focus\" );\n\t\t\t}\n\t\t}\n\n\t\treturn this;\n\t},\n\n\tenable: function() {\n\t\treturn this._setOptions({ disabled: false });\n\t},\n\tdisable: function() {\n\t\treturn this._setOptions({ disabled: true });\n\t},\n\n\t_on: function( suppressDisabledCheck, element, handlers ) {\n\t\tvar delegateElement,\n\t\t\tinstance = this;\n\n\t\t// no suppressDisabledCheck flag, shuffle arguments\n\t\tif ( typeof suppressDisabledCheck !== \"boolean\" ) {\n\t\t\thandlers = element;\n\t\t\telement = suppressDisabledCheck;\n\t\t\tsuppressDisabledCheck = false;\n\t\t}\n\n\t\t// no element argument, shuffle and use this.element\n\t\tif ( !handlers ) {\n\t\t\thandlers = element;\n\t\t\telement = this.element;\n\t\t\tdelegateElement = this.widget();\n\t\t} else {\n\t\t\telement = delegateElement = $( element );\n\t\t\tthis.bindings = this.bindings.add( element );\n\t\t}\n\n\t\t$.each( handlers, function( event, handler ) {\n\t\t\tfunction handlerProxy() {\n\t\t\t\t// allow widgets to customize the disabled handling\n\t\t\t\t// - disabled as an array instead of boolean\n\t\t\t\t// - disabled class as method for disabling individual parts\n\t\t\t\tif ( !suppressDisabledCheck &&\n\t\t\t\t\t\t( instance.options.disabled === true ||\n\t\t\t\t\t\t\t$( this ).hasClass( \"ui-state-disabled\" ) ) ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\treturn ( typeof handler === \"string\" ? instance[ handler ] : handler )\n\t\t\t\t\t.apply( instance, arguments );\n\t\t\t}\n\n\t\t\t// copy the guid so direct unbinding works\n\t\t\tif ( typeof handler !== \"string\" ) {\n\t\t\t\thandlerProxy.guid = handler.guid =\n\t\t\t\t\thandler.guid || handlerProxy.guid || $.guid++;\n\t\t\t}\n\n\t\t\tvar match = event.match( /^([\\w:-]*)\\s*(.*)$/ ),\n\t\t\t\teventName = match[1] + instance.eventNamespace,\n\t\t\t\tselector = match[2];\n\t\t\tif ( selector ) {\n\t\t\t\tdelegateElement.delegate( selector, eventName, handlerProxy );\n\t\t\t} else {\n\t\t\t\telement.bind( eventName, handlerProxy );\n\t\t\t}\n\t\t});\n\t},\n\n\t_off: function( element, eventName ) {\n\t\teventName = (eventName || \"\").split( \" \" ).join( this.eventNamespace + \" \" ) +\n\t\t\tthis.eventNamespace;\n\t\telement.unbind( eventName ).undelegate( eventName );\n\n\t\t// Clear the stack to avoid memory leaks (#10056)\n\t\tthis.bindings = $( this.bindings.not( element ).get() );\n\t\tthis.focusable = $( this.focusable.not( element ).get() );\n\t\tthis.hoverable = $( this.hoverable.not( element ).get() );\n\t},\n\n\t_delay: function( handler, delay ) {\n\t\tfunction handlerProxy() {\n\t\t\treturn ( typeof handler === \"string\" ? instance[ handler ] : handler )\n\t\t\t\t.apply( instance, arguments );\n\t\t}\n\t\tvar instance = this;\n\t\treturn setTimeout( handlerProxy, delay || 0 );\n\t},\n\n\t_hoverable: function( element ) {\n\t\tthis.hoverable = this.hoverable.add( element );\n\t\tthis._on( element, {\n\t\t\tmouseenter: function( event ) {\n\t\t\t\t$( event.currentTarget ).addClass( \"ui-state-hover\" );\n\t\t\t},\n\t\t\tmouseleave: function( event ) {\n\t\t\t\t$( event.currentTarget ).removeClass( \"ui-state-hover\" );\n\t\t\t}\n\t\t});\n\t},\n\n\t_focusable: function( element ) {\n\t\tthis.focusable = this.focusable.add( element );\n\t\tthis._on( element, {\n\t\t\tfocusin: function( event ) {\n\t\t\t\t$( event.currentTarget ).addClass( \"ui-state-focus\" );\n\t\t\t},\n\t\t\tfocusout: function( event ) {\n\t\t\t\t$( event.currentTarget ).removeClass( \"ui-state-focus\" );\n\t\t\t}\n\t\t});\n\t},\n\n\t_trigger: function( type, event, data ) {\n\t\tvar prop, orig,\n\t\t\tcallback = this.options[ type ];\n\n\t\tdata = data || {};\n\t\tevent = $.Event( event );\n\t\tevent.type = ( type === this.widgetEventPrefix ?\n\t\t\ttype :\n\t\t\tthis.widgetEventPrefix + type ).toLowerCase();\n\t\t// the original event may come from any element\n\t\t// so we need to reset the target on the new event\n\t\tevent.target = this.element[ 0 ];\n\n\t\t// copy original event properties over to the new event\n\t\torig = event.originalEvent;\n\t\tif ( orig ) {\n\t\t\tfor ( prop in orig ) {\n\t\t\t\tif ( !( prop in event ) ) {\n\t\t\t\t\tevent[ prop ] = orig[ prop ];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthis.element.trigger( event, data );\n\t\treturn !( $.isFunction( callback ) &&\n\t\t\tcallback.apply( this.element[0], [ event ].concat( data ) ) === false ||\n\t\t\tevent.isDefaultPrevented() );\n\t}\n};\n\n$.each( { show: \"fadeIn\", hide: \"fadeOut\" }, function( method, defaultEffect ) {\n\t$.Widget.prototype[ \"_\" + method ] = function( element, options, callback ) {\n\t\tif ( typeof options === \"string\" ) {\n\t\t\toptions = { effect: options };\n\t\t}\n\t\tvar hasOptions,\n\t\t\teffectName = !options ?\n\t\t\t\tmethod :\n\t\t\t\toptions === true || typeof options === \"number\" ?\n\t\t\t\t\tdefaultEffect :\n\t\t\t\t\toptions.effect || defaultEffect;\n\t\toptions = options || {};\n\t\tif ( typeof options === \"number\" ) {\n\t\t\toptions = { duration: options };\n\t\t}\n\t\thasOptions = !$.isEmptyObject( options );\n\t\toptions.complete = callback;\n\t\tif ( options.delay ) {\n\t\t\telement.delay( options.delay );\n\t\t}\n\t\tif ( hasOptions && $.effects && $.effects.effect[ effectName ] ) {\n\t\t\telement[ method ]( options );\n\t\t} else if ( effectName !== method && element[ effectName ] ) {\n\t\t\telement[ effectName ]( options.duration, options.easing, callback );\n\t\t} else {\n\t\t\telement.queue(function( next ) {\n\t\t\t\t$( this )[ method ]();\n\t\t\t\tif ( callback ) {\n\t\t\t\t\tcallback.call( element[ 0 ] );\n\t\t\t\t}\n\t\t\t\tnext();\n\t\t\t});\n\t\t}\n\t};\n});\n\nvar widget = $.widget;\n\n\n\n}));\n\n\n/***/ }),\n/* 19 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*\n * JavaScript Load Image Exif Map\n * https://github.com/blueimp/JavaScript-Load-Image\n *\n * Copyright 2013, Sebastian Tschan\n * https://blueimp.net\n *\n * Exif tags mapping based on\n * https://github.com/jseidelin/exif-js\n *\n * Licensed under the MIT license:\n * https://opensource.org/licenses/MIT\n */\n\n/* global define */\n\n;(function (factory) {\n  'use strict'\n  if (true) {\n    // Register as an anonymous AMD module:\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0), __webpack_require__(4)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__))\n  } else if (typeof module === 'object' && module.exports) {\n    factory(require('./load-image'), require('./load-image-exif'))\n  } else {\n    // Browser globals:\n    factory(window.loadImage)\n  }\n}(function (loadImage) {\n  'use strict'\n\n  loadImage.ExifMap.prototype.tags = {\n    // =================\n    // TIFF tags (IFD0):\n    // =================\n    0x0100: 'ImageWidth',\n    0x0101: 'ImageHeight',\n    0x8769: 'ExifIFDPointer',\n    0x8825: 'GPSInfoIFDPointer',\n    0xA005: 'InteroperabilityIFDPointer',\n    0x0102: 'BitsPerSample',\n    0x0103: 'Compression',\n    0x0106: 'PhotometricInterpretation',\n    0x0112: 'Orientation',\n    0x0115: 'SamplesPerPixel',\n    0x011C: 'PlanarConfiguration',\n    0x0212: 'YCbCrSubSampling',\n    0x0213: 'YCbCrPositioning',\n    0x011A: 'XResolution',\n    0x011B: 'YResolution',\n    0x0128: 'ResolutionUnit',\n    0x0111: 'StripOffsets',\n    0x0116: 'RowsPerStrip',\n    0x0117: 'StripByteCounts',\n    0x0201: 'JPEGInterchangeFormat',\n    0x0202: 'JPEGInterchangeFormatLength',\n    0x012D: 'TransferFunction',\n    0x013E: 'WhitePoint',\n    0x013F: 'PrimaryChromaticities',\n    0x0211: 'YCbCrCoefficients',\n    0x0214: 'ReferenceBlackWhite',\n    0x0132: 'DateTime',\n    0x010E: 'ImageDescription',\n    0x010F: 'Make',\n    0x0110: 'Model',\n    0x0131: 'Software',\n    0x013B: 'Artist',\n    0x8298: 'Copyright',\n    // ==================\n    // Exif Sub IFD tags:\n    // ==================\n    0x9000: 'ExifVersion', // EXIF version\n    0xA000: 'FlashpixVersion', // Flashpix format version\n    0xA001: 'ColorSpace', // Color space information tag\n    0xA002: 'PixelXDimension', // Valid width of meaningful image\n    0xA003: 'PixelYDimension', // Valid height of meaningful image\n    0xA500: 'Gamma',\n    0x9101: 'ComponentsConfiguration', // Information about channels\n    0x9102: 'CompressedBitsPerPixel', // Compressed bits per pixel\n    0x927C: 'MakerNote', // Any desired information written by the manufacturer\n    0x9286: 'UserComment', // Comments by user\n    0xA004: 'RelatedSoundFile', // Name of related sound file\n    0x9003: 'DateTimeOriginal', // Date and time when the original image was generated\n    0x9004: 'DateTimeDigitized', // Date and time when the image was stored digitally\n    0x9290: 'SubSecTime', // Fractions of seconds for DateTime\n    0x9291: 'SubSecTimeOriginal', // Fractions of seconds for DateTimeOriginal\n    0x9292: 'SubSecTimeDigitized', // Fractions of seconds for DateTimeDigitized\n    0x829A: 'ExposureTime', // Exposure time (in seconds)\n    0x829D: 'FNumber',\n    0x8822: 'ExposureProgram', // Exposure program\n    0x8824: 'SpectralSensitivity', // Spectral sensitivity\n    0x8827: 'PhotographicSensitivity', // EXIF 2.3, ISOSpeedRatings in EXIF 2.2\n    0x8828: 'OECF', // Optoelectric conversion factor\n    0x8830: 'SensitivityType',\n    0x8831: 'StandardOutputSensitivity',\n    0x8832: 'RecommendedExposureIndex',\n    0x8833: 'ISOSpeed',\n    0x8834: 'ISOSpeedLatitudeyyy',\n    0x8835: 'ISOSpeedLatitudezzz',\n    0x9201: 'ShutterSpeedValue', // Shutter speed\n    0x9202: 'ApertureValue', // Lens aperture\n    0x9203: 'BrightnessValue', // Value of brightness\n    0x9204: 'ExposureBias', // Exposure bias\n    0x9205: 'MaxApertureValue', // Smallest F number of lens\n    0x9206: 'SubjectDistance', // Distance to subject in meters\n    0x9207: 'MeteringMode', // Metering mode\n    0x9208: 'LightSource', // Kind of light source\n    0x9209: 'Flash', // Flash status\n    0x9214: 'SubjectArea', // Location and area of main subject\n    0x920A: 'FocalLength', // Focal length of the lens in mm\n    0xA20B: 'FlashEnergy', // Strobe energy in BCPS\n    0xA20C: 'SpatialFrequencyResponse',\n    0xA20E: 'FocalPlaneXResolution', // Number of pixels in width direction per FPRUnit\n    0xA20F: 'FocalPlaneYResolution', // Number of pixels in height direction per FPRUnit\n    0xA210: 'FocalPlaneResolutionUnit', // Unit for measuring the focal plane resolution\n    0xA214: 'SubjectLocation', // Location of subject in image\n    0xA215: 'ExposureIndex', // Exposure index selected on camera\n    0xA217: 'SensingMethod', // Image sensor type\n    0xA300: 'FileSource', // Image source (3 == DSC)\n    0xA301: 'SceneType', // Scene type (1 == directly photographed)\n    0xA302: 'CFAPattern', // Color filter array geometric pattern\n    0xA401: 'CustomRendered', // Special processing\n    0xA402: 'ExposureMode', // Exposure mode\n    0xA403: 'WhiteBalance', // 1 = auto white balance, 2 = manual\n    0xA404: 'DigitalZoomRatio', // Digital zoom ratio\n    0xA405: 'FocalLengthIn35mmFilm',\n    0xA406: 'SceneCaptureType', // Type of scene\n    0xA407: 'GainControl', // Degree of overall image gain adjustment\n    0xA408: 'Contrast', // Direction of contrast processing applied by camera\n    0xA409: 'Saturation', // Direction of saturation processing applied by camera\n    0xA40A: 'Sharpness', // Direction of sharpness processing applied by camera\n    0xA40B: 'DeviceSettingDescription',\n    0xA40C: 'SubjectDistanceRange', // Distance to subject\n    0xA420: 'ImageUniqueID', // Identifier assigned uniquely to each image\n    0xA430: 'CameraOwnerName',\n    0xA431: 'BodySerialNumber',\n    0xA432: 'LensSpecification',\n    0xA433: 'LensMake',\n    0xA434: 'LensModel',\n    0xA435: 'LensSerialNumber',\n    // ==============\n    // GPS Info tags:\n    // ==============\n    0x0000: 'GPSVersionID',\n    0x0001: 'GPSLatitudeRef',\n    0x0002: 'GPSLatitude',\n    0x0003: 'GPSLongitudeRef',\n    0x0004: 'GPSLongitude',\n    0x0005: 'GPSAltitudeRef',\n    0x0006: 'GPSAltitude',\n    0x0007: 'GPSTimeStamp',\n    0x0008: 'GPSSatellites',\n    0x0009: 'GPSStatus',\n    0x000A: 'GPSMeasureMode',\n    0x000B: 'GPSDOP',\n    0x000C: 'GPSSpeedRef',\n    0x000D: 'GPSSpeed',\n    0x000E: 'GPSTrackRef',\n    0x000F: 'GPSTrack',\n    0x0010: 'GPSImgDirectionRef',\n    0x0011: 'GPSImgDirection',\n    0x0012: 'GPSMapDatum',\n    0x0013: 'GPSDestLatitudeRef',\n    0x0014: 'GPSDestLatitude',\n    0x0015: 'GPSDestLongitudeRef',\n    0x0016: 'GPSDestLongitude',\n    0x0017: 'GPSDestBearingRef',\n    0x0018: 'GPSDestBearing',\n    0x0019: 'GPSDestDistanceRef',\n    0x001A: 'GPSDestDistance',\n    0x001B: 'GPSProcessingMethod',\n    0x001C: 'GPSAreaInformation',\n    0x001D: 'GPSDateStamp',\n    0x001E: 'GPSDifferential',\n    0x001F: 'GPSHPositioningError'\n  }\n\n  loadImage.ExifMap.prototype.stringValues = {\n    ExposureProgram: {\n      0: 'Undefined',\n      1: 'Manual',\n      2: 'Normal program',\n      3: 'Aperture priority',\n      4: 'Shutter priority',\n      5: 'Creative program',\n      6: 'Action program',\n      7: 'Portrait mode',\n      8: 'Landscape mode'\n    },\n    MeteringMode: {\n      0: 'Unknown',\n      1: 'Average',\n      2: 'CenterWeightedAverage',\n      3: 'Spot',\n      4: 'MultiSpot',\n      5: 'Pattern',\n      6: 'Partial',\n      255: 'Other'\n    },\n    LightSource: {\n      0: 'Unknown',\n      1: 'Daylight',\n      2: 'Fluorescent',\n      3: 'Tungsten (incandescent light)',\n      4: 'Flash',\n      9: 'Fine weather',\n      10: 'Cloudy weather',\n      11: 'Shade',\n      12: 'Daylight fluorescent (D 5700 - 7100K)',\n      13: 'Day white fluorescent (N 4600 - 5400K)',\n      14: 'Cool white fluorescent (W 3900 - 4500K)',\n      15: 'White fluorescent (WW 3200 - 3700K)',\n      17: 'Standard light A',\n      18: 'Standard light B',\n      19: 'Standard light C',\n      20: 'D55',\n      21: 'D65',\n      22: 'D75',\n      23: 'D50',\n      24: 'ISO studio tungsten',\n      255: 'Other'\n    },\n    Flash: {\n      0x0000: 'Flash did not fire',\n      0x0001: 'Flash fired',\n      0x0005: 'Strobe return light not detected',\n      0x0007: 'Strobe return light detected',\n      0x0009: 'Flash fired, compulsory flash mode',\n      0x000D: 'Flash fired, compulsory flash mode, return light not detected',\n      0x000F: 'Flash fired, compulsory flash mode, return light detected',\n      0x0010: 'Flash did not fire, compulsory flash mode',\n      0x0018: 'Flash did not fire, auto mode',\n      0x0019: 'Flash fired, auto mode',\n      0x001D: 'Flash fired, auto mode, return light not detected',\n      0x001F: 'Flash fired, auto mode, return light detected',\n      0x0020: 'No flash function',\n      0x0041: 'Flash fired, red-eye reduction mode',\n      0x0045: 'Flash fired, red-eye reduction mode, return light not detected',\n      0x0047: 'Flash fired, red-eye reduction mode, return light detected',\n      0x0049: 'Flash fired, compulsory flash mode, red-eye reduction mode',\n      0x004D: 'Flash fired, compulsory flash mode, red-eye reduction mode, return light not detected',\n      0x004F: 'Flash fired, compulsory flash mode, red-eye reduction mode, return light detected',\n      0x0059: 'Flash fired, auto mode, red-eye reduction mode',\n      0x005D: 'Flash fired, auto mode, return light not detected, red-eye reduction mode',\n      0x005F: 'Flash fired, auto mode, return light detected, red-eye reduction mode'\n    },\n    SensingMethod: {\n      1: 'Undefined',\n      2: 'One-chip color area sensor',\n      3: 'Two-chip color area sensor',\n      4: 'Three-chip color area sensor',\n      5: 'Color sequential area sensor',\n      7: 'Trilinear sensor',\n      8: 'Color sequential linear sensor'\n    },\n    SceneCaptureType: {\n      0: 'Standard',\n      1: 'Landscape',\n      2: 'Portrait',\n      3: 'Night scene'\n    },\n    SceneType: {\n      1: 'Directly photographed'\n    },\n    CustomRendered: {\n      0: 'Normal process',\n      1: 'Custom process'\n    },\n    WhiteBalance: {\n      0: 'Auto white balance',\n      1: 'Manual white balance'\n    },\n    GainControl: {\n      0: 'None',\n      1: 'Low gain up',\n      2: 'High gain up',\n      3: 'Low gain down',\n      4: 'High gain down'\n    },\n    Contrast: {\n      0: 'Normal',\n      1: 'Soft',\n      2: 'Hard'\n    },\n    Saturation: {\n      0: 'Normal',\n      1: 'Low saturation',\n      2: 'High saturation'\n    },\n    Sharpness: {\n      0: 'Normal',\n      1: 'Soft',\n      2: 'Hard'\n    },\n    SubjectDistanceRange: {\n      0: 'Unknown',\n      1: 'Macro',\n      2: 'Close view',\n      3: 'Distant view'\n    },\n    FileSource: {\n      3: 'DSC'\n    },\n    ComponentsConfiguration: {\n      0: '',\n      1: 'Y',\n      2: 'Cb',\n      3: 'Cr',\n      4: 'R',\n      5: 'G',\n      6: 'B'\n    },\n    Orientation: {\n      1: 'top-left',\n      2: 'top-right',\n      3: 'bottom-right',\n      4: 'bottom-left',\n      5: 'left-top',\n      6: 'right-top',\n      7: 'right-bottom',\n      8: 'left-bottom'\n    }\n  }\n\n  loadImage.ExifMap.prototype.getText = function (id) {\n    var value = this.get(id)\n    switch (id) {\n      case 'LightSource':\n      case 'Flash':\n      case 'MeteringMode':\n      case 'ExposureProgram':\n      case 'SensingMethod':\n      case 'SceneCaptureType':\n      case 'SceneType':\n      case 'CustomRendered':\n      case 'WhiteBalance':\n      case 'GainControl':\n      case 'Contrast':\n      case 'Saturation':\n      case 'Sharpness':\n      case 'SubjectDistanceRange':\n      case 'FileSource':\n      case 'Orientation':\n        return this.stringValues[id][value]\n      case 'ExifVersion':\n      case 'FlashpixVersion':\n        if (!value) return\n        return String.fromCharCode(value[0], value[1], value[2], value[3])\n      case 'ComponentsConfiguration':\n        if (!value) return\n        return this.stringValues[id][value[0]] +\n        this.stringValues[id][value[1]] +\n        this.stringValues[id][value[2]] +\n        this.stringValues[id][value[3]]\n      case 'GPSVersionID':\n        if (!value) return\n        return value[0] + '.' + value[1] + '.' + value[2] + '.' + value[3]\n    }\n    return String(value)\n  }\n\n  ;(function (exifMapPrototype) {\n    var tags = exifMapPrototype.tags\n    var map = exifMapPrototype.map\n    var prop\n    // Map the tag names to tags:\n    for (prop in tags) {\n      if (tags.hasOwnProperty(prop)) {\n        map[tags[prop]] = prop\n      }\n    }\n  }(loadImage.ExifMap.prototype))\n\n  loadImage.ExifMap.prototype.getAll = function () {\n    var map = {}\n    var prop\n    var id\n    for (prop in this) {\n      if (this.hasOwnProperty(prop)) {\n        id = this.tags[prop]\n        if (id) {\n          map[id] = this.getText(id)\n        }\n      }\n    }\n    return map\n  }\n}))\n\n\n/***/ }),\n/* 20 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*\n * JavaScript Load Image Fetch\n * https://github.com/blueimp/JavaScript-Load-Image\n *\n * Copyright 2017, Sebastian Tschan\n * https://blueimp.net\n *\n * Licensed under the MIT license:\n * https://opensource.org/licenses/MIT\n */\n\n/* global define, fetch, Request */\n\n;(function (factory) {\n  'use strict'\n  if (true) {\n    // Register as an anonymous AMD module:\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0), __webpack_require__(3)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__))\n  } else if (typeof module === 'object' && module.exports) {\n    factory(require('./load-image'), require('./load-image-meta'))\n  } else {\n    // Browser globals:\n    factory(window.loadImage)\n  }\n}(function (loadImage) {\n  'use strict'\n\n  if ('fetch' in window && 'Request' in window) {\n    loadImage.fetchBlob = function (url, callback, options) {\n      if (loadImage.hasMetaOption(options)) {\n        return fetch(new Request(url, options)).then(function (response) {\n          return response.blob()\n        }).then(callback).catch(function (err) {\n          console.log(err)\n          callback()\n        })\n      } else {\n        callback()\n      }\n    }\n  }\n}))\n\n\n/***/ }),\n/* 21 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*\n * JavaScript Load Image Orientation\n * https://github.com/blueimp/JavaScript-Load-Image\n *\n * Copyright 2013, Sebastian Tschan\n * https://blueimp.net\n *\n * Licensed under the MIT license:\n * https://opensource.org/licenses/MIT\n */\n\n/* global define */\n\n;(function (factory) {\n  'use strict'\n  if (true) {\n    // Register as an anonymous AMD module:\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0), __webpack_require__(5), __webpack_require__(3)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__))\n  } else if (typeof module === 'object' && module.exports) {\n    factory(\n      require('./load-image'),\n      require('./load-image-scale'),\n      require('./load-image-meta')\n    )\n  } else {\n    // Browser globals:\n    factory(window.loadImage)\n  }\n}(function (loadImage) {\n  'use strict'\n\n  var originalHasCanvasOption = loadImage.hasCanvasOption\n  var originalHasMetaOption = loadImage.hasMetaOption\n  var originalTransformCoordinates = loadImage.transformCoordinates\n  var originalGetTransformedOptions = loadImage.getTransformedOptions\n\n  // Determines if the target image should be a canvas element:\n  loadImage.hasCanvasOption = function (options) {\n    return !!options.orientation ||\n      originalHasCanvasOption.call(loadImage, options)\n  }\n\n  // Determines if meta data should be loaded automatically:\n  loadImage.hasMetaOption = function (options) {\n    return options && options.orientation === true ||\n      originalHasMetaOption.call(loadImage, options)\n  }\n\n  // Transform image orientation based on\n  // the given EXIF orientation option:\n  loadImage.transformCoordinates = function (canvas, options) {\n    originalTransformCoordinates.call(loadImage, canvas, options)\n    var ctx = canvas.getContext('2d')\n    var width = canvas.width\n    var height = canvas.height\n    var styleWidth = canvas.style.width\n    var styleHeight = canvas.style.height\n    var orientation = options.orientation\n    if (!orientation || orientation > 8) {\n      return\n    }\n    if (orientation > 4) {\n      canvas.width = height\n      canvas.height = width\n      canvas.style.width = styleHeight\n      canvas.style.height = styleWidth\n    }\n    switch (orientation) {\n      case 2:\n        // horizontal flip\n        ctx.translate(width, 0)\n        ctx.scale(-1, 1)\n        break\n      case 3:\n        // 180° rotate left\n        ctx.translate(width, height)\n        ctx.rotate(Math.PI)\n        break\n      case 4:\n        // vertical flip\n        ctx.translate(0, height)\n        ctx.scale(1, -1)\n        break\n      case 5:\n        // vertical flip + 90 rotate right\n        ctx.rotate(0.5 * Math.PI)\n        ctx.scale(1, -1)\n        break\n      case 6:\n        // 90° rotate right\n        ctx.rotate(0.5 * Math.PI)\n        ctx.translate(0, -height)\n        break\n      case 7:\n        // horizontal flip + 90 rotate right\n        ctx.rotate(0.5 * Math.PI)\n        ctx.translate(width, -height)\n        ctx.scale(-1, 1)\n        break\n      case 8:\n        // 90° rotate left\n        ctx.rotate(-0.5 * Math.PI)\n        ctx.translate(-width, 0)\n        break\n    }\n  }\n\n  // Transforms coordinate and dimension options\n  // based on the given orientation option:\n  loadImage.getTransformedOptions = function (img, opts, data) {\n    var options = originalGetTransformedOptions.call(loadImage, img, opts)\n    var orientation = options.orientation\n    var newOptions\n    var i\n    if (orientation === true && data && data.exif) {\n      orientation = data.exif.get('Orientation')\n    }\n    if (!orientation || orientation > 8 || orientation === 1) {\n      return options\n    }\n    newOptions = {}\n    for (i in options) {\n      if (options.hasOwnProperty(i)) {\n        newOptions[i] = options[i]\n      }\n    }\n    newOptions.orientation = orientation\n    switch (orientation) {\n      case 2:\n        // horizontal flip\n        newOptions.left = options.right\n        newOptions.right = options.left\n        break\n      case 3:\n        // 180° rotate left\n        newOptions.left = options.right\n        newOptions.top = options.bottom\n        newOptions.right = options.left\n        newOptions.bottom = options.top\n        break\n      case 4:\n        // vertical flip\n        newOptions.top = options.bottom\n        newOptions.bottom = options.top\n        break\n      case 5:\n        // vertical flip + 90 rotate right\n        newOptions.left = options.top\n        newOptions.top = options.left\n        newOptions.right = options.bottom\n        newOptions.bottom = options.right\n        break\n      case 6:\n        // 90° rotate right\n        newOptions.left = options.top\n        newOptions.top = options.right\n        newOptions.right = options.bottom\n        newOptions.bottom = options.left\n        break\n      case 7:\n        // horizontal flip + 90 rotate right\n        newOptions.left = options.bottom\n        newOptions.top = options.right\n        newOptions.right = options.top\n        newOptions.bottom = options.left\n        break\n      case 8:\n        // 90° rotate left\n        newOptions.left = options.bottom\n        newOptions.top = options.left\n        newOptions.right = options.top\n        newOptions.bottom = options.right\n        break\n    }\n    if (newOptions.orientation > 4) {\n      newOptions.maxWidth = options.maxHeight\n      newOptions.maxHeight = options.maxWidth\n      newOptions.minWidth = options.minHeight\n      newOptions.minHeight = options.minWidth\n      newOptions.sourceWidth = options.sourceHeight\n      newOptions.sourceHeight = options.sourceWidth\n    }\n    return newOptions\n  }\n}))\n\n\n/***/ }),\n/* 22 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\n__webpack_require__(16);\n\n__webpack_require__(17);\n\n__webpack_require__(12);\n\n__webpack_require__(15);\n\n__webpack_require__(6);\n\n__webpack_require__(14);\n\n__webpack_require__(11);\n\n__webpack_require__(2);\n\n__webpack_require__(8);\n\n__webpack_require__(7);\n\n__webpack_require__(10);\n\n__webpack_require__(9);\n\n__webpack_require__(13);\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar Upload = function () {\n  /**\n   * Create file upload object and bind events\n   * @constructor\n   */\n  function Upload() {\n    _classCallCheck(this, Upload);\n\n    this.refresh();\n    this.bindEvents();\n    if (this.$el.length > 0) {\n      this.initFileUpload();\n    }\n\n    this.exif = {};\n    this.exif.ImageDescription = 0x010E;\n    this.exif.Artist = 0x013B;\n  }\n\n  /**\n   * Refresh elements (needed when open modal)\n   */\n\n\n  _createClass(Upload, [{\n    key: 'refresh',\n    value: function refresh() {\n      // if overlay is open at /folder_contents page, pick the overlay fileuploader\n      this.$el = $('.fileupload').last();\n    }\n\n    /**\n     * Bind events\n     */\n\n  }, {\n    key: 'bindEvents',\n    value: function bindEvents() {\n      //overlay\n      $('#plone-contentmenu-factories #multiple-files').prepOverlay({\n        subtype: 'ajax',\n        config: {\n          onLoad: $.proxy(this.initFileUpload, this),\n          onBeforeClose: this.reloadPage\n        }\n      });\n      $(document).on('drop dragover', function (e) {\n        // Prevent the default browser drop action:\n        e.preventDefault();\n      });\n      $(document).on('drop', $.proxy(this.crossSiteDrop, this));\n      $(document).on('click', '.template-upload button.cancel', $.proxy(this.cancelOne, this));\n      $(document).on('click', '.fileupload-buttonbar button.cancel', $.proxy(this.cancelAll, this));\n    }\n\n    /**\n     * Initiate fileupload plugin\n     */\n\n  }, {\n    key: 'initFileUpload',\n    value: function initFileUpload() {\n      // Overlay requires to refresh element object\n      this.refresh();\n      var options = this.$el.prop('dataset');\n      var filesRE = new RegExp('(\\\\.|\\/)(' + options.extensions + ')$', 'i');\n\n      // Map tranlations options to object\n      var translations = {};\n      for (var k in options) {\n        if (/^translations/.test(k)) {\n          var newk = k.substring('translations'.length);\n          newk = newk.charAt(0).toLowerCase() + newk.substring(1);\n          translations[newk] = options[k];\n        }\n      }\n\n      // Initialize the jQuery File Upload widget:\n      this.$el.fileupload({\n        sequentialUploads: true,\n        singleFileUploads: true\n      }).fileupload('option', {\n        // Enable image resizing, except for Android and Opera,\n        // which actually support image resizing, but fail to\n        // send Blob objects via XHR requests:\n        disableImageResize: /Android(?!.*Chrome)|Opera/.test(window.navigator.userAgent),\n        maxFileSize: options.maxFileSize,\n        acceptFileTypes: filesRE,\n        process: [{\n          action: 'load',\n          fileTypes: filesRE,\n          maxFileSize: options.maxFileSize\n        }, {\n          action: 'resize',\n          maxWidth: options.resizeMaxWidth,\n          maxHeight: options.resizeMaxHeight\n        }, {\n          action: 'save'\n        }],\n        messages: translations\n      }).on('fileuploadprocessdone', $.proxy(this.extractMetadata, this)).on('fileuploadprogress', $.proxy(this.finishUpload, this)).on('fileuploadprogressall', $.proxy(this.finishAllUpload, this));\n    }\n\n    /**\n     * Decode UTF8 string to Unicode\n     * http://stackoverflow.com/a/13691499\n     * @param {s} string - String to decode\n     */\n\n  }, {\n    key: 'decodeUTF8',\n    value: function decodeUTF8(s) {\n      return decodeURIComponent(escape(s));\n    }\n\n    /**\n     * Extract image metadata using EXIF\n     * @param {e} event - jQuery event variable\n     * @param {data} data - Image data\n     */\n\n  }, {\n    key: 'extractMetadata',\n    value: function extractMetadata(e, data) {\n      if (typeof data.exif === 'undefined') {\n        return;\n      }\n      var description = data.exif[this.exif.ImageDescription];\n      if (typeof description !== 'undefined') {\n        description = this.decodeUTF8(description);\n        $('.description', data.context[0]).val(description);\n      }\n      var artist = data.exif[this.exif.Artist];\n      if (typeof artist !== 'undefined') {\n        artist = this.decodeUTF8(artist);\n        $('.rights', data.context[0]).val(artist);\n      }\n    }\n\n    /**\n     * Check if using Bootstrap 2\n     * http://stackoverflow.com/a/14768682\n     * This method is needed as workaround for old bootstrap version conflict\n     */\n\n  }, {\n    key: 'hasBootstrap2',\n    value: function hasBootstrap2() {\n      var hasBootstrap = typeof $().modal == 'function';\n      var hasBootstrap3 = typeof $().emulateTransitionEnd === 'function';\n      return hasBootstrap && !hasBootstrap3;\n    }\n\n    /**\n     * Cancell all files added\n     * This callback is needed as workaround for old bootstrap version conflict\n     * @param {e} event - jQuery event variable\n     */\n\n  }, {\n    key: 'cancelAll',\n    value: function cancelAll(e) {\n      this.reloadPage();\n      if (!this.hasBootstrap2()) {\n        return;\n      }\n      $('.template-upload').remove();\n    }\n\n    /**\n     * Cancell one file added\n     * This callback is needed as workaround for old bootstrap version conflict\n     * @param {e} event - jQuery event variable\n     */\n\n  }, {\n    key: 'cancelOne',\n    value: function cancelOne(e) {\n      this.reloadPage();\n      if (!this.hasBootstrap2()) {\n        return;\n      }\n      $(e.target).parents('.template-upload').remove();\n    }\n\n    /**\n     * Method copied from jquery.fileupload implementation\n     * This callback is needed as workaround for old bootstrap version conflict\n     * @param {bytes} bytes - Size of file in bytes\n     */\n\n  }, {\n    key: 'formatFileSize',\n    value: function formatFileSize(bytes) {\n      if (typeof bytes !== 'number') {\n        return '';\n      }\n      if (bytes >= 1000000000) {\n        return (bytes / 1000000000).toFixed(2) + ' GB';\n      }\n      if (bytes >= 1000000) {\n        return (bytes / 1000000).toFixed(2) + ' MB';\n      }\n      return (bytes / 1000).toFixed(2) + ' KB';\n    }\n\n    /**\n     * Called when finish one file upload\n     * This callback is needed as workaround for old bootstrap version conflict\n     * @param {e} event - jQuery event variable\n     * @param {data} data - Progress data\n     */\n\n  }, {\n    key: 'finishUpload',\n    value: function finishUpload(e, data) {\n      if (!this.hasBootstrap2()) {\n        return;\n      }\n      var progress = parseInt(data.loaded / data.total * 100, 10);\n      if (progress !== 100) {\n        return;\n      }\n      // render template\n      var $html = $(data.downloadTemplate({\n        files: data.files,\n        formatFileSize: this.formatFileSize,\n        options: data\n      }));\n      // update html\n      data.context.replaceWith($html);\n      // render preview\n      $html.find('.preview').each(function (index, elm) {\n        $(elm).append(data.files[index].preview);\n      });\n    }\n\n    /**\n     * Called when finish all uploads\n     * @param {e} event - jQuery event variable\n     * @param {data} data - Progress data\n     */\n\n  }, {\n    key: 'finishAllUpload',\n    value: function finishAllUpload(e, data) {\n      var progress = parseInt(data.loaded / data.total * 100, 10);\n      if (progress !== 100) {\n        return;\n      }\n      this.reloadPage();\n    }\n\n    /**\n     * Drop image from other website page\n     * @param {e} event - jQuery event variable\n     */\n\n  }, {\n    key: 'crossSiteDrop',\n    value: function crossSiteDrop(e) {\n      var _this = this;\n\n      if (typeof e.originalEvent.dataTransfer === 'undefined') {\n        return;\n      }\n      // Google Chrome\n      var url = $(e.originalEvent.dataTransfer.getData('text/html')).filter('img').attr('src');\n      // Firefox\n      if (typeof url === 'undefined') {\n        url = e.originalEvent.dataTransfer.getData('text/x-moz-url').split('\\n')[0];\n      }\n      if (typeof url === 'undefined') {\n        return;\n      }\n      // JavaScript URL parser: https://gist.github.com/jlong/2428561\n      var parser = document.createElement('a');\n      parser.href = location.href;\n      parser.pathname = parser.pathname.replace(/\\/folder_contents*|\\/view*/, '');\n      parser.pathname = parser.pathname + '/@@jsonimageserializer';\n      $.ajax({\n        url: parser.href,\n        data: { url: url },\n        context: this,\n        success: function success(data) {\n          var img = document.createElement('img');\n          img.name = data.name;\n          img.onload = $.proxy(function (e) {\n            var canvas = document.createElement('canvas');\n            canvas.width = img.width;\n            canvas.height = img.height;\n            if (canvas.getContext && canvas.toBlob) {\n              canvas.getContext('2d').drawImage(img, 0, 0, img.width, img.height);\n              canvas.toBlob(function (that, name) {\n                return function (blob) {\n                  blob.name = name;\n                  that.$el.fileupload('add', { files: [blob] });\n                };\n              }(_this, img.name), 'image/jpeg');\n            }\n          }, _this);\n          img.src = data.data;\n        }\n      });\n    }\n    /**       \n     * Reload page when close overlay     \n     * @param {e} event - jQuery event variable       \n     */\n\n  }, {\n    key: 'reloadPage',\n    value: function reloadPage(e) {\n      // reload page if all uploads finish\n      var $uploads = $('.template-upload', this.$el);\n      if ($uploads.length === 0 || $('.progress', $uploads).attr('aria-valuenow') === '100') {\n        location.reload();\n      }\n    }\n  }]);\n\n  return Upload;\n}();\n\n$(function () {\n  new Upload();\n});\n\nmodule.exports = Upload;\n\n/***/ })\n/******/ ]);\n});\n\n\n// WEBPACK FOOTER //\n// upload.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// identity function for calling harmony imports with the correct context\n \t__webpack_require__.i = function(value) { return value; };\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/++resource++collective.upload/\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 22);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 8e3748986e7b5dd94957","/*\n * JavaScript Load Image\n * https://github.com/blueimp/JavaScript-Load-Image\n *\n * Copyright 2011, Sebastian Tschan\n * https://blueimp.net\n *\n * Licensed under the MIT license:\n * https://opensource.org/licenses/MIT\n */\n\n/* global define, URL, webkitURL, FileReader */\n\n;(function ($) {\n  'use strict'\n\n  // Loads an image for a given File object.\n  // Invokes the callback with an img or optional canvas\n  // element (if supported by the browser) as parameter:\n  function loadImage (file, callback, options) {\n    var img = document.createElement('img')\n    var url\n    img.onerror = function (event) {\n      return loadImage.onerror(img, event, file, callback, options)\n    }\n    img.onload = function (event) {\n      return loadImage.onload(img, event, file, callback, options)\n    }\n    if (typeof file === 'string') {\n      loadImage.fetchBlob(file, function (blob) {\n        if (blob) {\n          file = blob\n          url = loadImage.createObjectURL(file)\n        } else {\n          url = file\n          if (options && options.crossOrigin) {\n            img.crossOrigin = options.crossOrigin\n          }\n        }\n        img.src = url\n      }, options)\n      return img\n    } else if (loadImage.isInstanceOf('Blob', file) ||\n        // Files are also Blob instances, but some browsers\n        // (Firefox 3.6) support the File API but not Blobs:\n        loadImage.isInstanceOf('File', file)) {\n      url = img._objectURL = loadImage.createObjectURL(file)\n      if (url) {\n        img.src = url\n        return img\n      }\n      return loadImage.readFile(file, function (e) {\n        var target = e.target\n        if (target && target.result) {\n          img.src = target.result\n        } else if (callback) {\n          callback(e)\n        }\n      })\n    }\n  }\n  // The check for URL.revokeObjectURL fixes an issue with Opera 12,\n  // which provides URL.createObjectURL but doesn't properly implement it:\n  var urlAPI = (window.createObjectURL && window) ||\n                (window.URL && URL.revokeObjectURL && URL) ||\n                (window.webkitURL && webkitURL)\n\n  function revokeHelper (img, options) {\n    if (img._objectURL && !(options && options.noRevoke)) {\n      loadImage.revokeObjectURL(img._objectURL)\n      delete img._objectURL\n    }\n  }\n\n  // If the callback given to this function returns a blob, it is used as image\n  // source instead of the original url and overrides the file argument used in\n  // the onload and onerror event callbacks:\n  loadImage.fetchBlob = function (url, callback, options) {\n    callback()\n  }\n\n  loadImage.isInstanceOf = function (type, obj) {\n    // Cross-frame instanceof check\n    return Object.prototype.toString.call(obj) === '[object ' + type + ']'\n  }\n\n  loadImage.transform = function (img, options, callback, file, data) {\n    callback(img, data)\n  }\n\n  loadImage.onerror = function (img, event, file, callback, options) {\n    revokeHelper(img, options)\n    if (callback) {\n      callback.call(img, event)\n    }\n  }\n\n  loadImage.onload = function (img, event, file, callback, options) {\n    revokeHelper(img, options)\n    if (callback) {\n      loadImage.transform(img, options, callback, file, {})\n    }\n  }\n\n  loadImage.createObjectURL = function (file) {\n    return urlAPI ? urlAPI.createObjectURL(file) : false\n  }\n\n  loadImage.revokeObjectURL = function (url) {\n    return urlAPI ? urlAPI.revokeObjectURL(url) : false\n  }\n\n  // Loads a given File object via FileReader interface,\n  // invokes the callback with the event object (load or error).\n  // The result can be read via event.target.result:\n  loadImage.readFile = function (file, callback, method) {\n    if (window.FileReader) {\n      var fileReader = new FileReader()\n      fileReader.onload = fileReader.onerror = callback\n      method = method || 'readAsDataURL'\n      if (fileReader[method]) {\n        fileReader[method](file)\n        return fileReader\n      }\n    }\n    return false\n  }\n\n  if (typeof define === 'function' && define.amd) {\n    define(function () {\n      return loadImage\n    })\n  } else if (typeof module === 'object' && module.exports) {\n    module.exports = loadImage\n  } else {\n    $.loadImage = loadImage\n  }\n}(window))\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/blueimp-load-image/js/load-image.js\n// module id = 0\n// module chunks = 0","module.exports = __WEBPACK_EXTERNAL_MODULE_1__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"jQuery\"\n// module id = 1\n// module chunks = 0","/*\n * jQuery File Upload Processing Plugin\n * https://github.com/blueimp/jQuery-File-Upload\n *\n * Copyright 2012, Sebastian Tschan\n * https://blueimp.net\n *\n * Licensed under the MIT license:\n * https://opensource.org/licenses/MIT\n */\n\n/* jshint nomen:false */\n/* global define, require, window */\n\n;(function (factory) {\n    'use strict';\n    if (typeof define === 'function' && define.amd) {\n        // Register as an anonymous AMD module:\n        define([\n            'jquery',\n            './jquery.fileupload'\n        ], factory);\n    } else if (typeof exports === 'object') {\n        // Node/CommonJS:\n        factory(\n            require('jquery'),\n            require('./jquery.fileupload')\n        );\n    } else {\n        // Browser globals:\n        factory(\n            window.jQuery\n        );\n    }\n}(function ($) {\n    'use strict';\n\n    var originalAdd = $.blueimp.fileupload.prototype.options.add;\n\n    // The File Upload Processing plugin extends the fileupload widget\n    // with file processing functionality:\n    $.widget('blueimp.fileupload', $.blueimp.fileupload, {\n\n        options: {\n            // The list of processing actions:\n            processQueue: [\n                /*\n                {\n                    action: 'log',\n                    type: 'debug'\n                }\n                */\n            ],\n            add: function (e, data) {\n                var $this = $(this);\n                data.process(function () {\n                    return $this.fileupload('process', data);\n                });\n                originalAdd.call(this, e, data);\n            }\n        },\n\n        processActions: {\n            /*\n            log: function (data, options) {\n                console[options.type](\n                    'Processing \"' + data.files[data.index].name + '\"'\n                );\n            }\n            */\n        },\n\n        _processFile: function (data, originalData) {\n            var that = this,\n                dfd = $.Deferred().resolveWith(that, [data]),\n                chain = dfd.promise();\n            this._trigger('process', null, data);\n            $.each(data.processQueue, function (i, settings) {\n                var func = function (data) {\n                    if (originalData.errorThrown) {\n                        return $.Deferred()\n                                .rejectWith(that, [originalData]).promise();\n                    }\n                    return that.processActions[settings.action].call(\n                        that,\n                        data,\n                        settings\n                    );\n                };\n                chain = chain.then(func, settings.always && func);\n            });\n            chain\n                .done(function () {\n                    that._trigger('processdone', null, data);\n                    that._trigger('processalways', null, data);\n                })\n                .fail(function () {\n                    that._trigger('processfail', null, data);\n                    that._trigger('processalways', null, data);\n                });\n            return chain;\n        },\n\n        // Replaces the settings of each processQueue item that\n        // are strings starting with an \"@\", using the remaining\n        // substring as key for the option map,\n        // e.g. \"@autoUpload\" is replaced with options.autoUpload:\n        _transformProcessQueue: function (options) {\n            var processQueue = [];\n            $.each(options.processQueue, function () {\n                var settings = {},\n                    action = this.action,\n                    prefix = this.prefix === true ? action : this.prefix;\n                $.each(this, function (key, value) {\n                    if ($.type(value) === 'string' &&\n                            value.charAt(0) === '@') {\n                        settings[key] = options[\n                            value.slice(1) || (prefix ? prefix +\n                                key.charAt(0).toUpperCase() + key.slice(1) : key)\n                        ];\n                    } else {\n                        settings[key] = value;\n                    }\n\n                });\n                processQueue.push(settings);\n            });\n            options.processQueue = processQueue;\n        },\n\n        // Returns the number of files currently in the processsing queue:\n        processing: function () {\n            return this._processing;\n        },\n\n        // Processes the files given as files property of the data parameter,\n        // returns a Promise object that allows to bind callbacks:\n        process: function (data) {\n            var that = this,\n                options = $.extend({}, this.options, data);\n            if (options.processQueue && options.processQueue.length) {\n                this._transformProcessQueue(options);\n                if (this._processing === 0) {\n                    this._trigger('processstart');\n                }\n                $.each(data.files, function (index) {\n                    var opts = index ? $.extend({}, options) : options,\n                        func = function () {\n                            if (data.errorThrown) {\n                                return $.Deferred()\n                                        .rejectWith(that, [data]).promise();\n                            }\n                            return that._processFile(opts, data);\n                        };\n                    opts.index = index;\n                    that._processing += 1;\n                    that._processingQueue = that._processingQueue.then(func, func)\n                        .always(function () {\n                            that._processing -= 1;\n                            if (that._processing === 0) {\n                                that._trigger('processstop');\n                            }\n                        });\n                });\n            }\n            return this._processingQueue;\n        },\n\n        _create: function () {\n            this._super();\n            this._processing = 0;\n            this._processingQueue = $.Deferred().resolveWith(this)\n                .promise();\n        }\n\n    });\n\n}));\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/blueimp-file-upload/js/jquery.fileupload-process.js\n// module id = 2\n// module chunks = 0","/*\n * JavaScript Load Image Meta\n * https://github.com/blueimp/JavaScript-Load-Image\n *\n * Copyright 2013, Sebastian Tschan\n * https://blueimp.net\n *\n * Image meta data handling implementation\n * based on the help and contribution of\n * Achim Stöhr.\n *\n * Licensed under the MIT license:\n * https://opensource.org/licenses/MIT\n */\n\n/* global define, Blob */\n\n;(function (factory) {\n  'use strict'\n  if (typeof define === 'function' && define.amd) {\n    // Register as an anonymous AMD module:\n    define(['./load-image'], factory)\n  } else if (typeof module === 'object' && module.exports) {\n    factory(require('./load-image'))\n  } else {\n    // Browser globals:\n    factory(window.loadImage)\n  }\n}(function (loadImage) {\n  'use strict'\n\n  var hasblobSlice = window.Blob && (Blob.prototype.slice ||\n  Blob.prototype.webkitSlice || Blob.prototype.mozSlice)\n\n  loadImage.blobSlice = hasblobSlice && function () {\n    var slice = this.slice || this.webkitSlice || this.mozSlice\n    return slice.apply(this, arguments)\n  }\n\n  loadImage.metaDataParsers = {\n    jpeg: {\n      0xffe1: [] // APP1 marker\n    }\n  }\n\n  // Parses image meta data and calls the callback with an object argument\n  // with the following properties:\n  // * imageHead: The complete image head as ArrayBuffer (Uint8Array for IE10)\n  // The options arguments accepts an object and supports the following properties:\n  // * maxMetaDataSize: Defines the maximum number of bytes to parse.\n  // * disableImageHead: Disables creating the imageHead property.\n  loadImage.parseMetaData = function (file, callback, options, data) {\n    options = options || {}\n    data = data || {}\n    var that = this\n    // 256 KiB should contain all EXIF/ICC/IPTC segments:\n    var maxMetaDataSize = options.maxMetaDataSize || 262144\n    var noMetaData = !(window.DataView && file && file.size >= 12 &&\n                      file.type === 'image/jpeg' && loadImage.blobSlice)\n    if (noMetaData || !loadImage.readFile(\n        loadImage.blobSlice.call(file, 0, maxMetaDataSize),\n        function (e) {\n          if (e.target.error) {\n            // FileReader error\n            console.log(e.target.error)\n            callback(data)\n            return\n          }\n          // Note on endianness:\n          // Since the marker and length bytes in JPEG files are always\n          // stored in big endian order, we can leave the endian parameter\n          // of the DataView methods undefined, defaulting to big endian.\n          var buffer = e.target.result\n          var dataView = new DataView(buffer)\n          var offset = 2\n          var maxOffset = dataView.byteLength - 4\n          var headLength = offset\n          var markerBytes\n          var markerLength\n          var parsers\n          var i\n          // Check for the JPEG marker (0xffd8):\n          if (dataView.getUint16(0) === 0xffd8) {\n            while (offset < maxOffset) {\n              markerBytes = dataView.getUint16(offset)\n              // Search for APPn (0xffeN) and COM (0xfffe) markers,\n              // which contain application-specific meta-data like\n              // Exif, ICC and IPTC data and text comments:\n              if ((markerBytes >= 0xffe0 && markerBytes <= 0xffef) ||\n                markerBytes === 0xfffe) {\n                // The marker bytes (2) are always followed by\n                // the length bytes (2), indicating the length of the\n                // marker segment, which includes the length bytes,\n                // but not the marker bytes, so we add 2:\n                markerLength = dataView.getUint16(offset + 2) + 2\n                if (offset + markerLength > dataView.byteLength) {\n                  console.log('Invalid meta data: Invalid segment size.')\n                  break\n                }\n                parsers = loadImage.metaDataParsers.jpeg[markerBytes]\n                if (parsers) {\n                  for (i = 0; i < parsers.length; i += 1) {\n                    parsers[i].call(\n                      that,\n                      dataView,\n                      offset,\n                      markerLength,\n                      data,\n                      options\n                    )\n                  }\n                }\n                offset += markerLength\n                headLength = offset\n              } else {\n                // Not an APPn or COM marker, probably safe to\n                // assume that this is the end of the meta data\n                break\n              }\n            }\n            // Meta length must be longer than JPEG marker (2)\n            // plus APPn marker (2), followed by length bytes (2):\n            if (!options.disableImageHead && headLength > 6) {\n              if (buffer.slice) {\n                data.imageHead = buffer.slice(0, headLength)\n              } else {\n                // Workaround for IE10, which does not yet\n                // support ArrayBuffer.slice:\n                data.imageHead = new Uint8Array(buffer)\n                  .subarray(0, headLength)\n              }\n            }\n          } else {\n            console.log('Invalid JPEG file: Missing JPEG marker.')\n          }\n          callback(data)\n        },\n        'readAsArrayBuffer'\n      )) {\n      callback(data)\n    }\n  }\n\n  // Determines if meta data should be loaded automatically:\n  loadImage.hasMetaOption = function (options) {\n    return options && options.meta\n  }\n\n  var originalTransform = loadImage.transform\n  loadImage.transform = function (img, options, callback, file, data) {\n    if (loadImage.hasMetaOption(options)) {\n      loadImage.parseMetaData(file, function (data) {\n        originalTransform.call(loadImage, img, options, callback, file, data)\n      }, options, data)\n    } else {\n      originalTransform.apply(loadImage, arguments)\n    }\n  }\n}))\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/blueimp-load-image/js/load-image-meta.js\n// module id = 3\n// module chunks = 0","/*\n * JavaScript Load Image Exif Parser\n * https://github.com/blueimp/JavaScript-Load-Image\n *\n * Copyright 2013, Sebastian Tschan\n * https://blueimp.net\n *\n * Licensed under the MIT license:\n * https://opensource.org/licenses/MIT\n */\n\n/* global define */\n\n;(function (factory) {\n  'use strict'\n  if (typeof define === 'function' && define.amd) {\n    // Register as an anonymous AMD module:\n    define(['./load-image', './load-image-meta'], factory)\n  } else if (typeof module === 'object' && module.exports) {\n    factory(require('./load-image'), require('./load-image-meta'))\n  } else {\n    // Browser globals:\n    factory(window.loadImage)\n  }\n}(function (loadImage) {\n  'use strict'\n\n  loadImage.ExifMap = function () {\n    return this\n  }\n\n  loadImage.ExifMap.prototype.map = {\n    'Orientation': 0x0112\n  }\n\n  loadImage.ExifMap.prototype.get = function (id) {\n    return this[id] || this[this.map[id]]\n  }\n\n  loadImage.getExifThumbnail = function (dataView, offset, length) {\n    var hexData,\n      i,\n      b\n    if (!length || offset + length > dataView.byteLength) {\n      console.log('Invalid Exif data: Invalid thumbnail data.')\n      return\n    }\n    hexData = []\n    for (i = 0; i < length; i += 1) {\n      b = dataView.getUint8(offset + i)\n      hexData.push((b < 16 ? '0' : '') + b.toString(16))\n    }\n    return 'data:image/jpeg,%' + hexData.join('%')\n  }\n\n  loadImage.exifTagTypes = {\n    // byte, 8-bit unsigned int:\n    1: {\n      getValue: function (dataView, dataOffset) {\n        return dataView.getUint8(dataOffset)\n      },\n      size: 1\n    },\n    // ascii, 8-bit byte:\n    2: {\n      getValue: function (dataView, dataOffset) {\n        return String.fromCharCode(dataView.getUint8(dataOffset))\n      },\n      size: 1,\n      ascii: true\n    },\n    // short, 16 bit int:\n    3: {\n      getValue: function (dataView, dataOffset, littleEndian) {\n        return dataView.getUint16(dataOffset, littleEndian)\n      },\n      size: 2\n    },\n    // long, 32 bit int:\n    4: {\n      getValue: function (dataView, dataOffset, littleEndian) {\n        return dataView.getUint32(dataOffset, littleEndian)\n      },\n      size: 4\n    },\n    // rational = two long values, first is numerator, second is denominator:\n    5: {\n      getValue: function (dataView, dataOffset, littleEndian) {\n        return dataView.getUint32(dataOffset, littleEndian) /\n        dataView.getUint32(dataOffset + 4, littleEndian)\n      },\n      size: 8\n    },\n    // slong, 32 bit signed int:\n    9: {\n      getValue: function (dataView, dataOffset, littleEndian) {\n        return dataView.getInt32(dataOffset, littleEndian)\n      },\n      size: 4\n    },\n    // srational, two slongs, first is numerator, second is denominator:\n    10: {\n      getValue: function (dataView, dataOffset, littleEndian) {\n        return dataView.getInt32(dataOffset, littleEndian) /\n        dataView.getInt32(dataOffset + 4, littleEndian)\n      },\n      size: 8\n    }\n  }\n  // undefined, 8-bit byte, value depending on field:\n  loadImage.exifTagTypes[7] = loadImage.exifTagTypes[1]\n\n  loadImage.getExifValue = function (dataView, tiffOffset, offset, type, length, littleEndian) {\n    var tagType = loadImage.exifTagTypes[type]\n    var tagSize\n    var dataOffset\n    var values\n    var i\n    var str\n    var c\n    if (!tagType) {\n      console.log('Invalid Exif data: Invalid tag type.')\n      return\n    }\n    tagSize = tagType.size * length\n    // Determine if the value is contained in the dataOffset bytes,\n    // or if the value at the dataOffset is a pointer to the actual data:\n    dataOffset = tagSize > 4\n      ? tiffOffset + dataView.getUint32(offset + 8, littleEndian)\n      : (offset + 8)\n    if (dataOffset + tagSize > dataView.byteLength) {\n      console.log('Invalid Exif data: Invalid data offset.')\n      return\n    }\n    if (length === 1) {\n      return tagType.getValue(dataView, dataOffset, littleEndian)\n    }\n    values = []\n    for (i = 0; i < length; i += 1) {\n      values[i] = tagType.getValue(dataView, dataOffset + i * tagType.size, littleEndian)\n    }\n    if (tagType.ascii) {\n      str = ''\n      // Concatenate the chars:\n      for (i = 0; i < values.length; i += 1) {\n        c = values[i]\n        // Ignore the terminating NULL byte(s):\n        if (c === '\\u0000') {\n          break\n        }\n        str += c\n      }\n      return str\n    }\n    return values\n  }\n\n  loadImage.parseExifTag = function (dataView, tiffOffset, offset, littleEndian, data) {\n    var tag = dataView.getUint16(offset, littleEndian)\n    data.exif[tag] = loadImage.getExifValue(\n      dataView,\n      tiffOffset,\n      offset,\n      dataView.getUint16(offset + 2, littleEndian), // tag type\n      dataView.getUint32(offset + 4, littleEndian), // tag length\n      littleEndian\n    )\n  }\n\n  loadImage.parseExifTags = function (dataView, tiffOffset, dirOffset, littleEndian, data) {\n    var tagsNumber,\n      dirEndOffset,\n      i\n    if (dirOffset + 6 > dataView.byteLength) {\n      console.log('Invalid Exif data: Invalid directory offset.')\n      return\n    }\n    tagsNumber = dataView.getUint16(dirOffset, littleEndian)\n    dirEndOffset = dirOffset + 2 + 12 * tagsNumber\n    if (dirEndOffset + 4 > dataView.byteLength) {\n      console.log('Invalid Exif data: Invalid directory size.')\n      return\n    }\n    for (i = 0; i < tagsNumber; i += 1) {\n      this.parseExifTag(\n        dataView,\n        tiffOffset,\n        dirOffset + 2 + 12 * i, // tag offset\n        littleEndian,\n        data\n      )\n    }\n    // Return the offset to the next directory:\n    return dataView.getUint32(dirEndOffset, littleEndian)\n  }\n\n  loadImage.parseExifData = function (dataView, offset, length, data, options) {\n    if (options.disableExif) {\n      return\n    }\n    var tiffOffset = offset + 10\n    var littleEndian\n    var dirOffset\n    var thumbnailData\n    // Check for the ASCII code for \"Exif\" (0x45786966):\n    if (dataView.getUint32(offset + 4) !== 0x45786966) {\n      // No Exif data, might be XMP data instead\n      return\n    }\n    if (tiffOffset + 8 > dataView.byteLength) {\n      console.log('Invalid Exif data: Invalid segment size.')\n      return\n    }\n    // Check for the two null bytes:\n    if (dataView.getUint16(offset + 8) !== 0x0000) {\n      console.log('Invalid Exif data: Missing byte alignment offset.')\n      return\n    }\n    // Check the byte alignment:\n    switch (dataView.getUint16(tiffOffset)) {\n      case 0x4949:\n        littleEndian = true\n        break\n      case 0x4D4D:\n        littleEndian = false\n        break\n      default:\n        console.log('Invalid Exif data: Invalid byte alignment marker.')\n        return\n    }\n    // Check for the TIFF tag marker (0x002A):\n    if (dataView.getUint16(tiffOffset + 2, littleEndian) !== 0x002A) {\n      console.log('Invalid Exif data: Missing TIFF marker.')\n      return\n    }\n    // Retrieve the directory offset bytes, usually 0x00000008 or 8 decimal:\n    dirOffset = dataView.getUint32(tiffOffset + 4, littleEndian)\n    // Create the exif object to store the tags:\n    data.exif = new loadImage.ExifMap()\n    // Parse the tags of the main image directory and retrieve the\n    // offset to the next directory, usually the thumbnail directory:\n    dirOffset = loadImage.parseExifTags(\n      dataView,\n      tiffOffset,\n      tiffOffset + dirOffset,\n      littleEndian,\n      data\n    )\n    if (dirOffset && !options.disableExifThumbnail) {\n      thumbnailData = {exif: {}}\n      dirOffset = loadImage.parseExifTags(\n        dataView,\n        tiffOffset,\n        tiffOffset + dirOffset,\n        littleEndian,\n        thumbnailData\n      )\n      // Check for JPEG Thumbnail offset:\n      if (thumbnailData.exif[0x0201]) {\n        data.exif.Thumbnail = loadImage.getExifThumbnail(\n          dataView,\n          tiffOffset + thumbnailData.exif[0x0201],\n          thumbnailData.exif[0x0202] // Thumbnail data length\n        )\n      }\n    }\n    // Check for Exif Sub IFD Pointer:\n    if (data.exif[0x8769] && !options.disableExifSub) {\n      loadImage.parseExifTags(\n        dataView,\n        tiffOffset,\n        tiffOffset + data.exif[0x8769], // directory offset\n        littleEndian,\n        data\n      )\n    }\n    // Check for GPS Info IFD Pointer:\n    if (data.exif[0x8825] && !options.disableExifGps) {\n      loadImage.parseExifTags(\n        dataView,\n        tiffOffset,\n        tiffOffset + data.exif[0x8825], // directory offset\n        littleEndian,\n        data\n      )\n    }\n  }\n\n  // Registers the Exif parser for the APP1 JPEG meta data segment:\n  loadImage.metaDataParsers.jpeg[0xffe1].push(loadImage.parseExifData)\n\n  // Adds the following properties to the parseMetaData callback data:\n  // * exif: The exif tags, parsed by the parseExifData method\n\n  // Adds the following options to the parseMetaData method:\n  // * disableExif: Disables Exif parsing.\n  // * disableExifThumbnail: Disables parsing of the Exif Thumbnail.\n  // * disableExifSub: Disables parsing of the Exif Sub IFD.\n  // * disableExifGps: Disables parsing of the Exif GPS Info IFD.\n}))\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/blueimp-load-image/js/load-image-exif.js\n// module id = 4\n// module chunks = 0","/*\n * JavaScript Load Image Scaling\n * https://github.com/blueimp/JavaScript-Load-Image\n *\n * Copyright 2011, Sebastian Tschan\n * https://blueimp.net\n *\n * Licensed under the MIT license:\n * https://opensource.org/licenses/MIT\n */\n\n/* global define */\n\n;(function (factory) {\n  'use strict'\n  if (typeof define === 'function' && define.amd) {\n    // Register as an anonymous AMD module:\n    define(['./load-image'], factory)\n  } else if (typeof module === 'object' && module.exports) {\n    factory(require('./load-image'))\n  } else {\n    // Browser globals:\n    factory(window.loadImage)\n  }\n}(function (loadImage) {\n  'use strict'\n\n  var originalTransform = loadImage.transform\n\n  loadImage.transform = function (img, options, callback, file, data) {\n    originalTransform.call(\n      loadImage,\n      loadImage.scale(img, options, data),\n      options,\n      callback,\n      file,\n      data\n    )\n  }\n\n  // Transform image coordinates, allows to override e.g.\n  // the canvas orientation based on the orientation option,\n  // gets canvas, options passed as arguments:\n  loadImage.transformCoordinates = function () {\n    return\n  }\n\n  // Returns transformed options, allows to override e.g.\n  // maxWidth, maxHeight and crop options based on the aspectRatio.\n  // gets img, options passed as arguments:\n  loadImage.getTransformedOptions = function (img, options) {\n    var aspectRatio = options.aspectRatio\n    var newOptions\n    var i\n    var width\n    var height\n    if (!aspectRatio) {\n      return options\n    }\n    newOptions = {}\n    for (i in options) {\n      if (options.hasOwnProperty(i)) {\n        newOptions[i] = options[i]\n      }\n    }\n    newOptions.crop = true\n    width = img.naturalWidth || img.width\n    height = img.naturalHeight || img.height\n    if (width / height > aspectRatio) {\n      newOptions.maxWidth = height * aspectRatio\n      newOptions.maxHeight = height\n    } else {\n      newOptions.maxWidth = width\n      newOptions.maxHeight = width / aspectRatio\n    }\n    return newOptions\n  }\n\n  // Canvas render method, allows to implement a different rendering algorithm:\n  loadImage.renderImageToCanvas = function (\n    canvas,\n    img,\n    sourceX,\n    sourceY,\n    sourceWidth,\n    sourceHeight,\n    destX,\n    destY,\n    destWidth,\n    destHeight\n  ) {\n    canvas.getContext('2d').drawImage(\n      img,\n      sourceX,\n      sourceY,\n      sourceWidth,\n      sourceHeight,\n      destX,\n      destY,\n      destWidth,\n      destHeight\n    )\n    return canvas\n  }\n\n  // Determines if the target image should be a canvas element:\n  loadImage.hasCanvasOption = function (options) {\n    return options.canvas || options.crop || !!options.aspectRatio\n  }\n\n  // Scales and/or crops the given image (img or canvas HTML element)\n  // using the given options.\n  // Returns a canvas object if the browser supports canvas\n  // and the hasCanvasOption method returns true or a canvas\n  // object is passed as image, else the scaled image:\n  loadImage.scale = function (img, options, data) {\n    options = options || {}\n    var canvas = document.createElement('canvas')\n    var useCanvas = img.getContext ||\n                    (loadImage.hasCanvasOption(options) && canvas.getContext)\n    var width = img.naturalWidth || img.width\n    var height = img.naturalHeight || img.height\n    var destWidth = width\n    var destHeight = height\n    var maxWidth\n    var maxHeight\n    var minWidth\n    var minHeight\n    var sourceWidth\n    var sourceHeight\n    var sourceX\n    var sourceY\n    var pixelRatio\n    var downsamplingRatio\n    var tmp\n    function scaleUp () {\n      var scale = Math.max(\n        (minWidth || destWidth) / destWidth,\n        (minHeight || destHeight) / destHeight\n      )\n      if (scale > 1) {\n        destWidth *= scale\n        destHeight *= scale\n      }\n    }\n    function scaleDown () {\n      var scale = Math.min(\n        (maxWidth || destWidth) / destWidth,\n        (maxHeight || destHeight) / destHeight\n      )\n      if (scale < 1) {\n        destWidth *= scale\n        destHeight *= scale\n      }\n    }\n    if (useCanvas) {\n      options = loadImage.getTransformedOptions(img, options, data)\n      sourceX = options.left || 0\n      sourceY = options.top || 0\n      if (options.sourceWidth) {\n        sourceWidth = options.sourceWidth\n        if (options.right !== undefined && options.left === undefined) {\n          sourceX = width - sourceWidth - options.right\n        }\n      } else {\n        sourceWidth = width - sourceX - (options.right || 0)\n      }\n      if (options.sourceHeight) {\n        sourceHeight = options.sourceHeight\n        if (options.bottom !== undefined && options.top === undefined) {\n          sourceY = height - sourceHeight - options.bottom\n        }\n      } else {\n        sourceHeight = height - sourceY - (options.bottom || 0)\n      }\n      destWidth = sourceWidth\n      destHeight = sourceHeight\n    }\n    maxWidth = options.maxWidth\n    maxHeight = options.maxHeight\n    minWidth = options.minWidth\n    minHeight = options.minHeight\n    if (useCanvas && maxWidth && maxHeight && options.crop) {\n      destWidth = maxWidth\n      destHeight = maxHeight\n      tmp = sourceWidth / sourceHeight - maxWidth / maxHeight\n      if (tmp < 0) {\n        sourceHeight = maxHeight * sourceWidth / maxWidth\n        if (options.top === undefined && options.bottom === undefined) {\n          sourceY = (height - sourceHeight) / 2\n        }\n      } else if (tmp > 0) {\n        sourceWidth = maxWidth * sourceHeight / maxHeight\n        if (options.left === undefined && options.right === undefined) {\n          sourceX = (width - sourceWidth) / 2\n        }\n      }\n    } else {\n      if (options.contain || options.cover) {\n        minWidth = maxWidth = maxWidth || minWidth\n        minHeight = maxHeight = maxHeight || minHeight\n      }\n      if (options.cover) {\n        scaleDown()\n        scaleUp()\n      } else {\n        scaleUp()\n        scaleDown()\n      }\n    }\n    if (useCanvas) {\n      pixelRatio = options.pixelRatio\n      if (pixelRatio > 1) {\n        canvas.style.width = destWidth + 'px'\n        canvas.style.height = destHeight + 'px'\n        destWidth *= pixelRatio\n        destHeight *= pixelRatio\n        canvas.getContext('2d').scale(pixelRatio, pixelRatio)\n      }\n      downsamplingRatio = options.downsamplingRatio\n      if (downsamplingRatio > 0 && downsamplingRatio < 1 &&\n            destWidth < sourceWidth && destHeight < sourceHeight) {\n        while (sourceWidth * downsamplingRatio > destWidth) {\n          canvas.width = sourceWidth * downsamplingRatio\n          canvas.height = sourceHeight * downsamplingRatio\n          loadImage.renderImageToCanvas(\n            canvas,\n            img,\n            sourceX,\n            sourceY,\n            sourceWidth,\n            sourceHeight,\n            0,\n            0,\n            canvas.width,\n            canvas.height\n          )\n          sourceX = 0\n          sourceY = 0\n          sourceWidth = canvas.width\n          sourceHeight = canvas.height\n          img = document.createElement('canvas')\n          img.width = sourceWidth\n          img.height = sourceHeight\n          loadImage.renderImageToCanvas(\n            img,\n            canvas,\n            0,\n            0,\n            sourceWidth,\n            sourceHeight,\n            0,\n            0,\n            sourceWidth,\n            sourceHeight\n          )\n        }\n      }\n      canvas.width = destWidth\n      canvas.height = destHeight\n      loadImage.transformCoordinates(\n        canvas,\n        options\n      )\n      return loadImage.renderImageToCanvas(\n        canvas,\n        img,\n        sourceX,\n        sourceY,\n        sourceWidth,\n        sourceHeight,\n        0,\n        0,\n        destWidth,\n        destHeight\n      )\n    }\n    img.width = destWidth\n    img.height = destHeight\n    return img\n  }\n}))\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/blueimp-load-image/js/load-image-scale.js\n// module id = 5\n// module chunks = 0","/*\n * JavaScript Canvas to Blob\n * https://github.com/blueimp/JavaScript-Canvas-to-Blob\n *\n * Copyright 2012, Sebastian Tschan\n * https://blueimp.net\n *\n * Licensed under the MIT license:\n * http://www.opensource.org/licenses/MIT\n *\n * Based on stackoverflow user Stoive's code snippet:\n * http://stackoverflow.com/q/4998908\n */\n\n/* global atob, Blob, define */\n\n;(function (window) {\n  'use strict'\n\n  var CanvasPrototype = window.HTMLCanvasElement &&\n                          window.HTMLCanvasElement.prototype\n  var hasBlobConstructor = window.Blob && (function () {\n    try {\n      return Boolean(new Blob())\n    } catch (e) {\n      return false\n    }\n  }())\n  var hasArrayBufferViewSupport = hasBlobConstructor && window.Uint8Array &&\n    (function () {\n      try {\n        return new Blob([new Uint8Array(100)]).size === 100\n      } catch (e) {\n        return false\n      }\n    }())\n  var BlobBuilder = window.BlobBuilder || window.WebKitBlobBuilder ||\n                      window.MozBlobBuilder || window.MSBlobBuilder\n  var dataURIPattern = /^data:((.*?)(;charset=.*?)?)(;base64)?,/\n  var dataURLtoBlob = (hasBlobConstructor || BlobBuilder) && window.atob &&\n    window.ArrayBuffer && window.Uint8Array &&\n    function (dataURI) {\n      var matches,\n        mediaType,\n        isBase64,\n        dataString,\n        byteString,\n        arrayBuffer,\n        intArray,\n        i,\n        bb\n      // Parse the dataURI components as per RFC 2397\n      matches = dataURI.match(dataURIPattern)\n      if (!matches) {\n        throw new Error('invalid data URI')\n      }\n      // Default to text/plain;charset=US-ASCII\n      mediaType = matches[2]\n        ? matches[1]\n        : 'text/plain' + (matches[3] || ';charset=US-ASCII')\n      isBase64 = !!matches[4]\n      dataString = dataURI.slice(matches[0].length)\n      if (isBase64) {\n        // Convert base64 to raw binary data held in a string:\n        byteString = atob(dataString)\n      } else {\n        // Convert base64/URLEncoded data component to raw binary:\n        byteString = decodeURIComponent(dataString)\n      }\n      // Write the bytes of the string to an ArrayBuffer:\n      arrayBuffer = new ArrayBuffer(byteString.length)\n      intArray = new Uint8Array(arrayBuffer)\n      for (i = 0; i < byteString.length; i += 1) {\n        intArray[i] = byteString.charCodeAt(i)\n      }\n      // Write the ArrayBuffer (or ArrayBufferView) to a blob:\n      if (hasBlobConstructor) {\n        return new Blob(\n          [hasArrayBufferViewSupport ? intArray : arrayBuffer],\n          {type: mediaType}\n        )\n      }\n      bb = new BlobBuilder()\n      bb.append(arrayBuffer)\n      return bb.getBlob(mediaType)\n    }\n  if (window.HTMLCanvasElement && !CanvasPrototype.toBlob) {\n    if (CanvasPrototype.mozGetAsFile) {\n      CanvasPrototype.toBlob = function (callback, type, quality) {\n        if (quality && CanvasPrototype.toDataURL && dataURLtoBlob) {\n          callback(dataURLtoBlob(this.toDataURL(type, quality)))\n        } else {\n          callback(this.mozGetAsFile('blob', type))\n        }\n      }\n    } else if (CanvasPrototype.toDataURL && dataURLtoBlob) {\n      CanvasPrototype.toBlob = function (callback, type, quality) {\n        callback(dataURLtoBlob(this.toDataURL(type, quality)))\n      }\n    }\n  }\n  if (typeof define === 'function' && define.amd) {\n    define(function () {\n      return dataURLtoBlob\n    })\n  } else if (typeof module === 'object' && module.exports) {\n    module.exports = dataURLtoBlob\n  } else {\n    window.dataURLtoBlob = dataURLtoBlob\n  }\n}(window))\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/blueimp-canvas-to-blob/js/canvas-to-blob.js\n// module id = 6\n// module chunks = 0","/*\n * jQuery File Upload Audio Preview Plugin\n * https://github.com/blueimp/jQuery-File-Upload\n *\n * Copyright 2013, Sebastian Tschan\n * https://blueimp.net\n *\n * Licensed under the MIT license:\n * https://opensource.org/licenses/MIT\n */\n\n/* jshint nomen:false */\n/* global define, require, window, document */\n\n;(function (factory) {\n    'use strict';\n    if (typeof define === 'function' && define.amd) {\n        // Register as an anonymous AMD module:\n        define([\n            'jquery',\n            'load-image',\n            './jquery.fileupload-process'\n        ], factory);\n    } else if (typeof exports === 'object') {\n        // Node/CommonJS:\n        factory(\n            require('jquery'),\n            require('blueimp-load-image/js/load-image'),\n            require('./jquery.fileupload-process')\n        );\n    } else {\n        // Browser globals:\n        factory(\n            window.jQuery,\n            window.loadImage\n        );\n    }\n}(function ($, loadImage) {\n    'use strict';\n\n    // Prepend to the default processQueue:\n    $.blueimp.fileupload.prototype.options.processQueue.unshift(\n        {\n            action: 'loadAudio',\n            // Use the action as prefix for the \"@\" options:\n            prefix: true,\n            fileTypes: '@',\n            maxFileSize: '@',\n            disabled: '@disableAudioPreview'\n        },\n        {\n            action: 'setAudio',\n            name: '@audioPreviewName',\n            disabled: '@disableAudioPreview'\n        }\n    );\n\n    // The File Upload Audio Preview plugin extends the fileupload widget\n    // with audio preview functionality:\n    $.widget('blueimp.fileupload', $.blueimp.fileupload, {\n\n        options: {\n            // The regular expression for the types of audio files to load,\n            // matched against the file type:\n            loadAudioFileTypes: /^audio\\/.*$/\n        },\n\n        _audioElement: document.createElement('audio'),\n\n        processActions: {\n\n            // Loads the audio file given via data.files and data.index\n            // as audio element if the browser supports playing it.\n            // Accepts the options fileTypes (regular expression)\n            // and maxFileSize (integer) to limit the files to load:\n            loadAudio: function (data, options) {\n                if (options.disabled) {\n                    return data;\n                }\n                var file = data.files[data.index],\n                    url,\n                    audio;\n                if (this._audioElement.canPlayType &&\n                        this._audioElement.canPlayType(file.type) &&\n                        ($.type(options.maxFileSize) !== 'number' ||\n                            file.size <= options.maxFileSize) &&\n                        (!options.fileTypes ||\n                            options.fileTypes.test(file.type))) {\n                    url = loadImage.createObjectURL(file);\n                    if (url) {\n                        audio = this._audioElement.cloneNode(false);\n                        audio.src = url;\n                        audio.controls = true;\n                        data.audio = audio;\n                        return data;\n                    }\n                }\n                return data;\n            },\n\n            // Sets the audio element as a property of the file object:\n            setAudio: function (data, options) {\n                if (data.audio && !options.disabled) {\n                    data.files[data.index][options.name || 'preview'] = data.audio;\n                }\n                return data;\n            }\n\n        }\n\n    });\n\n}));\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/blueimp-file-upload/js/jquery.fileupload-audio.js\n// module id = 7\n// module chunks = 0","/*\n * jQuery File Upload Image Preview & Resize Plugin\n * https://github.com/blueimp/jQuery-File-Upload\n *\n * Copyright 2013, Sebastian Tschan\n * https://blueimp.net\n *\n * Licensed under the MIT license:\n * https://opensource.org/licenses/MIT\n */\n\n/* jshint nomen:false */\n/* global define, require, window, Blob */\n\n;(function (factory) {\n    'use strict';\n    if (typeof define === 'function' && define.amd) {\n        // Register as an anonymous AMD module:\n        define([\n            'jquery',\n            'load-image',\n            'load-image-meta',\n            'load-image-scale',\n            'load-image-exif',\n            'canvas-to-blob',\n            './jquery.fileupload-process'\n        ], factory);\n    } else if (typeof exports === 'object') {\n        // Node/CommonJS:\n        factory(\n            require('jquery'),\n            require('blueimp-load-image/js/load-image'),\n            require('blueimp-load-image/js/load-image-meta'),\n            require('blueimp-load-image/js/load-image-scale'),\n            require('blueimp-load-image/js/load-image-exif'),\n            require('blueimp-canvas-to-blob'),\n            require('./jquery.fileupload-process')\n        );\n    } else {\n        // Browser globals:\n        factory(\n            window.jQuery,\n            window.loadImage\n        );\n    }\n}(function ($, loadImage) {\n    'use strict';\n\n    // Prepend to the default processQueue:\n    $.blueimp.fileupload.prototype.options.processQueue.unshift(\n        {\n            action: 'loadImageMetaData',\n            disableImageHead: '@',\n            disableExif: '@',\n            disableExifThumbnail: '@',\n            disableExifSub: '@',\n            disableExifGps: '@',\n            disabled: '@disableImageMetaDataLoad'\n        },\n        {\n            action: 'loadImage',\n            // Use the action as prefix for the \"@\" options:\n            prefix: true,\n            fileTypes: '@',\n            maxFileSize: '@',\n            noRevoke: '@',\n            disabled: '@disableImageLoad'\n        },\n        {\n            action: 'resizeImage',\n            // Use \"image\" as prefix for the \"@\" options:\n            prefix: 'image',\n            maxWidth: '@',\n            maxHeight: '@',\n            minWidth: '@',\n            minHeight: '@',\n            crop: '@',\n            orientation: '@',\n            forceResize: '@',\n            disabled: '@disableImageResize'\n        },\n        {\n            action: 'saveImage',\n            quality: '@imageQuality',\n            type: '@imageType',\n            disabled: '@disableImageResize'\n        },\n        {\n            action: 'saveImageMetaData',\n            disabled: '@disableImageMetaDataSave'\n        },\n        {\n            action: 'resizeImage',\n            // Use \"preview\" as prefix for the \"@\" options:\n            prefix: 'preview',\n            maxWidth: '@',\n            maxHeight: '@',\n            minWidth: '@',\n            minHeight: '@',\n            crop: '@',\n            orientation: '@',\n            thumbnail: '@',\n            canvas: '@',\n            disabled: '@disableImagePreview'\n        },\n        {\n            action: 'setImage',\n            name: '@imagePreviewName',\n            disabled: '@disableImagePreview'\n        },\n        {\n            action: 'deleteImageReferences',\n            disabled: '@disableImageReferencesDeletion'\n        }\n    );\n\n    // The File Upload Resize plugin extends the fileupload widget\n    // with image resize functionality:\n    $.widget('blueimp.fileupload', $.blueimp.fileupload, {\n\n        options: {\n            // The regular expression for the types of images to load:\n            // matched against the file type:\n            loadImageFileTypes: /^image\\/(gif|jpeg|png|svg\\+xml)$/,\n            // The maximum file size of images to load:\n            loadImageMaxFileSize: 10000000, // 10MB\n            // The maximum width of resized images:\n            imageMaxWidth: 1920,\n            // The maximum height of resized images:\n            imageMaxHeight: 1080,\n            // Defines the image orientation (1-8) or takes the orientation\n            // value from Exif data if set to true:\n            imageOrientation: false,\n            // Define if resized images should be cropped or only scaled:\n            imageCrop: false,\n            // Disable the resize image functionality by default:\n            disableImageResize: true,\n            // The maximum width of the preview images:\n            previewMaxWidth: 80,\n            // The maximum height of the preview images:\n            previewMaxHeight: 80,\n            // Defines the preview orientation (1-8) or takes the orientation\n            // value from Exif data if set to true:\n            previewOrientation: true,\n            // Create the preview using the Exif data thumbnail:\n            previewThumbnail: true,\n            // Define if preview images should be cropped or only scaled:\n            previewCrop: false,\n            // Define if preview images should be resized as canvas elements:\n            previewCanvas: true\n        },\n\n        processActions: {\n\n            // Loads the image given via data.files and data.index\n            // as img element, if the browser supports the File API.\n            // Accepts the options fileTypes (regular expression)\n            // and maxFileSize (integer) to limit the files to load:\n            loadImage: function (data, options) {\n                if (options.disabled) {\n                    return data;\n                }\n                var that = this,\n                    file = data.files[data.index],\n                    dfd = $.Deferred();\n                if (($.type(options.maxFileSize) === 'number' &&\n                            file.size > options.maxFileSize) ||\n                        (options.fileTypes &&\n                            !options.fileTypes.test(file.type)) ||\n                        !loadImage(\n                            file,\n                            function (img) {\n                                if (img.src) {\n                                    data.img = img;\n                                }\n                                dfd.resolveWith(that, [data]);\n                            },\n                            options\n                        )) {\n                    return data;\n                }\n                return dfd.promise();\n            },\n\n            // Resizes the image given as data.canvas or data.img\n            // and updates data.canvas or data.img with the resized image.\n            // Also stores the resized image as preview property.\n            // Accepts the options maxWidth, maxHeight, minWidth,\n            // minHeight, canvas and crop:\n            resizeImage: function (data, options) {\n                if (options.disabled || !(data.canvas || data.img)) {\n                    return data;\n                }\n                options = $.extend({canvas: true}, options);\n                var that = this,\n                    dfd = $.Deferred(),\n                    img = (options.canvas && data.canvas) || data.img,\n                    resolve = function (newImg) {\n                        if (newImg && (newImg.width !== img.width ||\n                                newImg.height !== img.height ||\n                                options.forceResize)) {\n                            data[newImg.getContext ? 'canvas' : 'img'] = newImg;\n                        }\n                        data.preview = newImg;\n                        dfd.resolveWith(that, [data]);\n                    },\n                    thumbnail;\n                if (data.exif) {\n                    if (options.orientation === true) {\n                        options.orientation = data.exif.get('Orientation');\n                    }\n                    if (options.thumbnail) {\n                        thumbnail = data.exif.get('Thumbnail');\n                        if (thumbnail) {\n                            loadImage(thumbnail, resolve, options);\n                            return dfd.promise();\n                        }\n                    }\n                    // Prevent orienting the same image twice:\n                    if (data.orientation) {\n                        delete options.orientation;\n                    } else {\n                        data.orientation = options.orientation;\n                    }\n                }\n                if (img) {\n                    resolve(loadImage.scale(img, options));\n                    return dfd.promise();\n                }\n                return data;\n            },\n\n            // Saves the processed image given as data.canvas\n            // inplace at data.index of data.files:\n            saveImage: function (data, options) {\n                if (!data.canvas || options.disabled) {\n                    return data;\n                }\n                var that = this,\n                    file = data.files[data.index],\n                    dfd = $.Deferred();\n                if (data.canvas.toBlob) {\n                    data.canvas.toBlob(\n                        function (blob) {\n                            if (!blob.name) {\n                                if (file.type === blob.type) {\n                                    blob.name = file.name;\n                                } else if (file.name) {\n                                    blob.name = file.name.replace(\n                                        /\\.\\w+$/,\n                                        '.' + blob.type.substr(6)\n                                    );\n                                }\n                            }\n                            // Don't restore invalid meta data:\n                            if (file.type !== blob.type) {\n                                delete data.imageHead;\n                            }\n                            // Store the created blob at the position\n                            // of the original file in the files list:\n                            data.files[data.index] = blob;\n                            dfd.resolveWith(that, [data]);\n                        },\n                        options.type || file.type,\n                        options.quality\n                    );\n                } else {\n                    return data;\n                }\n                return dfd.promise();\n            },\n\n            loadImageMetaData: function (data, options) {\n                if (options.disabled) {\n                    return data;\n                }\n                var that = this,\n                    dfd = $.Deferred();\n                loadImage.parseMetaData(data.files[data.index], function (result) {\n                    $.extend(data, result);\n                    dfd.resolveWith(that, [data]);\n                }, options);\n                return dfd.promise();\n            },\n\n            saveImageMetaData: function (data, options) {\n                if (!(data.imageHead && data.canvas &&\n                        data.canvas.toBlob && !options.disabled)) {\n                    return data;\n                }\n                var file = data.files[data.index],\n                    blob = new Blob([\n                        data.imageHead,\n                        // Resized images always have a head size of 20 bytes,\n                        // including the JPEG marker and a minimal JFIF header:\n                        this._blobSlice.call(file, 20)\n                    ], {type: file.type});\n                blob.name = file.name;\n                data.files[data.index] = blob;\n                return data;\n            },\n\n            // Sets the resized version of the image as a property of the\n            // file object, must be called after \"saveImage\":\n            setImage: function (data, options) {\n                if (data.preview && !options.disabled) {\n                    data.files[data.index][options.name || 'preview'] = data.preview;\n                }\n                return data;\n            },\n\n            deleteImageReferences: function (data, options) {\n                if (!options.disabled) {\n                    delete data.img;\n                    delete data.canvas;\n                    delete data.preview;\n                    delete data.imageHead;\n                }\n                return data;\n            }\n\n        }\n\n    });\n\n}));\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/blueimp-file-upload/js/jquery.fileupload-image.js\n// module id = 8\n// module chunks = 0","/*\n * jQuery File Upload Validation Plugin\n * https://github.com/blueimp/jQuery-File-Upload\n *\n * Copyright 2013, Sebastian Tschan\n * https://blueimp.net\n *\n * Licensed under the MIT license:\n * https://opensource.org/licenses/MIT\n */\n\n/* global define, require, window */\n\n;(function (factory) {\n    'use strict';\n    if (typeof define === 'function' && define.amd) {\n        // Register as an anonymous AMD module:\n        define([\n            'jquery',\n            './jquery.fileupload-process'\n        ], factory);\n    } else if (typeof exports === 'object') {\n        // Node/CommonJS:\n        factory(\n            require('jquery'),\n            require('./jquery.fileupload-process')\n        );\n    } else {\n        // Browser globals:\n        factory(\n            window.jQuery\n        );\n    }\n}(function ($) {\n    'use strict';\n\n    // Append to the default processQueue:\n    $.blueimp.fileupload.prototype.options.processQueue.push(\n        {\n            action: 'validate',\n            // Always trigger this action,\n            // even if the previous action was rejected:\n            always: true,\n            // Options taken from the global options map:\n            acceptFileTypes: '@',\n            maxFileSize: '@',\n            minFileSize: '@',\n            maxNumberOfFiles: '@',\n            disabled: '@disableValidation'\n        }\n    );\n\n    // The File Upload Validation plugin extends the fileupload widget\n    // with file validation functionality:\n    $.widget('blueimp.fileupload', $.blueimp.fileupload, {\n\n        options: {\n            /*\n            // The regular expression for allowed file types, matches\n            // against either file type or file name:\n            acceptFileTypes: /(\\.|\\/)(gif|jpe?g|png)$/i,\n            // The maximum allowed file size in bytes:\n            maxFileSize: 10000000, // 10 MB\n            // The minimum allowed file size in bytes:\n            minFileSize: undefined, // No minimal file size\n            // The limit of files to be uploaded:\n            maxNumberOfFiles: 10,\n            */\n\n            // Function returning the current number of files,\n            // has to be overriden for maxNumberOfFiles validation:\n            getNumberOfFiles: $.noop,\n\n            // Error and info messages:\n            messages: {\n                maxNumberOfFiles: 'Maximum number of files exceeded',\n                acceptFileTypes: 'File type not allowed',\n                maxFileSize: 'File is too large',\n                minFileSize: 'File is too small'\n            }\n        },\n\n        processActions: {\n\n            validate: function (data, options) {\n                if (options.disabled) {\n                    return data;\n                }\n                var dfd = $.Deferred(),\n                    settings = this.options,\n                    file = data.files[data.index],\n                    fileSize;\n                if (options.minFileSize || options.maxFileSize) {\n                    fileSize = file.size;\n                }\n                if ($.type(options.maxNumberOfFiles) === 'number' &&\n                        (settings.getNumberOfFiles() || 0) + data.files.length >\n                            options.maxNumberOfFiles) {\n                    file.error = settings.i18n('maxNumberOfFiles');\n                } else if (options.acceptFileTypes &&\n                        !(options.acceptFileTypes.test(file.type) ||\n                        options.acceptFileTypes.test(file.name))) {\n                    file.error = settings.i18n('acceptFileTypes');\n                } else if (fileSize > options.maxFileSize) {\n                    file.error = settings.i18n('maxFileSize');\n                } else if ($.type(fileSize) === 'number' &&\n                        fileSize < options.minFileSize) {\n                    file.error = settings.i18n('minFileSize');\n                } else {\n                    delete file.error;\n                }\n                if (file.error || data.files.error) {\n                    data.files.error = true;\n                    dfd.rejectWith(this, [data]);\n                } else {\n                    dfd.resolveWith(this, [data]);\n                }\n                return dfd.promise();\n            }\n\n        }\n\n    });\n\n}));\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/blueimp-file-upload/js/jquery.fileupload-validate.js\n// module id = 9\n// module chunks = 0","/*\n * jQuery File Upload Video Preview Plugin\n * https://github.com/blueimp/jQuery-File-Upload\n *\n * Copyright 2013, Sebastian Tschan\n * https://blueimp.net\n *\n * Licensed under the MIT license:\n * https://opensource.org/licenses/MIT\n */\n\n/* jshint nomen:false */\n/* global define, require, window, document */\n\n;(function (factory) {\n    'use strict';\n    if (typeof define === 'function' && define.amd) {\n        // Register as an anonymous AMD module:\n        define([\n            'jquery',\n            'load-image',\n            './jquery.fileupload-process'\n        ], factory);\n    } else if (typeof exports === 'object') {\n        // Node/CommonJS:\n        factory(\n            require('jquery'),\n            require('blueimp-load-image/js/load-image'),\n            require('./jquery.fileupload-process')\n        );\n    } else {\n        // Browser globals:\n        factory(\n            window.jQuery,\n            window.loadImage\n        );\n    }\n}(function ($, loadImage) {\n    'use strict';\n\n    // Prepend to the default processQueue:\n    $.blueimp.fileupload.prototype.options.processQueue.unshift(\n        {\n            action: 'loadVideo',\n            // Use the action as prefix for the \"@\" options:\n            prefix: true,\n            fileTypes: '@',\n            maxFileSize: '@',\n            disabled: '@disableVideoPreview'\n        },\n        {\n            action: 'setVideo',\n            name: '@videoPreviewName',\n            disabled: '@disableVideoPreview'\n        }\n    );\n\n    // The File Upload Video Preview plugin extends the fileupload widget\n    // with video preview functionality:\n    $.widget('blueimp.fileupload', $.blueimp.fileupload, {\n\n        options: {\n            // The regular expression for the types of video files to load,\n            // matched against the file type:\n            loadVideoFileTypes: /^video\\/.*$/\n        },\n\n        _videoElement: document.createElement('video'),\n\n        processActions: {\n\n            // Loads the video file given via data.files and data.index\n            // as video element if the browser supports playing it.\n            // Accepts the options fileTypes (regular expression)\n            // and maxFileSize (integer) to limit the files to load:\n            loadVideo: function (data, options) {\n                if (options.disabled) {\n                    return data;\n                }\n                var file = data.files[data.index],\n                    url,\n                    video;\n                if (this._videoElement.canPlayType &&\n                        this._videoElement.canPlayType(file.type) &&\n                        ($.type(options.maxFileSize) !== 'number' ||\n                            file.size <= options.maxFileSize) &&\n                        (!options.fileTypes ||\n                            options.fileTypes.test(file.type))) {\n                    url = loadImage.createObjectURL(file);\n                    if (url) {\n                        video = this._videoElement.cloneNode(false);\n                        video.src = url;\n                        video.controls = true;\n                        data.video = video;\n                        return data;\n                    }\n                }\n                return data;\n            },\n\n            // Sets the video element as a property of the file object:\n            setVideo: function (data, options) {\n                if (data.video && !options.disabled) {\n                    data.files[data.index][options.name || 'preview'] = data.video;\n                }\n                return data;\n            }\n\n        }\n\n    });\n\n}));\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/blueimp-file-upload/js/jquery.fileupload-video.js\n// module id = 10\n// module chunks = 0","/*\n * jQuery File Upload Plugin\n * https://github.com/blueimp/jQuery-File-Upload\n *\n * Copyright 2010, Sebastian Tschan\n * https://blueimp.net\n *\n * Licensed under the MIT license:\n * https://opensource.org/licenses/MIT\n */\n\n/* jshint nomen:false */\n/* global define, require, window, document, location, Blob, FormData */\n\n;(function (factory) {\n    'use strict';\n    if (typeof define === 'function' && define.amd) {\n        // Register as an anonymous AMD module:\n        define([\n            'jquery',\n            'jquery-ui/ui/widget'\n        ], factory);\n    } else if (typeof exports === 'object') {\n        // Node/CommonJS:\n        factory(\n            require('jquery'),\n            require('./vendor/jquery.ui.widget')\n        );\n    } else {\n        // Browser globals:\n        factory(window.jQuery);\n    }\n}(function ($) {\n    'use strict';\n\n    // Detect file input support, based on\n    // http://viljamis.com/blog/2012/file-upload-support-on-mobile/\n    $.support.fileInput = !(new RegExp(\n        // Handle devices which give false positives for the feature detection:\n        '(Android (1\\\\.[0156]|2\\\\.[01]))' +\n            '|(Windows Phone (OS 7|8\\\\.0))|(XBLWP)|(ZuneWP)|(WPDesktop)' +\n            '|(w(eb)?OSBrowser)|(webOS)' +\n            '|(Kindle/(1\\\\.0|2\\\\.[05]|3\\\\.0))'\n    ).test(window.navigator.userAgent) ||\n        // Feature detection for all other devices:\n        $('<input type=\"file\">').prop('disabled'));\n\n    // The FileReader API is not actually used, but works as feature detection,\n    // as some Safari versions (5?) support XHR file uploads via the FormData API,\n    // but not non-multipart XHR file uploads.\n    // window.XMLHttpRequestUpload is not available on IE10, so we check for\n    // window.ProgressEvent instead to detect XHR2 file upload capability:\n    $.support.xhrFileUpload = !!(window.ProgressEvent && window.FileReader);\n    $.support.xhrFormDataFileUpload = !!window.FormData;\n\n    // Detect support for Blob slicing (required for chunked uploads):\n    $.support.blobSlice = window.Blob && (Blob.prototype.slice ||\n        Blob.prototype.webkitSlice || Blob.prototype.mozSlice);\n\n    // Helper function to create drag handlers for dragover/dragenter/dragleave:\n    function getDragHandler(type) {\n        var isDragOver = type === 'dragover';\n        return function (e) {\n            e.dataTransfer = e.originalEvent && e.originalEvent.dataTransfer;\n            var dataTransfer = e.dataTransfer;\n            if (dataTransfer && $.inArray('Files', dataTransfer.types) !== -1 &&\n                    this._trigger(\n                        type,\n                        $.Event(type, {delegatedEvent: e})\n                    ) !== false) {\n                e.preventDefault();\n                if (isDragOver) {\n                    dataTransfer.dropEffect = 'copy';\n                }\n            }\n        };\n    }\n\n    // The fileupload widget listens for change events on file input fields defined\n    // via fileInput setting and paste or drop events of the given dropZone.\n    // In addition to the default jQuery Widget methods, the fileupload widget\n    // exposes the \"add\" and \"send\" methods, to add or directly send files using\n    // the fileupload API.\n    // By default, files added via file input selection, paste, drag & drop or\n    // \"add\" method are uploaded immediately, but it is possible to override\n    // the \"add\" callback option to queue file uploads.\n    $.widget('blueimp.fileupload', {\n\n        options: {\n            // The drop target element(s), by the default the complete document.\n            // Set to null to disable drag & drop support:\n            dropZone: $(document),\n            // The paste target element(s), by the default undefined.\n            // Set to a DOM node or jQuery object to enable file pasting:\n            pasteZone: undefined,\n            // The file input field(s), that are listened to for change events.\n            // If undefined, it is set to the file input fields inside\n            // of the widget element on plugin initialization.\n            // Set to null to disable the change listener.\n            fileInput: undefined,\n            // By default, the file input field is replaced with a clone after\n            // each input field change event. This is required for iframe transport\n            // queues and allows change events to be fired for the same file\n            // selection, but can be disabled by setting the following option to false:\n            replaceFileInput: true,\n            // The parameter name for the file form data (the request argument name).\n            // If undefined or empty, the name property of the file input field is\n            // used, or \"files[]\" if the file input name property is also empty,\n            // can be a string or an array of strings:\n            paramName: undefined,\n            // By default, each file of a selection is uploaded using an individual\n            // request for XHR type uploads. Set to false to upload file\n            // selections in one request each:\n            singleFileUploads: true,\n            // To limit the number of files uploaded with one XHR request,\n            // set the following option to an integer greater than 0:\n            limitMultiFileUploads: undefined,\n            // The following option limits the number of files uploaded with one\n            // XHR request to keep the request size under or equal to the defined\n            // limit in bytes:\n            limitMultiFileUploadSize: undefined,\n            // Multipart file uploads add a number of bytes to each uploaded file,\n            // therefore the following option adds an overhead for each file used\n            // in the limitMultiFileUploadSize configuration:\n            limitMultiFileUploadSizeOverhead: 512,\n            // Set the following option to true to issue all file upload requests\n            // in a sequential order:\n            sequentialUploads: false,\n            // To limit the number of concurrent uploads,\n            // set the following option to an integer greater than 0:\n            limitConcurrentUploads: undefined,\n            // Set the following option to true to force iframe transport uploads:\n            forceIframeTransport: false,\n            // Set the following option to the location of a redirect url on the\n            // origin server, for cross-domain iframe transport uploads:\n            redirect: undefined,\n            // The parameter name for the redirect url, sent as part of the form\n            // data and set to 'redirect' if this option is empty:\n            redirectParamName: undefined,\n            // Set the following option to the location of a postMessage window,\n            // to enable postMessage transport uploads:\n            postMessage: undefined,\n            // By default, XHR file uploads are sent as multipart/form-data.\n            // The iframe transport is always using multipart/form-data.\n            // Set to false to enable non-multipart XHR uploads:\n            multipart: true,\n            // To upload large files in smaller chunks, set the following option\n            // to a preferred maximum chunk size. If set to 0, null or undefined,\n            // or the browser does not support the required Blob API, files will\n            // be uploaded as a whole.\n            maxChunkSize: undefined,\n            // When a non-multipart upload or a chunked multipart upload has been\n            // aborted, this option can be used to resume the upload by setting\n            // it to the size of the already uploaded bytes. This option is most\n            // useful when modifying the options object inside of the \"add\" or\n            // \"send\" callbacks, as the options are cloned for each file upload.\n            uploadedBytes: undefined,\n            // By default, failed (abort or error) file uploads are removed from the\n            // global progress calculation. Set the following option to false to\n            // prevent recalculating the global progress data:\n            recalculateProgress: true,\n            // Interval in milliseconds to calculate and trigger progress events:\n            progressInterval: 100,\n            // Interval in milliseconds to calculate progress bitrate:\n            bitrateInterval: 500,\n            // By default, uploads are started automatically when adding files:\n            autoUpload: true,\n\n            // Error and info messages:\n            messages: {\n                uploadedBytes: 'Uploaded bytes exceed file size'\n            },\n\n            // Translation function, gets the message key to be translated\n            // and an object with context specific data as arguments:\n            i18n: function (message, context) {\n                message = this.messages[message] || message.toString();\n                if (context) {\n                    $.each(context, function (key, value) {\n                        message = message.replace('{' + key + '}', value);\n                    });\n                }\n                return message;\n            },\n\n            // Additional form data to be sent along with the file uploads can be set\n            // using this option, which accepts an array of objects with name and\n            // value properties, a function returning such an array, a FormData\n            // object (for XHR file uploads), or a simple object.\n            // The form of the first fileInput is given as parameter to the function:\n            formData: function (form) {\n                return form.serializeArray();\n            },\n\n            // The add callback is invoked as soon as files are added to the fileupload\n            // widget (via file input selection, drag & drop, paste or add API call).\n            // If the singleFileUploads option is enabled, this callback will be\n            // called once for each file in the selection for XHR file uploads, else\n            // once for each file selection.\n            //\n            // The upload starts when the submit method is invoked on the data parameter.\n            // The data object contains a files property holding the added files\n            // and allows you to override plugin options as well as define ajax settings.\n            //\n            // Listeners for this callback can also be bound the following way:\n            // .bind('fileuploadadd', func);\n            //\n            // data.submit() returns a Promise object and allows to attach additional\n            // handlers using jQuery's Deferred callbacks:\n            // data.submit().done(func).fail(func).always(func);\n            add: function (e, data) {\n                if (e.isDefaultPrevented()) {\n                    return false;\n                }\n                if (data.autoUpload || (data.autoUpload !== false &&\n                        $(this).fileupload('option', 'autoUpload'))) {\n                    data.process().done(function () {\n                        data.submit();\n                    });\n                }\n            },\n\n            // Other callbacks:\n\n            // Callback for the submit event of each file upload:\n            // submit: function (e, data) {}, // .bind('fileuploadsubmit', func);\n\n            // Callback for the start of each file upload request:\n            // send: function (e, data) {}, // .bind('fileuploadsend', func);\n\n            // Callback for successful uploads:\n            // done: function (e, data) {}, // .bind('fileuploaddone', func);\n\n            // Callback for failed (abort or error) uploads:\n            // fail: function (e, data) {}, // .bind('fileuploadfail', func);\n\n            // Callback for completed (success, abort or error) requests:\n            // always: function (e, data) {}, // .bind('fileuploadalways', func);\n\n            // Callback for upload progress events:\n            // progress: function (e, data) {}, // .bind('fileuploadprogress', func);\n\n            // Callback for global upload progress events:\n            // progressall: function (e, data) {}, // .bind('fileuploadprogressall', func);\n\n            // Callback for uploads start, equivalent to the global ajaxStart event:\n            // start: function (e) {}, // .bind('fileuploadstart', func);\n\n            // Callback for uploads stop, equivalent to the global ajaxStop event:\n            // stop: function (e) {}, // .bind('fileuploadstop', func);\n\n            // Callback for change events of the fileInput(s):\n            // change: function (e, data) {}, // .bind('fileuploadchange', func);\n\n            // Callback for paste events to the pasteZone(s):\n            // paste: function (e, data) {}, // .bind('fileuploadpaste', func);\n\n            // Callback for drop events of the dropZone(s):\n            // drop: function (e, data) {}, // .bind('fileuploaddrop', func);\n\n            // Callback for dragover events of the dropZone(s):\n            // dragover: function (e) {}, // .bind('fileuploaddragover', func);\n\n            // Callback for the start of each chunk upload request:\n            // chunksend: function (e, data) {}, // .bind('fileuploadchunksend', func);\n\n            // Callback for successful chunk uploads:\n            // chunkdone: function (e, data) {}, // .bind('fileuploadchunkdone', func);\n\n            // Callback for failed (abort or error) chunk uploads:\n            // chunkfail: function (e, data) {}, // .bind('fileuploadchunkfail', func);\n\n            // Callback for completed (success, abort or error) chunk upload requests:\n            // chunkalways: function (e, data) {}, // .bind('fileuploadchunkalways', func);\n\n            // The plugin options are used as settings object for the ajax calls.\n            // The following are jQuery ajax settings required for the file uploads:\n            processData: false,\n            contentType: false,\n            cache: false,\n            timeout: 0\n        },\n\n        // A list of options that require reinitializing event listeners and/or\n        // special initialization code:\n        _specialOptions: [\n            'fileInput',\n            'dropZone',\n            'pasteZone',\n            'multipart',\n            'forceIframeTransport'\n        ],\n\n        _blobSlice: $.support.blobSlice && function () {\n            var slice = this.slice || this.webkitSlice || this.mozSlice;\n            return slice.apply(this, arguments);\n        },\n\n        _BitrateTimer: function () {\n            this.timestamp = ((Date.now) ? Date.now() : (new Date()).getTime());\n            this.loaded = 0;\n            this.bitrate = 0;\n            this.getBitrate = function (now, loaded, interval) {\n                var timeDiff = now - this.timestamp;\n                if (!this.bitrate || !interval || timeDiff > interval) {\n                    this.bitrate = (loaded - this.loaded) * (1000 / timeDiff) * 8;\n                    this.loaded = loaded;\n                    this.timestamp = now;\n                }\n                return this.bitrate;\n            };\n        },\n\n        _isXHRUpload: function (options) {\n            return !options.forceIframeTransport &&\n                ((!options.multipart && $.support.xhrFileUpload) ||\n                $.support.xhrFormDataFileUpload);\n        },\n\n        _getFormData: function (options) {\n            var formData;\n            if ($.type(options.formData) === 'function') {\n                return options.formData(options.form);\n            }\n            if ($.isArray(options.formData)) {\n                return options.formData;\n            }\n            if ($.type(options.formData) === 'object') {\n                formData = [];\n                $.each(options.formData, function (name, value) {\n                    formData.push({name: name, value: value});\n                });\n                return formData;\n            }\n            return [];\n        },\n\n        _getTotal: function (files) {\n            var total = 0;\n            $.each(files, function (index, file) {\n                total += file.size || 1;\n            });\n            return total;\n        },\n\n        _initProgressObject: function (obj) {\n            var progress = {\n                loaded: 0,\n                total: 0,\n                bitrate: 0\n            };\n            if (obj._progress) {\n                $.extend(obj._progress, progress);\n            } else {\n                obj._progress = progress;\n            }\n        },\n\n        _initResponseObject: function (obj) {\n            var prop;\n            if (obj._response) {\n                for (prop in obj._response) {\n                    if (obj._response.hasOwnProperty(prop)) {\n                        delete obj._response[prop];\n                    }\n                }\n            } else {\n                obj._response = {};\n            }\n        },\n\n        _onProgress: function (e, data) {\n            if (e.lengthComputable) {\n                var now = ((Date.now) ? Date.now() : (new Date()).getTime()),\n                    loaded;\n                if (data._time && data.progressInterval &&\n                        (now - data._time < data.progressInterval) &&\n                        e.loaded !== e.total) {\n                    return;\n                }\n                data._time = now;\n                loaded = Math.floor(\n                    e.loaded / e.total * (data.chunkSize || data._progress.total)\n                ) + (data.uploadedBytes || 0);\n                // Add the difference from the previously loaded state\n                // to the global loaded counter:\n                this._progress.loaded += (loaded - data._progress.loaded);\n                this._progress.bitrate = this._bitrateTimer.getBitrate(\n                    now,\n                    this._progress.loaded,\n                    data.bitrateInterval\n                );\n                data._progress.loaded = data.loaded = loaded;\n                data._progress.bitrate = data.bitrate = data._bitrateTimer.getBitrate(\n                    now,\n                    loaded,\n                    data.bitrateInterval\n                );\n                // Trigger a custom progress event with a total data property set\n                // to the file size(s) of the current upload and a loaded data\n                // property calculated accordingly:\n                this._trigger(\n                    'progress',\n                    $.Event('progress', {delegatedEvent: e}),\n                    data\n                );\n                // Trigger a global progress event for all current file uploads,\n                // including ajax calls queued for sequential file uploads:\n                this._trigger(\n                    'progressall',\n                    $.Event('progressall', {delegatedEvent: e}),\n                    this._progress\n                );\n            }\n        },\n\n        _initProgressListener: function (options) {\n            var that = this,\n                xhr = options.xhr ? options.xhr() : $.ajaxSettings.xhr();\n            // Accesss to the native XHR object is required to add event listeners\n            // for the upload progress event:\n            if (xhr.upload) {\n                $(xhr.upload).bind('progress', function (e) {\n                    var oe = e.originalEvent;\n                    // Make sure the progress event properties get copied over:\n                    e.lengthComputable = oe.lengthComputable;\n                    e.loaded = oe.loaded;\n                    e.total = oe.total;\n                    that._onProgress(e, options);\n                });\n                options.xhr = function () {\n                    return xhr;\n                };\n            }\n        },\n\n        _isInstanceOf: function (type, obj) {\n            // Cross-frame instanceof check\n            return Object.prototype.toString.call(obj) === '[object ' + type + ']';\n        },\n\n        _initXHRData: function (options) {\n            var that = this,\n                formData,\n                file = options.files[0],\n                // Ignore non-multipart setting if not supported:\n                multipart = options.multipart || !$.support.xhrFileUpload,\n                paramName = $.type(options.paramName) === 'array' ?\n                    options.paramName[0] : options.paramName;\n            options.headers = $.extend({}, options.headers);\n            if (options.contentRange) {\n                options.headers['Content-Range'] = options.contentRange;\n            }\n            if (!multipart || options.blob || !this._isInstanceOf('File', file)) {\n                options.headers['Content-Disposition'] = 'attachment; filename=\"' +\n                    encodeURI(file.name) + '\"';\n            }\n            if (!multipart) {\n                options.contentType = file.type || 'application/octet-stream';\n                options.data = options.blob || file;\n            } else if ($.support.xhrFormDataFileUpload) {\n                if (options.postMessage) {\n                    // window.postMessage does not allow sending FormData\n                    // objects, so we just add the File/Blob objects to\n                    // the formData array and let the postMessage window\n                    // create the FormData object out of this array:\n                    formData = this._getFormData(options);\n                    if (options.blob) {\n                        formData.push({\n                            name: paramName,\n                            value: options.blob\n                        });\n                    } else {\n                        $.each(options.files, function (index, file) {\n                            formData.push({\n                                name: ($.type(options.paramName) === 'array' &&\n                                    options.paramName[index]) || paramName,\n                                value: file\n                            });\n                        });\n                    }\n                } else {\n                    if (that._isInstanceOf('FormData', options.formData)) {\n                        formData = options.formData;\n                    } else {\n                        formData = new FormData();\n                        $.each(this._getFormData(options), function (index, field) {\n                            formData.append(field.name, field.value);\n                        });\n                    }\n                    if (options.blob) {\n                        formData.append(paramName, options.blob, file.name);\n                    } else {\n                        $.each(options.files, function (index, file) {\n                            // This check allows the tests to run with\n                            // dummy objects:\n                            if (that._isInstanceOf('File', file) ||\n                                    that._isInstanceOf('Blob', file)) {\n                                formData.append(\n                                    ($.type(options.paramName) === 'array' &&\n                                        options.paramName[index]) || paramName,\n                                    file,\n                                    file.uploadName || file.name\n                                );\n                            }\n                        });\n                    }\n                }\n                options.data = formData;\n            }\n            // Blob reference is not needed anymore, free memory:\n            options.blob = null;\n        },\n\n        _initIframeSettings: function (options) {\n            var targetHost = $('<a></a>').prop('href', options.url).prop('host');\n            // Setting the dataType to iframe enables the iframe transport:\n            options.dataType = 'iframe ' + (options.dataType || '');\n            // The iframe transport accepts a serialized array as form data:\n            options.formData = this._getFormData(options);\n            // Add redirect url to form data on cross-domain uploads:\n            if (options.redirect && targetHost && targetHost !== location.host) {\n                options.formData.push({\n                    name: options.redirectParamName || 'redirect',\n                    value: options.redirect\n                });\n            }\n        },\n\n        _initDataSettings: function (options) {\n            if (this._isXHRUpload(options)) {\n                if (!this._chunkedUpload(options, true)) {\n                    if (!options.data) {\n                        this._initXHRData(options);\n                    }\n                    this._initProgressListener(options);\n                }\n                if (options.postMessage) {\n                    // Setting the dataType to postmessage enables the\n                    // postMessage transport:\n                    options.dataType = 'postmessage ' + (options.dataType || '');\n                }\n            } else {\n                this._initIframeSettings(options);\n            }\n        },\n\n        _getParamName: function (options) {\n            var fileInput = $(options.fileInput),\n                paramName = options.paramName;\n            if (!paramName) {\n                paramName = [];\n                fileInput.each(function () {\n                    var input = $(this),\n                        name = input.prop('name') || 'files[]',\n                        i = (input.prop('files') || [1]).length;\n                    while (i) {\n                        paramName.push(name);\n                        i -= 1;\n                    }\n                });\n                if (!paramName.length) {\n                    paramName = [fileInput.prop('name') || 'files[]'];\n                }\n            } else if (!$.isArray(paramName)) {\n                paramName = [paramName];\n            }\n            return paramName;\n        },\n\n        _initFormSettings: function (options) {\n            // Retrieve missing options from the input field and the\n            // associated form, if available:\n            if (!options.form || !options.form.length) {\n                options.form = $(options.fileInput.prop('form'));\n                // If the given file input doesn't have an associated form,\n                // use the default widget file input's form:\n                if (!options.form.length) {\n                    options.form = $(this.options.fileInput.prop('form'));\n                }\n            }\n            options.paramName = this._getParamName(options);\n            if (!options.url) {\n                options.url = options.form.prop('action') || location.href;\n            }\n            // The HTTP request method must be \"POST\" or \"PUT\":\n            options.type = (options.type ||\n                ($.type(options.form.prop('method')) === 'string' &&\n                    options.form.prop('method')) || ''\n                ).toUpperCase();\n            if (options.type !== 'POST' && options.type !== 'PUT' &&\n                    options.type !== 'PATCH') {\n                options.type = 'POST';\n            }\n            if (!options.formAcceptCharset) {\n                options.formAcceptCharset = options.form.attr('accept-charset');\n            }\n        },\n\n        _getAJAXSettings: function (data) {\n            var options = $.extend({}, this.options, data);\n            this._initFormSettings(options);\n            this._initDataSettings(options);\n            return options;\n        },\n\n        // jQuery 1.6 doesn't provide .state(),\n        // while jQuery 1.8+ removed .isRejected() and .isResolved():\n        _getDeferredState: function (deferred) {\n            if (deferred.state) {\n                return deferred.state();\n            }\n            if (deferred.isResolved()) {\n                return 'resolved';\n            }\n            if (deferred.isRejected()) {\n                return 'rejected';\n            }\n            return 'pending';\n        },\n\n        // Maps jqXHR callbacks to the equivalent\n        // methods of the given Promise object:\n        _enhancePromise: function (promise) {\n            promise.success = promise.done;\n            promise.error = promise.fail;\n            promise.complete = promise.always;\n            return promise;\n        },\n\n        // Creates and returns a Promise object enhanced with\n        // the jqXHR methods abort, success, error and complete:\n        _getXHRPromise: function (resolveOrReject, context, args) {\n            var dfd = $.Deferred(),\n                promise = dfd.promise();\n            context = context || this.options.context || promise;\n            if (resolveOrReject === true) {\n                dfd.resolveWith(context, args);\n            } else if (resolveOrReject === false) {\n                dfd.rejectWith(context, args);\n            }\n            promise.abort = dfd.promise;\n            return this._enhancePromise(promise);\n        },\n\n        // Adds convenience methods to the data callback argument:\n        _addConvenienceMethods: function (e, data) {\n            var that = this,\n                getPromise = function (args) {\n                    return $.Deferred().resolveWith(that, args).promise();\n                };\n            data.process = function (resolveFunc, rejectFunc) {\n                if (resolveFunc || rejectFunc) {\n                    data._processQueue = this._processQueue =\n                        (this._processQueue || getPromise([this])).then(\n                            function () {\n                                if (data.errorThrown) {\n                                    return $.Deferred()\n                                        .rejectWith(that, [data]).promise();\n                                }\n                                return getPromise(arguments);\n                            }\n                        ).then(resolveFunc, rejectFunc);\n                }\n                return this._processQueue || getPromise([this]);\n            };\n            data.submit = function () {\n                if (this.state() !== 'pending') {\n                    data.jqXHR = this.jqXHR =\n                        (that._trigger(\n                            'submit',\n                            $.Event('submit', {delegatedEvent: e}),\n                            this\n                        ) !== false) && that._onSend(e, this);\n                }\n                return this.jqXHR || that._getXHRPromise();\n            };\n            data.abort = function () {\n                if (this.jqXHR) {\n                    return this.jqXHR.abort();\n                }\n                this.errorThrown = 'abort';\n                that._trigger('fail', null, this);\n                return that._getXHRPromise(false);\n            };\n            data.state = function () {\n                if (this.jqXHR) {\n                    return that._getDeferredState(this.jqXHR);\n                }\n                if (this._processQueue) {\n                    return that._getDeferredState(this._processQueue);\n                }\n            };\n            data.processing = function () {\n                return !this.jqXHR && this._processQueue && that\n                    ._getDeferredState(this._processQueue) === 'pending';\n            };\n            data.progress = function () {\n                return this._progress;\n            };\n            data.response = function () {\n                return this._response;\n            };\n        },\n\n        // Parses the Range header from the server response\n        // and returns the uploaded bytes:\n        _getUploadedBytes: function (jqXHR) {\n            var range = jqXHR.getResponseHeader('Range'),\n                parts = range && range.split('-'),\n                upperBytesPos = parts && parts.length > 1 &&\n                    parseInt(parts[1], 10);\n            return upperBytesPos && upperBytesPos + 1;\n        },\n\n        // Uploads a file in multiple, sequential requests\n        // by splitting the file up in multiple blob chunks.\n        // If the second parameter is true, only tests if the file\n        // should be uploaded in chunks, but does not invoke any\n        // upload requests:\n        _chunkedUpload: function (options, testOnly) {\n            options.uploadedBytes = options.uploadedBytes || 0;\n            var that = this,\n                file = options.files[0],\n                fs = file.size,\n                ub = options.uploadedBytes,\n                mcs = options.maxChunkSize || fs,\n                slice = this._blobSlice,\n                dfd = $.Deferred(),\n                promise = dfd.promise(),\n                jqXHR,\n                upload;\n            if (!(this._isXHRUpload(options) && slice && (ub || ($.type(mcs) === 'function' ? mcs(options) : mcs) < fs)) ||\n                    options.data) {\n                return false;\n            }\n            if (testOnly) {\n                return true;\n            }\n            if (ub >= fs) {\n                file.error = options.i18n('uploadedBytes');\n                return this._getXHRPromise(\n                    false,\n                    options.context,\n                    [null, 'error', file.error]\n                );\n            }\n            // The chunk upload method:\n            upload = function () {\n                // Clone the options object for each chunk upload:\n                var o = $.extend({}, options),\n                    currentLoaded = o._progress.loaded;\n                o.blob = slice.call(\n                    file,\n                    ub,\n                    ub + ($.type(mcs) === 'function' ? mcs(o) : mcs),\n                    file.type\n                );\n                // Store the current chunk size, as the blob itself\n                // will be dereferenced after data processing:\n                o.chunkSize = o.blob.size;\n                // Expose the chunk bytes position range:\n                o.contentRange = 'bytes ' + ub + '-' +\n                    (ub + o.chunkSize - 1) + '/' + fs;\n                // Process the upload data (the blob and potential form data):\n                that._initXHRData(o);\n                // Add progress listeners for this chunk upload:\n                that._initProgressListener(o);\n                jqXHR = ((that._trigger('chunksend', null, o) !== false && $.ajax(o)) ||\n                        that._getXHRPromise(false, o.context))\n                    .done(function (result, textStatus, jqXHR) {\n                        ub = that._getUploadedBytes(jqXHR) ||\n                            (ub + o.chunkSize);\n                        // Create a progress event if no final progress event\n                        // with loaded equaling total has been triggered\n                        // for this chunk:\n                        if (currentLoaded + o.chunkSize - o._progress.loaded) {\n                            that._onProgress($.Event('progress', {\n                                lengthComputable: true,\n                                loaded: ub - o.uploadedBytes,\n                                total: ub - o.uploadedBytes\n                            }), o);\n                        }\n                        options.uploadedBytes = o.uploadedBytes = ub;\n                        o.result = result;\n                        o.textStatus = textStatus;\n                        o.jqXHR = jqXHR;\n                        that._trigger('chunkdone', null, o);\n                        that._trigger('chunkalways', null, o);\n                        if (ub < fs) {\n                            // File upload not yet complete,\n                            // continue with the next chunk:\n                            upload();\n                        } else {\n                            dfd.resolveWith(\n                                o.context,\n                                [result, textStatus, jqXHR]\n                            );\n                        }\n                    })\n                    .fail(function (jqXHR, textStatus, errorThrown) {\n                        o.jqXHR = jqXHR;\n                        o.textStatus = textStatus;\n                        o.errorThrown = errorThrown;\n                        that._trigger('chunkfail', null, o);\n                        that._trigger('chunkalways', null, o);\n                        dfd.rejectWith(\n                            o.context,\n                            [jqXHR, textStatus, errorThrown]\n                        );\n                    });\n            };\n            this._enhancePromise(promise);\n            promise.abort = function () {\n                return jqXHR.abort();\n            };\n            upload();\n            return promise;\n        },\n\n        _beforeSend: function (e, data) {\n            if (this._active === 0) {\n                // the start callback is triggered when an upload starts\n                // and no other uploads are currently running,\n                // equivalent to the global ajaxStart event:\n                this._trigger('start');\n                // Set timer for global bitrate progress calculation:\n                this._bitrateTimer = new this._BitrateTimer();\n                // Reset the global progress values:\n                this._progress.loaded = this._progress.total = 0;\n                this._progress.bitrate = 0;\n            }\n            // Make sure the container objects for the .response() and\n            // .progress() methods on the data object are available\n            // and reset to their initial state:\n            this._initResponseObject(data);\n            this._initProgressObject(data);\n            data._progress.loaded = data.loaded = data.uploadedBytes || 0;\n            data._progress.total = data.total = this._getTotal(data.files) || 1;\n            data._progress.bitrate = data.bitrate = 0;\n            this._active += 1;\n            // Initialize the global progress values:\n            this._progress.loaded += data.loaded;\n            this._progress.total += data.total;\n        },\n\n        _onDone: function (result, textStatus, jqXHR, options) {\n            var total = options._progress.total,\n                response = options._response;\n            if (options._progress.loaded < total) {\n                // Create a progress event if no final progress event\n                // with loaded equaling total has been triggered:\n                this._onProgress($.Event('progress', {\n                    lengthComputable: true,\n                    loaded: total,\n                    total: total\n                }), options);\n            }\n            response.result = options.result = result;\n            response.textStatus = options.textStatus = textStatus;\n            response.jqXHR = options.jqXHR = jqXHR;\n            this._trigger('done', null, options);\n        },\n\n        _onFail: function (jqXHR, textStatus, errorThrown, options) {\n            var response = options._response;\n            if (options.recalculateProgress) {\n                // Remove the failed (error or abort) file upload from\n                // the global progress calculation:\n                this._progress.loaded -= options._progress.loaded;\n                this._progress.total -= options._progress.total;\n            }\n            response.jqXHR = options.jqXHR = jqXHR;\n            response.textStatus = options.textStatus = textStatus;\n            response.errorThrown = options.errorThrown = errorThrown;\n            this._trigger('fail', null, options);\n        },\n\n        _onAlways: function (jqXHRorResult, textStatus, jqXHRorError, options) {\n            // jqXHRorResult, textStatus and jqXHRorError are added to the\n            // options object via done and fail callbacks\n            this._trigger('always', null, options);\n        },\n\n        _onSend: function (e, data) {\n            if (!data.submit) {\n                this._addConvenienceMethods(e, data);\n            }\n            var that = this,\n                jqXHR,\n                aborted,\n                slot,\n                pipe,\n                options = that._getAJAXSettings(data),\n                send = function () {\n                    that._sending += 1;\n                    // Set timer for bitrate progress calculation:\n                    options._bitrateTimer = new that._BitrateTimer();\n                    jqXHR = jqXHR || (\n                        ((aborted || that._trigger(\n                            'send',\n                            $.Event('send', {delegatedEvent: e}),\n                            options\n                        ) === false) &&\n                        that._getXHRPromise(false, options.context, aborted)) ||\n                        that._chunkedUpload(options) || $.ajax(options)\n                    ).done(function (result, textStatus, jqXHR) {\n                        that._onDone(result, textStatus, jqXHR, options);\n                    }).fail(function (jqXHR, textStatus, errorThrown) {\n                        that._onFail(jqXHR, textStatus, errorThrown, options);\n                    }).always(function (jqXHRorResult, textStatus, jqXHRorError) {\n                        that._onAlways(\n                            jqXHRorResult,\n                            textStatus,\n                            jqXHRorError,\n                            options\n                        );\n                        that._sending -= 1;\n                        that._active -= 1;\n                        if (options.limitConcurrentUploads &&\n                                options.limitConcurrentUploads > that._sending) {\n                            // Start the next queued upload,\n                            // that has not been aborted:\n                            var nextSlot = that._slots.shift();\n                            while (nextSlot) {\n                                if (that._getDeferredState(nextSlot) === 'pending') {\n                                    nextSlot.resolve();\n                                    break;\n                                }\n                                nextSlot = that._slots.shift();\n                            }\n                        }\n                        if (that._active === 0) {\n                            // The stop callback is triggered when all uploads have\n                            // been completed, equivalent to the global ajaxStop event:\n                            that._trigger('stop');\n                        }\n                    });\n                    return jqXHR;\n                };\n            this._beforeSend(e, options);\n            if (this.options.sequentialUploads ||\n                    (this.options.limitConcurrentUploads &&\n                    this.options.limitConcurrentUploads <= this._sending)) {\n                if (this.options.limitConcurrentUploads > 1) {\n                    slot = $.Deferred();\n                    this._slots.push(slot);\n                    pipe = slot.then(send);\n                } else {\n                    this._sequence = this._sequence.then(send, send);\n                    pipe = this._sequence;\n                }\n                // Return the piped Promise object, enhanced with an abort method,\n                // which is delegated to the jqXHR object of the current upload,\n                // and jqXHR callbacks mapped to the equivalent Promise methods:\n                pipe.abort = function () {\n                    aborted = [undefined, 'abort', 'abort'];\n                    if (!jqXHR) {\n                        if (slot) {\n                            slot.rejectWith(options.context, aborted);\n                        }\n                        return send();\n                    }\n                    return jqXHR.abort();\n                };\n                return this._enhancePromise(pipe);\n            }\n            return send();\n        },\n\n        _onAdd: function (e, data) {\n            var that = this,\n                result = true,\n                options = $.extend({}, this.options, data),\n                files = data.files,\n                filesLength = files.length,\n                limit = options.limitMultiFileUploads,\n                limitSize = options.limitMultiFileUploadSize,\n                overhead = options.limitMultiFileUploadSizeOverhead,\n                batchSize = 0,\n                paramName = this._getParamName(options),\n                paramNameSet,\n                paramNameSlice,\n                fileSet,\n                i,\n                j = 0;\n            if (!filesLength) {\n                return false;\n            }\n            if (limitSize && files[0].size === undefined) {\n                limitSize = undefined;\n            }\n            if (!(options.singleFileUploads || limit || limitSize) ||\n                    !this._isXHRUpload(options)) {\n                fileSet = [files];\n                paramNameSet = [paramName];\n            } else if (!(options.singleFileUploads || limitSize) && limit) {\n                fileSet = [];\n                paramNameSet = [];\n                for (i = 0; i < filesLength; i += limit) {\n                    fileSet.push(files.slice(i, i + limit));\n                    paramNameSlice = paramName.slice(i, i + limit);\n                    if (!paramNameSlice.length) {\n                        paramNameSlice = paramName;\n                    }\n                    paramNameSet.push(paramNameSlice);\n                }\n            } else if (!options.singleFileUploads && limitSize) {\n                fileSet = [];\n                paramNameSet = [];\n                for (i = 0; i < filesLength; i = i + 1) {\n                    batchSize += files[i].size + overhead;\n                    if (i + 1 === filesLength ||\n                            ((batchSize + files[i + 1].size + overhead) > limitSize) ||\n                            (limit && i + 1 - j >= limit)) {\n                        fileSet.push(files.slice(j, i + 1));\n                        paramNameSlice = paramName.slice(j, i + 1);\n                        if (!paramNameSlice.length) {\n                            paramNameSlice = paramName;\n                        }\n                        paramNameSet.push(paramNameSlice);\n                        j = i + 1;\n                        batchSize = 0;\n                    }\n                }\n            } else {\n                paramNameSet = paramName;\n            }\n            data.originalFiles = files;\n            $.each(fileSet || files, function (index, element) {\n                var newData = $.extend({}, data);\n                newData.files = fileSet ? element : [element];\n                newData.paramName = paramNameSet[index];\n                that._initResponseObject(newData);\n                that._initProgressObject(newData);\n                that._addConvenienceMethods(e, newData);\n                result = that._trigger(\n                    'add',\n                    $.Event('add', {delegatedEvent: e}),\n                    newData\n                );\n                return result;\n            });\n            return result;\n        },\n\n        _replaceFileInput: function (data) {\n            var input = data.fileInput,\n                inputClone = input.clone(true),\n                restoreFocus = input.is(document.activeElement);\n            // Add a reference for the new cloned file input to the data argument:\n            data.fileInputClone = inputClone;\n            $('<form></form>').append(inputClone)[0].reset();\n            // Detaching allows to insert the fileInput on another form\n            // without loosing the file input value:\n            input.after(inputClone).detach();\n            // If the fileInput had focus before it was detached,\n            // restore focus to the inputClone.\n            if (restoreFocus) {\n                inputClone.focus();\n            }\n            // Avoid memory leaks with the detached file input:\n            $.cleanData(input.unbind('remove'));\n            // Replace the original file input element in the fileInput\n            // elements set with the clone, which has been copied including\n            // event handlers:\n            this.options.fileInput = this.options.fileInput.map(function (i, el) {\n                if (el === input[0]) {\n                    return inputClone[0];\n                }\n                return el;\n            });\n            // If the widget has been initialized on the file input itself,\n            // override this.element with the file input clone:\n            if (input[0] === this.element[0]) {\n                this.element = inputClone;\n            }\n        },\n\n        _handleFileTreeEntry: function (entry, path) {\n            var that = this,\n                dfd = $.Deferred(),\n                entries = [],\n                dirReader,\n                errorHandler = function (e) {\n                    if (e && !e.entry) {\n                        e.entry = entry;\n                    }\n                    // Since $.when returns immediately if one\n                    // Deferred is rejected, we use resolve instead.\n                    // This allows valid files and invalid items\n                    // to be returned together in one set:\n                    dfd.resolve([e]);\n                },\n                successHandler = function (entries) {\n                    that._handleFileTreeEntries(\n                        entries,\n                        path + entry.name + '/'\n                    ).done(function (files) {\n                        dfd.resolve(files);\n                    }).fail(errorHandler);\n                },\n                readEntries = function () {\n                    dirReader.readEntries(function (results) {\n                        if (!results.length) {\n                            successHandler(entries);\n                        } else {\n                            entries = entries.concat(results);\n                            readEntries();\n                        }\n                    }, errorHandler);\n                };\n            path = path || '';\n            if (entry.isFile) {\n                if (entry._file) {\n                    // Workaround for Chrome bug #149735\n                    entry._file.relativePath = path;\n                    dfd.resolve(entry._file);\n                } else {\n                    entry.file(function (file) {\n                        file.relativePath = path;\n                        dfd.resolve(file);\n                    }, errorHandler);\n                }\n            } else if (entry.isDirectory) {\n                dirReader = entry.createReader();\n                readEntries();\n            } else {\n                // Return an empy list for file system items\n                // other than files or directories:\n                dfd.resolve([]);\n            }\n            return dfd.promise();\n        },\n\n        _handleFileTreeEntries: function (entries, path) {\n            var that = this;\n            return $.when.apply(\n                $,\n                $.map(entries, function (entry) {\n                    return that._handleFileTreeEntry(entry, path);\n                })\n            ).then(function () {\n                return Array.prototype.concat.apply(\n                    [],\n                    arguments\n                );\n            });\n        },\n\n        _getDroppedFiles: function (dataTransfer) {\n            dataTransfer = dataTransfer || {};\n            var items = dataTransfer.items;\n            if (items && items.length && (items[0].webkitGetAsEntry ||\n                    items[0].getAsEntry)) {\n                return this._handleFileTreeEntries(\n                    $.map(items, function (item) {\n                        var entry;\n                        if (item.webkitGetAsEntry) {\n                            entry = item.webkitGetAsEntry();\n                            if (entry) {\n                                // Workaround for Chrome bug #149735:\n                                entry._file = item.getAsFile();\n                            }\n                            return entry;\n                        }\n                        return item.getAsEntry();\n                    })\n                );\n            }\n            return $.Deferred().resolve(\n                $.makeArray(dataTransfer.files)\n            ).promise();\n        },\n\n        _getSingleFileInputFiles: function (fileInput) {\n            fileInput = $(fileInput);\n            var entries = fileInput.prop('webkitEntries') ||\n                    fileInput.prop('entries'),\n                files,\n                value;\n            if (entries && entries.length) {\n                return this._handleFileTreeEntries(entries);\n            }\n            files = $.makeArray(fileInput.prop('files'));\n            if (!files.length) {\n                value = fileInput.prop('value');\n                if (!value) {\n                    return $.Deferred().resolve([]).promise();\n                }\n                // If the files property is not available, the browser does not\n                // support the File API and we add a pseudo File object with\n                // the input value as name with path information removed:\n                files = [{name: value.replace(/^.*\\\\/, '')}];\n            } else if (files[0].name === undefined && files[0].fileName) {\n                // File normalization for Safari 4 and Firefox 3:\n                $.each(files, function (index, file) {\n                    file.name = file.fileName;\n                    file.size = file.fileSize;\n                });\n            }\n            return $.Deferred().resolve(files).promise();\n        },\n\n        _getFileInputFiles: function (fileInput) {\n            if (!(fileInput instanceof $) || fileInput.length === 1) {\n                return this._getSingleFileInputFiles(fileInput);\n            }\n            return $.when.apply(\n                $,\n                $.map(fileInput, this._getSingleFileInputFiles)\n            ).then(function () {\n                return Array.prototype.concat.apply(\n                    [],\n                    arguments\n                );\n            });\n        },\n\n        _onChange: function (e) {\n            var that = this,\n                data = {\n                    fileInput: $(e.target),\n                    form: $(e.target.form)\n                };\n            this._getFileInputFiles(data.fileInput).always(function (files) {\n                data.files = files;\n                if (that.options.replaceFileInput) {\n                    that._replaceFileInput(data);\n                }\n                if (that._trigger(\n                        'change',\n                        $.Event('change', {delegatedEvent: e}),\n                        data\n                    ) !== false) {\n                    that._onAdd(e, data);\n                }\n            });\n        },\n\n        _onPaste: function (e) {\n            var items = e.originalEvent && e.originalEvent.clipboardData &&\n                    e.originalEvent.clipboardData.items,\n                data = {files: []};\n            if (items && items.length) {\n                $.each(items, function (index, item) {\n                    var file = item.getAsFile && item.getAsFile();\n                    if (file) {\n                        data.files.push(file);\n                    }\n                });\n                if (this._trigger(\n                        'paste',\n                        $.Event('paste', {delegatedEvent: e}),\n                        data\n                    ) !== false) {\n                    this._onAdd(e, data);\n                }\n            }\n        },\n\n        _onDrop: function (e) {\n            e.dataTransfer = e.originalEvent && e.originalEvent.dataTransfer;\n            var that = this,\n                dataTransfer = e.dataTransfer,\n                data = {};\n            if (dataTransfer && dataTransfer.files && dataTransfer.files.length) {\n                e.preventDefault();\n                this._getDroppedFiles(dataTransfer).always(function (files) {\n                    data.files = files;\n                    if (that._trigger(\n                            'drop',\n                            $.Event('drop', {delegatedEvent: e}),\n                            data\n                        ) !== false) {\n                        that._onAdd(e, data);\n                    }\n                });\n            }\n        },\n\n        _onDragOver: getDragHandler('dragover'),\n\n        _onDragEnter: getDragHandler('dragenter'),\n\n        _onDragLeave: getDragHandler('dragleave'),\n\n        _initEventHandlers: function () {\n            if (this._isXHRUpload(this.options)) {\n                this._on(this.options.dropZone, {\n                    dragover: this._onDragOver,\n                    drop: this._onDrop,\n                    // event.preventDefault() on dragenter is required for IE10+:\n                    dragenter: this._onDragEnter,\n                    // dragleave is not required, but added for completeness:\n                    dragleave: this._onDragLeave\n                });\n                this._on(this.options.pasteZone, {\n                    paste: this._onPaste\n                });\n            }\n            if ($.support.fileInput) {\n                this._on(this.options.fileInput, {\n                    change: this._onChange\n                });\n            }\n        },\n\n        _destroyEventHandlers: function () {\n            this._off(this.options.dropZone, 'dragenter dragleave dragover drop');\n            this._off(this.options.pasteZone, 'paste');\n            this._off(this.options.fileInput, 'change');\n        },\n\n        _destroy: function () {\n            this._destroyEventHandlers();\n        },\n\n        _setOption: function (key, value) {\n            var reinit = $.inArray(key, this._specialOptions) !== -1;\n            if (reinit) {\n                this._destroyEventHandlers();\n            }\n            this._super(key, value);\n            if (reinit) {\n                this._initSpecialOptions();\n                this._initEventHandlers();\n            }\n        },\n\n        _initSpecialOptions: function () {\n            var options = this.options;\n            if (options.fileInput === undefined) {\n                options.fileInput = this.element.is('input[type=\"file\"]') ?\n                        this.element : this.element.find('input[type=\"file\"]');\n            } else if (!(options.fileInput instanceof $)) {\n                options.fileInput = $(options.fileInput);\n            }\n            if (!(options.dropZone instanceof $)) {\n                options.dropZone = $(options.dropZone);\n            }\n            if (!(options.pasteZone instanceof $)) {\n                options.pasteZone = $(options.pasteZone);\n            }\n        },\n\n        _getRegExp: function (str) {\n            var parts = str.split('/'),\n                modifiers = parts.pop();\n            parts.shift();\n            return new RegExp(parts.join('/'), modifiers);\n        },\n\n        _isRegExpOption: function (key, value) {\n            return key !== 'url' && $.type(value) === 'string' &&\n                /^\\/.*\\/[igm]{0,3}$/.test(value);\n        },\n\n        _initDataAttributes: function () {\n            var that = this,\n                options = this.options,\n                data = this.element.data();\n            // Initialize options set via HTML5 data-attributes:\n            $.each(\n                this.element[0].attributes,\n                function (index, attr) {\n                    var key = attr.name.toLowerCase(),\n                        value;\n                    if (/^data-/.test(key)) {\n                        // Convert hyphen-ated key to camelCase:\n                        key = key.slice(5).replace(/-[a-z]/g, function (str) {\n                            return str.charAt(1).toUpperCase();\n                        });\n                        value = data[key];\n                        if (that._isRegExpOption(key, value)) {\n                            value = that._getRegExp(value);\n                        }\n                        options[key] = value;\n                    }\n                }\n            );\n        },\n\n        _create: function () {\n            this._initDataAttributes();\n            this._initSpecialOptions();\n            this._slots = [];\n            this._sequence = this._getXHRPromise(true);\n            this._sending = this._active = 0;\n            this._initProgressObject(this);\n            this._initEventHandlers();\n        },\n\n        // This method is exposed to the widget API and allows to query\n        // the number of active uploads:\n        active: function () {\n            return this._active;\n        },\n\n        // This method is exposed to the widget API and allows to query\n        // the widget upload progress.\n        // It returns an object with loaded, total and bitrate properties\n        // for the running uploads:\n        progress: function () {\n            return this._progress;\n        },\n\n        // This method is exposed to the widget API and allows adding files\n        // using the fileupload API. The data parameter accepts an object which\n        // must have a files property and can contain additional options:\n        // .fileupload('add', {files: filesList});\n        add: function (data) {\n            var that = this;\n            if (!data || this.options.disabled) {\n                return;\n            }\n            if (data.fileInput && !data.files) {\n                this._getFileInputFiles(data.fileInput).always(function (files) {\n                    data.files = files;\n                    that._onAdd(null, data);\n                });\n            } else {\n                data.files = $.makeArray(data.files);\n                this._onAdd(null, data);\n            }\n        },\n\n        // This method is exposed to the widget API and allows sending files\n        // using the fileupload API. The data parameter accepts an object which\n        // must have a files or fileInput property and can contain additional options:\n        // .fileupload('send', {files: filesList});\n        // The method returns a Promise object for the file upload call.\n        send: function (data) {\n            if (data && !this.options.disabled) {\n                if (data.fileInput && !data.files) {\n                    var that = this,\n                        dfd = $.Deferred(),\n                        promise = dfd.promise(),\n                        jqXHR,\n                        aborted;\n                    promise.abort = function () {\n                        aborted = true;\n                        if (jqXHR) {\n                            return jqXHR.abort();\n                        }\n                        dfd.reject(null, 'abort', 'abort');\n                        return promise;\n                    };\n                    this._getFileInputFiles(data.fileInput).always(\n                        function (files) {\n                            if (aborted) {\n                                return;\n                            }\n                            if (!files.length) {\n                                dfd.reject();\n                                return;\n                            }\n                            data.files = files;\n                            jqXHR = that._onSend(null, data);\n                            jqXHR.then(\n                                function (result, textStatus, jqXHR) {\n                                    dfd.resolve(result, textStatus, jqXHR);\n                                },\n                                function (jqXHR, textStatus, errorThrown) {\n                                    dfd.reject(jqXHR, textStatus, errorThrown);\n                                }\n                            );\n                        }\n                    );\n                    return this._enhancePromise(promise);\n                }\n                data.files = $.makeArray(data.files);\n                if (data.files.length) {\n                    return this._onSend(null, data);\n                }\n            }\n            return this._getXHRPromise(false, data && data.context);\n        }\n\n    });\n\n}));\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/blueimp-file-upload/js/jquery.fileupload.js\n// module id = 11\n// module chunks = 0","/*\n * JavaScript Templates\n * https://github.com/blueimp/JavaScript-Templates\n *\n * Copyright 2011, Sebastian Tschan\n * https://blueimp.net\n *\n * Licensed under the MIT license:\n * http://www.opensource.org/licenses/MIT\n *\n * Inspired by John Resig's JavaScript Micro-Templating:\n * http://ejohn.org/blog/javascript-micro-templating/\n */\n\n/* global define */\n\n;(function ($) {\n  'use strict'\n  var tmpl = function (str, data) {\n    var f = !/[^\\w\\-\\.:]/.test(str)\n      ? tmpl.cache[str] = tmpl.cache[str] || tmpl(tmpl.load(str))\n      : new Function(// eslint-disable-line no-new-func\n        tmpl.arg + ',tmpl',\n        'var _e=tmpl.encode' + tmpl.helper + \",_s='\" +\n          str.replace(tmpl.regexp, tmpl.func) + \"';return _s;\"\n      )\n    return data ? f(data, tmpl) : function (data) {\n      return f(data, tmpl)\n    }\n  }\n  tmpl.cache = {}\n  tmpl.load = function (id) {\n    return document.getElementById(id).innerHTML\n  }\n  tmpl.regexp = /([\\s'\\\\])(?!(?:[^{]|\\{(?!%))*%\\})|(?:\\{%(=|#)([\\s\\S]+?)%\\})|(\\{%)|(%\\})/g\n  tmpl.func = function (s, p1, p2, p3, p4, p5) {\n    if (p1) { // whitespace, quote and backspace in HTML context\n      return {\n        '\\n': '\\\\n',\n        '\\r': '\\\\r',\n        '\\t': '\\\\t',\n        ' ': ' '\n      }[p1] || '\\\\' + p1\n    }\n    if (p2) { // interpolation: {%=prop%}, or unescaped: {%#prop%}\n      if (p2 === '=') {\n        return \"'+_e(\" + p3 + \")+'\"\n      }\n      return \"'+(\" + p3 + \"==null?'':\" + p3 + \")+'\"\n    }\n    if (p4) { // evaluation start tag: {%\n      return \"';\"\n    }\n    if (p5) { // evaluation end tag: %}\n      return \"_s+='\"\n    }\n  }\n  tmpl.encReg = /[<>&\"'\\x00]/g // eslint-disable-line no-control-regex\n  tmpl.encMap = {\n    '<': '&lt;',\n    '>': '&gt;',\n    '&': '&amp;',\n    '\"': '&quot;',\n    \"'\": '&#39;'\n  }\n  tmpl.encode = function (s) {\n    return (s == null ? '' : '' + s).replace(\n      tmpl.encReg,\n      function (c) {\n        return tmpl.encMap[c] || ''\n      }\n    )\n  }\n  tmpl.arg = 'o'\n  tmpl.helper = \",print=function(s,e){_s+=e?(s==null?'':s):_e(s);}\" +\n                  ',include=function(s,d){_s+=tmpl(s,d);}'\n  if (typeof define === 'function' && define.amd) {\n    define(function () {\n      return tmpl\n    })\n  } else if (typeof module === 'object' && module.exports) {\n    module.exports = tmpl\n  } else {\n    $.tmpl = tmpl\n  }\n}(this))\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/blueimp-tmpl/js/tmpl.js\n// module id = 12\n// module chunks = 0","/*\n * jQuery File Upload User Interface Plugin\n * https://github.com/blueimp/jQuery-File-Upload\n *\n * Copyright 2010, Sebastian Tschan\n * https://blueimp.net\n *\n * Licensed under the MIT license:\n * https://opensource.org/licenses/MIT\n */\n\n/* jshint nomen:false */\n/* global define, require, window */\n\n;(function (factory) {\n    'use strict';\n    if (typeof define === 'function' && define.amd) {\n        // Register as an anonymous AMD module:\n        define([\n            'jquery',\n            'blueimp-tmpl',\n            './jquery.fileupload-image',\n            './jquery.fileupload-audio',\n            './jquery.fileupload-video',\n            './jquery.fileupload-validate'\n        ], factory);\n    } else if (typeof exports === 'object') {\n        // Node/CommonJS:\n        factory(\n            require('jquery'),\n            require('blueimp-tmpl'),\n            require('./jquery.fileupload-image'),\n            require('./jquery.fileupload-audio'),\n            require('./jquery.fileupload-video'),\n            require('./jquery.fileupload-validate')\n        );\n    } else {\n        // Browser globals:\n        factory(\n            window.jQuery,\n            window.tmpl\n        );\n    }\n}(function ($, tmpl) {\n    'use strict';\n\n    $.blueimp.fileupload.prototype._specialOptions.push(\n        'filesContainer',\n        'uploadTemplateId',\n        'downloadTemplateId'\n    );\n\n    // The UI version extends the file upload widget\n    // and adds complete user interface interaction:\n    $.widget('blueimp.fileupload', $.blueimp.fileupload, {\n\n        options: {\n            // By default, files added to the widget are uploaded as soon\n            // as the user clicks on the start buttons. To enable automatic\n            // uploads, set the following option to true:\n            autoUpload: false,\n            // The ID of the upload template:\n            uploadTemplateId: 'template-upload',\n            // The ID of the download template:\n            downloadTemplateId: 'template-download',\n            // The container for the list of files. If undefined, it is set to\n            // an element with class \"files\" inside of the widget element:\n            filesContainer: undefined,\n            // By default, files are appended to the files container.\n            // Set the following option to true, to prepend files instead:\n            prependFiles: false,\n            // The expected data type of the upload response, sets the dataType\n            // option of the $.ajax upload requests:\n            dataType: 'json',\n\n            // Error and info messages:\n            messages: {\n                unknownError: 'Unknown error'\n            },\n\n            // Function returning the current number of files,\n            // used by the maxNumberOfFiles validation:\n            getNumberOfFiles: function () {\n                return this.filesContainer.children()\n                    .not('.processing').length;\n            },\n\n            // Callback to retrieve the list of files from the server response:\n            getFilesFromResponse: function (data) {\n                if (data.result && $.isArray(data.result.files)) {\n                    return data.result.files;\n                }\n                return [];\n            },\n\n            // The add callback is invoked as soon as files are added to the fileupload\n            // widget (via file input selection, drag & drop or add API call).\n            // See the basic file upload widget for more information:\n            add: function (e, data) {\n                if (e.isDefaultPrevented()) {\n                    return false;\n                }\n                var $this = $(this),\n                    that = $this.data('blueimp-fileupload') ||\n                        $this.data('fileupload'),\n                    options = that.options;\n                data.context = that._renderUpload(data.files)\n                    .data('data', data)\n                    .addClass('processing');\n                options.filesContainer[\n                    options.prependFiles ? 'prepend' : 'append'\n                ](data.context);\n                that._forceReflow(data.context);\n                that._transition(data.context);\n                data.process(function () {\n                    return $this.fileupload('process', data);\n                }).always(function () {\n                    data.context.each(function (index) {\n                        $(this).find('.size').text(\n                            that._formatFileSize(data.files[index].size)\n                        );\n                    }).removeClass('processing');\n                    that._renderPreviews(data);\n                }).done(function () {\n                    data.context.find('.start').prop('disabled', false);\n                    if ((that._trigger('added', e, data) !== false) &&\n                            (options.autoUpload || data.autoUpload) &&\n                            data.autoUpload !== false) {\n                        data.submit();\n                    }\n                }).fail(function () {\n                    if (data.files.error) {\n                        data.context.each(function (index) {\n                            var error = data.files[index].error;\n                            if (error) {\n                                $(this).find('.error').text(error);\n                            }\n                        });\n                    }\n                });\n            },\n            // Callback for the start of each file upload request:\n            send: function (e, data) {\n                if (e.isDefaultPrevented()) {\n                    return false;\n                }\n                var that = $(this).data('blueimp-fileupload') ||\n                        $(this).data('fileupload');\n                if (data.context && data.dataType &&\n                        data.dataType.substr(0, 6) === 'iframe') {\n                    // Iframe Transport does not support progress events.\n                    // In lack of an indeterminate progress bar, we set\n                    // the progress to 100%, showing the full animated bar:\n                    data.context\n                        .find('.progress').addClass(\n                            !$.support.transition && 'progress-animated'\n                        )\n                        .attr('aria-valuenow', 100)\n                        .children().first().css(\n                            'width',\n                            '100%'\n                        );\n                }\n                return that._trigger('sent', e, data);\n            },\n            // Callback for successful uploads:\n            done: function (e, data) {\n                if (e.isDefaultPrevented()) {\n                    return false;\n                }\n                var that = $(this).data('blueimp-fileupload') ||\n                        $(this).data('fileupload'),\n                    getFilesFromResponse = data.getFilesFromResponse ||\n                        that.options.getFilesFromResponse,\n                    files = getFilesFromResponse(data),\n                    template,\n                    deferred;\n                if (data.context) {\n                    data.context.each(function (index) {\n                        var file = files[index] ||\n                                {error: 'Empty file upload result'};\n                        deferred = that._addFinishedDeferreds();\n                        that._transition($(this)).done(\n                            function () {\n                                var node = $(this);\n                                template = that._renderDownload([file])\n                                    .replaceAll(node);\n                                that._forceReflow(template);\n                                that._transition(template).done(\n                                    function () {\n                                        data.context = $(this);\n                                        that._trigger('completed', e, data);\n                                        that._trigger('finished', e, data);\n                                        deferred.resolve();\n                                    }\n                                );\n                            }\n                        );\n                    });\n                } else {\n                    template = that._renderDownload(files)[\n                        that.options.prependFiles ? 'prependTo' : 'appendTo'\n                    ](that.options.filesContainer);\n                    that._forceReflow(template);\n                    deferred = that._addFinishedDeferreds();\n                    that._transition(template).done(\n                        function () {\n                            data.context = $(this);\n                            that._trigger('completed', e, data);\n                            that._trigger('finished', e, data);\n                            deferred.resolve();\n                        }\n                    );\n                }\n            },\n            // Callback for failed (abort or error) uploads:\n            fail: function (e, data) {\n                if (e.isDefaultPrevented()) {\n                    return false;\n                }\n                var that = $(this).data('blueimp-fileupload') ||\n                        $(this).data('fileupload'),\n                    template,\n                    deferred;\n                if (data.context) {\n                    data.context.each(function (index) {\n                        if (data.errorThrown !== 'abort') {\n                            var file = data.files[index];\n                            file.error = file.error || data.errorThrown ||\n                                data.i18n('unknownError');\n                            deferred = that._addFinishedDeferreds();\n                            that._transition($(this)).done(\n                                function () {\n                                    var node = $(this);\n                                    template = that._renderDownload([file])\n                                        .replaceAll(node);\n                                    that._forceReflow(template);\n                                    that._transition(template).done(\n                                        function () {\n                                            data.context = $(this);\n                                            that._trigger('failed', e, data);\n                                            that._trigger('finished', e, data);\n                                            deferred.resolve();\n                                        }\n                                    );\n                                }\n                            );\n                        } else {\n                            deferred = that._addFinishedDeferreds();\n                            that._transition($(this)).done(\n                                function () {\n                                    $(this).remove();\n                                    that._trigger('failed', e, data);\n                                    that._trigger('finished', e, data);\n                                    deferred.resolve();\n                                }\n                            );\n                        }\n                    });\n                } else if (data.errorThrown !== 'abort') {\n                    data.context = that._renderUpload(data.files)[\n                        that.options.prependFiles ? 'prependTo' : 'appendTo'\n                    ](that.options.filesContainer)\n                        .data('data', data);\n                    that._forceReflow(data.context);\n                    deferred = that._addFinishedDeferreds();\n                    that._transition(data.context).done(\n                        function () {\n                            data.context = $(this);\n                            that._trigger('failed', e, data);\n                            that._trigger('finished', e, data);\n                            deferred.resolve();\n                        }\n                    );\n                } else {\n                    that._trigger('failed', e, data);\n                    that._trigger('finished', e, data);\n                    that._addFinishedDeferreds().resolve();\n                }\n            },\n            // Callback for upload progress events:\n            progress: function (e, data) {\n                if (e.isDefaultPrevented()) {\n                    return false;\n                }\n                var progress = Math.floor(data.loaded / data.total * 100);\n                if (data.context) {\n                    data.context.each(function () {\n                        $(this).find('.progress')\n                            .attr('aria-valuenow', progress)\n                            .children().first().css(\n                                'width',\n                                progress + '%'\n                            );\n                    });\n                }\n            },\n            // Callback for global upload progress events:\n            progressall: function (e, data) {\n                if (e.isDefaultPrevented()) {\n                    return false;\n                }\n                var $this = $(this),\n                    progress = Math.floor(data.loaded / data.total * 100),\n                    globalProgressNode = $this.find('.fileupload-progress'),\n                    extendedProgressNode = globalProgressNode\n                        .find('.progress-extended');\n                if (extendedProgressNode.length) {\n                    extendedProgressNode.html(\n                        ($this.data('blueimp-fileupload') || $this.data('fileupload'))\n                            ._renderExtendedProgress(data)\n                    );\n                }\n                globalProgressNode\n                    .find('.progress')\n                    .attr('aria-valuenow', progress)\n                    .children().first().css(\n                        'width',\n                        progress + '%'\n                    );\n            },\n            // Callback for uploads start, equivalent to the global ajaxStart event:\n            start: function (e) {\n                if (e.isDefaultPrevented()) {\n                    return false;\n                }\n                var that = $(this).data('blueimp-fileupload') ||\n                        $(this).data('fileupload');\n                that._resetFinishedDeferreds();\n                that._transition($(this).find('.fileupload-progress')).done(\n                    function () {\n                        that._trigger('started', e);\n                    }\n                );\n            },\n            // Callback for uploads stop, equivalent to the global ajaxStop event:\n            stop: function (e) {\n                if (e.isDefaultPrevented()) {\n                    return false;\n                }\n                var that = $(this).data('blueimp-fileupload') ||\n                        $(this).data('fileupload'),\n                    deferred = that._addFinishedDeferreds();\n                $.when.apply($, that._getFinishedDeferreds())\n                    .done(function () {\n                        that._trigger('stopped', e);\n                    });\n                that._transition($(this).find('.fileupload-progress')).done(\n                    function () {\n                        $(this).find('.progress')\n                            .attr('aria-valuenow', '0')\n                            .children().first().css('width', '0%');\n                        $(this).find('.progress-extended').html('&nbsp;');\n                        deferred.resolve();\n                    }\n                );\n            },\n            processstart: function (e) {\n                if (e.isDefaultPrevented()) {\n                    return false;\n                }\n                $(this).addClass('fileupload-processing');\n            },\n            processstop: function (e) {\n                if (e.isDefaultPrevented()) {\n                    return false;\n                }\n                $(this).removeClass('fileupload-processing');\n            },\n            // Callback for file deletion:\n            destroy: function (e, data) {\n                if (e.isDefaultPrevented()) {\n                    return false;\n                }\n                var that = $(this).data('blueimp-fileupload') ||\n                        $(this).data('fileupload'),\n                    removeNode = function () {\n                        that._transition(data.context).done(\n                            function () {\n                                $(this).remove();\n                                that._trigger('destroyed', e, data);\n                            }\n                        );\n                    };\n                if (data.url) {\n                    data.dataType = data.dataType || that.options.dataType;\n                    $.ajax(data).done(removeNode).fail(function () {\n                        that._trigger('destroyfailed', e, data);\n                    });\n                } else {\n                    removeNode();\n                }\n            }\n        },\n\n        _resetFinishedDeferreds: function () {\n            this._finishedUploads = [];\n        },\n\n        _addFinishedDeferreds: function (deferred) {\n            if (!deferred) {\n                deferred = $.Deferred();\n            }\n            this._finishedUploads.push(deferred);\n            return deferred;\n        },\n\n        _getFinishedDeferreds: function () {\n            return this._finishedUploads;\n        },\n\n        // Link handler, that allows to download files\n        // by drag & drop of the links to the desktop:\n        _enableDragToDesktop: function () {\n            var link = $(this),\n                url = link.prop('href'),\n                name = link.prop('download'),\n                type = 'application/octet-stream';\n            link.bind('dragstart', function (e) {\n                try {\n                    e.originalEvent.dataTransfer.setData(\n                        'DownloadURL',\n                        [type, name, url].join(':')\n                    );\n                } catch (ignore) {}\n            });\n        },\n\n        _formatFileSize: function (bytes) {\n            if (typeof bytes !== 'number') {\n                return '';\n            }\n            if (bytes >= 1000000000) {\n                return (bytes / 1000000000).toFixed(2) + ' GB';\n            }\n            if (bytes >= 1000000) {\n                return (bytes / 1000000).toFixed(2) + ' MB';\n            }\n            return (bytes / 1000).toFixed(2) + ' KB';\n        },\n\n        _formatBitrate: function (bits) {\n            if (typeof bits !== 'number') {\n                return '';\n            }\n            if (bits >= 1000000000) {\n                return (bits / 1000000000).toFixed(2) + ' Gbit/s';\n            }\n            if (bits >= 1000000) {\n                return (bits / 1000000).toFixed(2) + ' Mbit/s';\n            }\n            if (bits >= 1000) {\n                return (bits / 1000).toFixed(2) + ' kbit/s';\n            }\n            return bits.toFixed(2) + ' bit/s';\n        },\n\n        _formatTime: function (seconds) {\n            var date = new Date(seconds * 1000),\n                days = Math.floor(seconds / 86400);\n            days = days ? days + 'd ' : '';\n            return days +\n                ('0' + date.getUTCHours()).slice(-2) + ':' +\n                ('0' + date.getUTCMinutes()).slice(-2) + ':' +\n                ('0' + date.getUTCSeconds()).slice(-2);\n        },\n\n        _formatPercentage: function (floatValue) {\n            return (floatValue * 100).toFixed(2) + ' %';\n        },\n\n        _renderExtendedProgress: function (data) {\n            return this._formatBitrate(data.bitrate) + ' | ' +\n                this._formatTime(\n                    (data.total - data.loaded) * 8 / data.bitrate\n                ) + ' | ' +\n                this._formatPercentage(\n                    data.loaded / data.total\n                ) + ' | ' +\n                this._formatFileSize(data.loaded) + ' / ' +\n                this._formatFileSize(data.total);\n        },\n\n        _renderTemplate: function (func, files) {\n            if (!func) {\n                return $();\n            }\n            var result = func({\n                files: files,\n                formatFileSize: this._formatFileSize,\n                options: this.options\n            });\n            if (result instanceof $) {\n                return result;\n            }\n            return $(this.options.templatesContainer).html(result).children();\n        },\n\n        _renderPreviews: function (data) {\n            data.context.find('.preview').each(function (index, elm) {\n                $(elm).append(data.files[index].preview);\n            });\n        },\n\n        _renderUpload: function (files) {\n            return this._renderTemplate(\n                this.options.uploadTemplate,\n                files\n            );\n        },\n\n        _renderDownload: function (files) {\n            return this._renderTemplate(\n                this.options.downloadTemplate,\n                files\n            ).find('a[download]').each(this._enableDragToDesktop).end();\n        },\n\n        _startHandler: function (e) {\n            e.preventDefault();\n            var button = $(e.currentTarget),\n                template = button.closest('.template-upload'),\n                data = template.data('data');\n            button.prop('disabled', true);\n            if (data && data.submit) {\n                data.submit();\n            }\n        },\n\n        _cancelHandler: function (e) {\n            e.preventDefault();\n            var template = $(e.currentTarget)\n                    .closest('.template-upload,.template-download'),\n                data = template.data('data') || {};\n            data.context = data.context || template;\n            if (data.abort) {\n                data.abort();\n            } else {\n                data.errorThrown = 'abort';\n                this._trigger('fail', e, data);\n            }\n        },\n\n        _deleteHandler: function (e) {\n            e.preventDefault();\n            var button = $(e.currentTarget);\n            this._trigger('destroy', e, $.extend({\n                context: button.closest('.template-download'),\n                type: 'DELETE'\n            }, button.data()));\n        },\n\n        _forceReflow: function (node) {\n            return $.support.transition && node.length &&\n                node[0].offsetWidth;\n        },\n\n        _transition: function (node) {\n            var dfd = $.Deferred();\n            if ($.support.transition && node.hasClass('fade') && node.is(':visible')) {\n                node.bind(\n                    $.support.transition.end,\n                    function (e) {\n                        // Make sure we don't respond to other transitions events\n                        // in the container element, e.g. from button elements:\n                        if (e.target === node[0]) {\n                            node.unbind($.support.transition.end);\n                            dfd.resolveWith(node);\n                        }\n                    }\n                ).toggleClass('in');\n            } else {\n                node.toggleClass('in');\n                dfd.resolveWith(node);\n            }\n            return dfd;\n        },\n\n        _initButtonBarEventHandlers: function () {\n            var fileUploadButtonBar = this.element.find('.fileupload-buttonbar'),\n                filesList = this.options.filesContainer;\n            this._on(fileUploadButtonBar.find('.start'), {\n                click: function (e) {\n                    e.preventDefault();\n                    filesList.find('.start').click();\n                }\n            });\n            this._on(fileUploadButtonBar.find('.cancel'), {\n                click: function (e) {\n                    e.preventDefault();\n                    filesList.find('.cancel').click();\n                }\n            });\n            this._on(fileUploadButtonBar.find('.delete'), {\n                click: function (e) {\n                    e.preventDefault();\n                    filesList.find('.toggle:checked')\n                        .closest('.template-download')\n                        .find('.delete').click();\n                    fileUploadButtonBar.find('.toggle')\n                        .prop('checked', false);\n                }\n            });\n            this._on(fileUploadButtonBar.find('.toggle'), {\n                change: function (e) {\n                    filesList.find('.toggle').prop(\n                        'checked',\n                        $(e.currentTarget).is(':checked')\n                    );\n                }\n            });\n        },\n\n        _destroyButtonBarEventHandlers: function () {\n            this._off(\n                this.element.find('.fileupload-buttonbar')\n                    .find('.start, .cancel, .delete'),\n                'click'\n            );\n            this._off(\n                this.element.find('.fileupload-buttonbar .toggle'),\n                'change.'\n            );\n        },\n\n        _initEventHandlers: function () {\n            this._super();\n            this._on(this.options.filesContainer, {\n                'click .start': this._startHandler,\n                'click .cancel': this._cancelHandler,\n                'click .delete': this._deleteHandler\n            });\n            this._initButtonBarEventHandlers();\n        },\n\n        _destroyEventHandlers: function () {\n            this._destroyButtonBarEventHandlers();\n            this._off(this.options.filesContainer, 'click');\n            this._super();\n        },\n\n        _enableFileInputButton: function () {\n            this.element.find('.fileinput-button input')\n                .prop('disabled', false)\n                .parent().removeClass('disabled');\n        },\n\n        _disableFileInputButton: function () {\n            this.element.find('.fileinput-button input')\n                .prop('disabled', true)\n                .parent().addClass('disabled');\n        },\n\n        _initTemplates: function () {\n            var options = this.options;\n            options.templatesContainer = this.document[0].createElement(\n                options.filesContainer.prop('nodeName')\n            );\n            if (tmpl) {\n                if (options.uploadTemplateId) {\n                    options.uploadTemplate = tmpl(options.uploadTemplateId);\n                }\n                if (options.downloadTemplateId) {\n                    options.downloadTemplate = tmpl(options.downloadTemplateId);\n                }\n            }\n        },\n\n        _initFilesContainer: function () {\n            var options = this.options;\n            if (options.filesContainer === undefined) {\n                options.filesContainer = this.element.find('.files');\n            } else if (!(options.filesContainer instanceof $)) {\n                options.filesContainer = $(options.filesContainer);\n            }\n        },\n\n        _initSpecialOptions: function () {\n            this._super();\n            this._initFilesContainer();\n            this._initTemplates();\n        },\n\n        _create: function () {\n            this._super();\n            this._resetFinishedDeferreds();\n            if (!$.support.fileInput) {\n                this._disableFileInputButton();\n            }\n        },\n\n        enable: function () {\n            var wasDisabled = false;\n            if (this.options.disabled) {\n                wasDisabled = true;\n            }\n            this._super();\n            if (wasDisabled) {\n                this.element.find('input, button').prop('disabled', false);\n                this._enableFileInputButton();\n            }\n        },\n\n        disable: function () {\n            if (!this.options.disabled) {\n                this.element.find('input, button').prop('disabled', true);\n                this._disableFileInputButton();\n            }\n            this._super();\n        }\n\n    });\n\n}));\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/blueimp-file-upload/js/jquery.fileupload-ui.js\n// module id = 13\n// module chunks = 0","/*\n * jQuery Iframe Transport Plugin\n * https://github.com/blueimp/jQuery-File-Upload\n *\n * Copyright 2011, Sebastian Tschan\n * https://blueimp.net\n *\n * Licensed under the MIT license:\n * https://opensource.org/licenses/MIT\n */\n\n/* global define, require, window, document, JSON */\n\n;(function (factory) {\n    'use strict';\n    if (typeof define === 'function' && define.amd) {\n        // Register as an anonymous AMD module:\n        define(['jquery'], factory);\n    } else if (typeof exports === 'object') {\n        // Node/CommonJS:\n        factory(require('jquery'));\n    } else {\n        // Browser globals:\n        factory(window.jQuery);\n    }\n}(function ($) {\n    'use strict';\n\n    // Helper variable to create unique names for the transport iframes:\n    var counter = 0,\n        jsonAPI = $,\n        jsonParse = 'parseJSON';\n\n    if ('JSON' in window && 'parse' in JSON) {\n      jsonAPI = JSON;\n      jsonParse = 'parse';\n    }\n\n    // The iframe transport accepts four additional options:\n    // options.fileInput: a jQuery collection of file input fields\n    // options.paramName: the parameter name for the file form data,\n    //  overrides the name property of the file input field(s),\n    //  can be a string or an array of strings.\n    // options.formData: an array of objects with name and value properties,\n    //  equivalent to the return data of .serializeArray(), e.g.:\n    //  [{name: 'a', value: 1}, {name: 'b', value: 2}]\n    // options.initialIframeSrc: the URL of the initial iframe src,\n    //  by default set to \"javascript:false;\"\n    $.ajaxTransport('iframe', function (options) {\n        if (options.async) {\n            // javascript:false as initial iframe src\n            // prevents warning popups on HTTPS in IE6:\n            /*jshint scripturl: true */\n            var initialIframeSrc = options.initialIframeSrc || 'javascript:false;',\n            /*jshint scripturl: false */\n                form,\n                iframe,\n                addParamChar;\n            return {\n                send: function (_, completeCallback) {\n                    form = $('<form style=\"display:none;\"></form>');\n                    form.attr('accept-charset', options.formAcceptCharset);\n                    addParamChar = /\\?/.test(options.url) ? '&' : '?';\n                    // XDomainRequest only supports GET and POST:\n                    if (options.type === 'DELETE') {\n                        options.url = options.url + addParamChar + '_method=DELETE';\n                        options.type = 'POST';\n                    } else if (options.type === 'PUT') {\n                        options.url = options.url + addParamChar + '_method=PUT';\n                        options.type = 'POST';\n                    } else if (options.type === 'PATCH') {\n                        options.url = options.url + addParamChar + '_method=PATCH';\n                        options.type = 'POST';\n                    }\n                    // IE versions below IE8 cannot set the name property of\n                    // elements that have already been added to the DOM,\n                    // so we set the name along with the iframe HTML markup:\n                    counter += 1;\n                    iframe = $(\n                        '<iframe src=\"' + initialIframeSrc +\n                            '\" name=\"iframe-transport-' + counter + '\"></iframe>'\n                    ).bind('load', function () {\n                        var fileInputClones,\n                            paramNames = $.isArray(options.paramName) ?\n                                    options.paramName : [options.paramName];\n                        iframe\n                            .unbind('load')\n                            .bind('load', function () {\n                                var response;\n                                // Wrap in a try/catch block to catch exceptions thrown\n                                // when trying to access cross-domain iframe contents:\n                                try {\n                                    response = iframe.contents();\n                                    // Google Chrome and Firefox do not throw an\n                                    // exception when calling iframe.contents() on\n                                    // cross-domain requests, so we unify the response:\n                                    if (!response.length || !response[0].firstChild) {\n                                        throw new Error();\n                                    }\n                                } catch (e) {\n                                    response = undefined;\n                                }\n                                // The complete callback returns the\n                                // iframe content document as response object:\n                                completeCallback(\n                                    200,\n                                    'success',\n                                    {'iframe': response}\n                                );\n                                // Fix for IE endless progress bar activity bug\n                                // (happens on form submits to iframe targets):\n                                $('<iframe src=\"' + initialIframeSrc + '\"></iframe>')\n                                    .appendTo(form);\n                                window.setTimeout(function () {\n                                    // Removing the form in a setTimeout call\n                                    // allows Chrome's developer tools to display\n                                    // the response result\n                                    form.remove();\n                                }, 0);\n                            });\n                        form\n                            .prop('target', iframe.prop('name'))\n                            .prop('action', options.url)\n                            .prop('method', options.type);\n                        if (options.formData) {\n                            $.each(options.formData, function (index, field) {\n                                $('<input type=\"hidden\"/>')\n                                    .prop('name', field.name)\n                                    .val(field.value)\n                                    .appendTo(form);\n                            });\n                        }\n                        if (options.fileInput && options.fileInput.length &&\n                                options.type === 'POST') {\n                            fileInputClones = options.fileInput.clone();\n                            // Insert a clone for each file input field:\n                            options.fileInput.after(function (index) {\n                                return fileInputClones[index];\n                            });\n                            if (options.paramName) {\n                                options.fileInput.each(function (index) {\n                                    $(this).prop(\n                                        'name',\n                                        paramNames[index] || options.paramName\n                                    );\n                                });\n                            }\n                            // Appending the file input fields to the hidden form\n                            // removes them from their original location:\n                            form\n                                .append(options.fileInput)\n                                .prop('enctype', 'multipart/form-data')\n                                // enctype must be set as encoding for IE:\n                                .prop('encoding', 'multipart/form-data');\n                            // Remove the HTML5 form attribute from the input(s):\n                            options.fileInput.removeAttr('form');\n                        }\n                        form.submit();\n                        // Insert the file input fields at their original location\n                        // by replacing the clones with the originals:\n                        if (fileInputClones && fileInputClones.length) {\n                            options.fileInput.each(function (index, input) {\n                                var clone = $(fileInputClones[index]);\n                                // Restore the original name and form properties:\n                                $(input)\n                                    .prop('name', clone.prop('name'))\n                                    .attr('form', clone.attr('form'));\n                                clone.replaceWith(input);\n                            });\n                        }\n                    });\n                    form.append(iframe).appendTo(document.body);\n                },\n                abort: function () {\n                    if (iframe) {\n                        // javascript:false as iframe src aborts the request\n                        // and prevents warning popups on HTTPS in IE6.\n                        // concat is used to avoid the \"Script URL\" JSLint error:\n                        iframe\n                            .unbind('load')\n                            .prop('src', initialIframeSrc);\n                    }\n                    if (form) {\n                        form.remove();\n                    }\n                }\n            };\n        }\n    });\n\n    // The iframe transport returns the iframe content document as response.\n    // The following adds converters from iframe to text, json, html, xml\n    // and script.\n    // Please note that the Content-Type for JSON responses has to be text/plain\n    // or text/html, if the browser doesn't include application/json in the\n    // Accept header, else IE will show a download dialog.\n    // The Content-Type for XML responses on the other hand has to be always\n    // application/xml or text/xml, so IE properly parses the XML response.\n    // See also\n    // https://github.com/blueimp/jQuery-File-Upload/wiki/Setup#content-type-negotiation\n    $.ajaxSetup({\n        converters: {\n            'iframe text': function (iframe) {\n                return iframe && $(iframe[0].body).text();\n            },\n            'iframe json': function (iframe) {\n                return iframe && jsonAPI[jsonParse]($(iframe[0].body).text());\n            },\n            'iframe html': function (iframe) {\n                return iframe && $(iframe[0].body).html();\n            },\n            'iframe xml': function (iframe) {\n                var xmlDoc = iframe && iframe[0];\n                return xmlDoc && $.isXMLDoc(xmlDoc) ? xmlDoc :\n                        $.parseXML((xmlDoc.XMLDocument && xmlDoc.XMLDocument.xml) ||\n                            $(xmlDoc.body).html());\n            },\n            'iframe script': function (iframe) {\n                return iframe && $.globalEval($(iframe[0].body).text());\n            }\n        }\n    });\n\n}));\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/blueimp-file-upload/js/jquery.iframe-transport.js\n// module id = 14\n// module chunks = 0","module.exports = require('./load-image')\n\nrequire('./load-image-scale')\nrequire('./load-image-meta')\nrequire('./load-image-fetch')\nrequire('./load-image-exif')\nrequire('./load-image-exif-map')\nrequire('./load-image-orientation')\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/blueimp-load-image/js/index.js\n// module id = 15\n// module chunks = 0","module.exports = __webpack_public_path__ + \"upload-icon.png\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./app/upload-icon.png\n// module id = 17\n// module chunks = 0","/*! jQuery UI - v1.11.4+CommonJS - 2015-08-28\n* http://jqueryui.com\n* Includes: widget.js\n* Copyright 2015 jQuery Foundation and other contributors; Licensed MIT */\n\n(function( factory ) {\n\tif ( typeof define === \"function\" && define.amd ) {\n\n\t\t// AMD. Register as an anonymous module.\n\t\tdefine([ \"jquery\" ], factory );\n\n\t} else if ( typeof exports === \"object\" ) {\n\n\t\t// Node/CommonJS\n\t\tfactory( require( \"jquery\" ) );\n\n\t} else {\n\n\t\t// Browser globals\n\t\tfactory( jQuery );\n\t}\n}(function( $ ) {\n/*!\n * jQuery UI Widget 1.11.4\n * http://jqueryui.com\n *\n * Copyright jQuery Foundation and other contributors\n * Released under the MIT license.\n * http://jquery.org/license\n *\n * http://api.jqueryui.com/jQuery.widget/\n */\n\n\nvar widget_uuid = 0,\n\twidget_slice = Array.prototype.slice;\n\n$.cleanData = (function( orig ) {\n\treturn function( elems ) {\n\t\tvar events, elem, i;\n\t\tfor ( i = 0; (elem = elems[i]) != null; i++ ) {\n\t\t\ttry {\n\n\t\t\t\t// Only trigger remove when necessary to save time\n\t\t\t\tevents = $._data( elem, \"events\" );\n\t\t\t\tif ( events && events.remove ) {\n\t\t\t\t\t$( elem ).triggerHandler( \"remove\" );\n\t\t\t\t}\n\n\t\t\t// http://bugs.jquery.com/ticket/8235\n\t\t\t} catch ( e ) {}\n\t\t}\n\t\torig( elems );\n\t};\n})( $.cleanData );\n\n$.widget = function( name, base, prototype ) {\n\tvar fullName, existingConstructor, constructor, basePrototype,\n\t\t// proxiedPrototype allows the provided prototype to remain unmodified\n\t\t// so that it can be used as a mixin for multiple widgets (#8876)\n\t\tproxiedPrototype = {},\n\t\tnamespace = name.split( \".\" )[ 0 ];\n\n\tname = name.split( \".\" )[ 1 ];\n\tfullName = namespace + \"-\" + name;\n\n\tif ( !prototype ) {\n\t\tprototype = base;\n\t\tbase = $.Widget;\n\t}\n\n\t// create selector for plugin\n\t$.expr[ \":\" ][ fullName.toLowerCase() ] = function( elem ) {\n\t\treturn !!$.data( elem, fullName );\n\t};\n\n\t$[ namespace ] = $[ namespace ] || {};\n\texistingConstructor = $[ namespace ][ name ];\n\tconstructor = $[ namespace ][ name ] = function( options, element ) {\n\t\t// allow instantiation without \"new\" keyword\n\t\tif ( !this._createWidget ) {\n\t\t\treturn new constructor( options, element );\n\t\t}\n\n\t\t// allow instantiation without initializing for simple inheritance\n\t\t// must use \"new\" keyword (the code above always passes args)\n\t\tif ( arguments.length ) {\n\t\t\tthis._createWidget( options, element );\n\t\t}\n\t};\n\t// extend with the existing constructor to carry over any static properties\n\t$.extend( constructor, existingConstructor, {\n\t\tversion: prototype.version,\n\t\t// copy the object used to create the prototype in case we need to\n\t\t// redefine the widget later\n\t\t_proto: $.extend( {}, prototype ),\n\t\t// track widgets that inherit from this widget in case this widget is\n\t\t// redefined after a widget inherits from it\n\t\t_childConstructors: []\n\t});\n\n\tbasePrototype = new base();\n\t// we need to make the options hash a property directly on the new instance\n\t// otherwise we'll modify the options hash on the prototype that we're\n\t// inheriting from\n\tbasePrototype.options = $.widget.extend( {}, basePrototype.options );\n\t$.each( prototype, function( prop, value ) {\n\t\tif ( !$.isFunction( value ) ) {\n\t\t\tproxiedPrototype[ prop ] = value;\n\t\t\treturn;\n\t\t}\n\t\tproxiedPrototype[ prop ] = (function() {\n\t\t\tvar _super = function() {\n\t\t\t\t\treturn base.prototype[ prop ].apply( this, arguments );\n\t\t\t\t},\n\t\t\t\t_superApply = function( args ) {\n\t\t\t\t\treturn base.prototype[ prop ].apply( this, args );\n\t\t\t\t};\n\t\t\treturn function() {\n\t\t\t\tvar __super = this._super,\n\t\t\t\t\t__superApply = this._superApply,\n\t\t\t\t\treturnValue;\n\n\t\t\t\tthis._super = _super;\n\t\t\t\tthis._superApply = _superApply;\n\n\t\t\t\treturnValue = value.apply( this, arguments );\n\n\t\t\t\tthis._super = __super;\n\t\t\t\tthis._superApply = __superApply;\n\n\t\t\t\treturn returnValue;\n\t\t\t};\n\t\t})();\n\t});\n\tconstructor.prototype = $.widget.extend( basePrototype, {\n\t\t// TODO: remove support for widgetEventPrefix\n\t\t// always use the name + a colon as the prefix, e.g., draggable:start\n\t\t// don't prefix for widgets that aren't DOM-based\n\t\twidgetEventPrefix: existingConstructor ? (basePrototype.widgetEventPrefix || name) : name\n\t}, proxiedPrototype, {\n\t\tconstructor: constructor,\n\t\tnamespace: namespace,\n\t\twidgetName: name,\n\t\twidgetFullName: fullName\n\t});\n\n\t// If this widget is being redefined then we need to find all widgets that\n\t// are inheriting from it and redefine all of them so that they inherit from\n\t// the new version of this widget. We're essentially trying to replace one\n\t// level in the prototype chain.\n\tif ( existingConstructor ) {\n\t\t$.each( existingConstructor._childConstructors, function( i, child ) {\n\t\t\tvar childPrototype = child.prototype;\n\n\t\t\t// redefine the child widget using the same prototype that was\n\t\t\t// originally used, but inherit from the new version of the base\n\t\t\t$.widget( childPrototype.namespace + \".\" + childPrototype.widgetName, constructor, child._proto );\n\t\t});\n\t\t// remove the list of existing child constructors from the old constructor\n\t\t// so the old child constructors can be garbage collected\n\t\tdelete existingConstructor._childConstructors;\n\t} else {\n\t\tbase._childConstructors.push( constructor );\n\t}\n\n\t$.widget.bridge( name, constructor );\n\n\treturn constructor;\n};\n\n$.widget.extend = function( target ) {\n\tvar input = widget_slice.call( arguments, 1 ),\n\t\tinputIndex = 0,\n\t\tinputLength = input.length,\n\t\tkey,\n\t\tvalue;\n\tfor ( ; inputIndex < inputLength; inputIndex++ ) {\n\t\tfor ( key in input[ inputIndex ] ) {\n\t\t\tvalue = input[ inputIndex ][ key ];\n\t\t\tif ( input[ inputIndex ].hasOwnProperty( key ) && value !== undefined ) {\n\t\t\t\t// Clone objects\n\t\t\t\tif ( $.isPlainObject( value ) ) {\n\t\t\t\t\ttarget[ key ] = $.isPlainObject( target[ key ] ) ?\n\t\t\t\t\t\t$.widget.extend( {}, target[ key ], value ) :\n\t\t\t\t\t\t// Don't extend strings, arrays, etc. with objects\n\t\t\t\t\t\t$.widget.extend( {}, value );\n\t\t\t\t// Copy everything else by reference\n\t\t\t\t} else {\n\t\t\t\t\ttarget[ key ] = value;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn target;\n};\n\n$.widget.bridge = function( name, object ) {\n\tvar fullName = object.prototype.widgetFullName || name;\n\t$.fn[ name ] = function( options ) {\n\t\tvar isMethodCall = typeof options === \"string\",\n\t\t\targs = widget_slice.call( arguments, 1 ),\n\t\t\treturnValue = this;\n\n\t\tif ( isMethodCall ) {\n\t\t\tthis.each(function() {\n\t\t\t\tvar methodValue,\n\t\t\t\t\tinstance = $.data( this, fullName );\n\t\t\t\tif ( options === \"instance\" ) {\n\t\t\t\t\treturnValue = instance;\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\tif ( !instance ) {\n\t\t\t\t\treturn $.error( \"cannot call methods on \" + name + \" prior to initialization; \" +\n\t\t\t\t\t\t\"attempted to call method '\" + options + \"'\" );\n\t\t\t\t}\n\t\t\t\tif ( !$.isFunction( instance[options] ) || options.charAt( 0 ) === \"_\" ) {\n\t\t\t\t\treturn $.error( \"no such method '\" + options + \"' for \" + name + \" widget instance\" );\n\t\t\t\t}\n\t\t\t\tmethodValue = instance[ options ].apply( instance, args );\n\t\t\t\tif ( methodValue !== instance && methodValue !== undefined ) {\n\t\t\t\t\treturnValue = methodValue && methodValue.jquery ?\n\t\t\t\t\t\treturnValue.pushStack( methodValue.get() ) :\n\t\t\t\t\t\tmethodValue;\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t});\n\t\t} else {\n\n\t\t\t// Allow multiple hashes to be passed on init\n\t\t\tif ( args.length ) {\n\t\t\t\toptions = $.widget.extend.apply( null, [ options ].concat(args) );\n\t\t\t}\n\n\t\t\tthis.each(function() {\n\t\t\t\tvar instance = $.data( this, fullName );\n\t\t\t\tif ( instance ) {\n\t\t\t\t\tinstance.option( options || {} );\n\t\t\t\t\tif ( instance._init ) {\n\t\t\t\t\t\tinstance._init();\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t$.data( this, fullName, new object( options, this ) );\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\treturn returnValue;\n\t};\n};\n\n$.Widget = function( /* options, element */ ) {};\n$.Widget._childConstructors = [];\n\n$.Widget.prototype = {\n\twidgetName: \"widget\",\n\twidgetEventPrefix: \"\",\n\tdefaultElement: \"<div>\",\n\toptions: {\n\t\tdisabled: false,\n\n\t\t// callbacks\n\t\tcreate: null\n\t},\n\t_createWidget: function( options, element ) {\n\t\telement = $( element || this.defaultElement || this )[ 0 ];\n\t\tthis.element = $( element );\n\t\tthis.uuid = widget_uuid++;\n\t\tthis.eventNamespace = \".\" + this.widgetName + this.uuid;\n\n\t\tthis.bindings = $();\n\t\tthis.hoverable = $();\n\t\tthis.focusable = $();\n\n\t\tif ( element !== this ) {\n\t\t\t$.data( element, this.widgetFullName, this );\n\t\t\tthis._on( true, this.element, {\n\t\t\t\tremove: function( event ) {\n\t\t\t\t\tif ( event.target === element ) {\n\t\t\t\t\t\tthis.destroy();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t\tthis.document = $( element.style ?\n\t\t\t\t// element within the document\n\t\t\t\telement.ownerDocument :\n\t\t\t\t// element is window or document\n\t\t\t\telement.document || element );\n\t\t\tthis.window = $( this.document[0].defaultView || this.document[0].parentWindow );\n\t\t}\n\n\t\tthis.options = $.widget.extend( {},\n\t\t\tthis.options,\n\t\t\tthis._getCreateOptions(),\n\t\t\toptions );\n\n\t\tthis._create();\n\t\tthis._trigger( \"create\", null, this._getCreateEventData() );\n\t\tthis._init();\n\t},\n\t_getCreateOptions: $.noop,\n\t_getCreateEventData: $.noop,\n\t_create: $.noop,\n\t_init: $.noop,\n\n\tdestroy: function() {\n\t\tthis._destroy();\n\t\t// we can probably remove the unbind calls in 2.0\n\t\t// all event bindings should go through this._on()\n\t\tthis.element\n\t\t\t.unbind( this.eventNamespace )\n\t\t\t.removeData( this.widgetFullName )\n\t\t\t// support: jquery <1.6.3\n\t\t\t// http://bugs.jquery.com/ticket/9413\n\t\t\t.removeData( $.camelCase( this.widgetFullName ) );\n\t\tthis.widget()\n\t\t\t.unbind( this.eventNamespace )\n\t\t\t.removeAttr( \"aria-disabled\" )\n\t\t\t.removeClass(\n\t\t\t\tthis.widgetFullName + \"-disabled \" +\n\t\t\t\t\"ui-state-disabled\" );\n\n\t\t// clean up events and states\n\t\tthis.bindings.unbind( this.eventNamespace );\n\t\tthis.hoverable.removeClass( \"ui-state-hover\" );\n\t\tthis.focusable.removeClass( \"ui-state-focus\" );\n\t},\n\t_destroy: $.noop,\n\n\twidget: function() {\n\t\treturn this.element;\n\t},\n\n\toption: function( key, value ) {\n\t\tvar options = key,\n\t\t\tparts,\n\t\t\tcurOption,\n\t\t\ti;\n\n\t\tif ( arguments.length === 0 ) {\n\t\t\t// don't return a reference to the internal hash\n\t\t\treturn $.widget.extend( {}, this.options );\n\t\t}\n\n\t\tif ( typeof key === \"string\" ) {\n\t\t\t// handle nested keys, e.g., \"foo.bar\" => { foo: { bar: ___ } }\n\t\t\toptions = {};\n\t\t\tparts = key.split( \".\" );\n\t\t\tkey = parts.shift();\n\t\t\tif ( parts.length ) {\n\t\t\t\tcurOption = options[ key ] = $.widget.extend( {}, this.options[ key ] );\n\t\t\t\tfor ( i = 0; i < parts.length - 1; i++ ) {\n\t\t\t\t\tcurOption[ parts[ i ] ] = curOption[ parts[ i ] ] || {};\n\t\t\t\t\tcurOption = curOption[ parts[ i ] ];\n\t\t\t\t}\n\t\t\t\tkey = parts.pop();\n\t\t\t\tif ( arguments.length === 1 ) {\n\t\t\t\t\treturn curOption[ key ] === undefined ? null : curOption[ key ];\n\t\t\t\t}\n\t\t\t\tcurOption[ key ] = value;\n\t\t\t} else {\n\t\t\t\tif ( arguments.length === 1 ) {\n\t\t\t\t\treturn this.options[ key ] === undefined ? null : this.options[ key ];\n\t\t\t\t}\n\t\t\t\toptions[ key ] = value;\n\t\t\t}\n\t\t}\n\n\t\tthis._setOptions( options );\n\n\t\treturn this;\n\t},\n\t_setOptions: function( options ) {\n\t\tvar key;\n\n\t\tfor ( key in options ) {\n\t\t\tthis._setOption( key, options[ key ] );\n\t\t}\n\n\t\treturn this;\n\t},\n\t_setOption: function( key, value ) {\n\t\tthis.options[ key ] = value;\n\n\t\tif ( key === \"disabled\" ) {\n\t\t\tthis.widget()\n\t\t\t\t.toggleClass( this.widgetFullName + \"-disabled\", !!value );\n\n\t\t\t// If the widget is becoming disabled, then nothing is interactive\n\t\t\tif ( value ) {\n\t\t\t\tthis.hoverable.removeClass( \"ui-state-hover\" );\n\t\t\t\tthis.focusable.removeClass( \"ui-state-focus\" );\n\t\t\t}\n\t\t}\n\n\t\treturn this;\n\t},\n\n\tenable: function() {\n\t\treturn this._setOptions({ disabled: false });\n\t},\n\tdisable: function() {\n\t\treturn this._setOptions({ disabled: true });\n\t},\n\n\t_on: function( suppressDisabledCheck, element, handlers ) {\n\t\tvar delegateElement,\n\t\t\tinstance = this;\n\n\t\t// no suppressDisabledCheck flag, shuffle arguments\n\t\tif ( typeof suppressDisabledCheck !== \"boolean\" ) {\n\t\t\thandlers = element;\n\t\t\telement = suppressDisabledCheck;\n\t\t\tsuppressDisabledCheck = false;\n\t\t}\n\n\t\t// no element argument, shuffle and use this.element\n\t\tif ( !handlers ) {\n\t\t\thandlers = element;\n\t\t\telement = this.element;\n\t\t\tdelegateElement = this.widget();\n\t\t} else {\n\t\t\telement = delegateElement = $( element );\n\t\t\tthis.bindings = this.bindings.add( element );\n\t\t}\n\n\t\t$.each( handlers, function( event, handler ) {\n\t\t\tfunction handlerProxy() {\n\t\t\t\t// allow widgets to customize the disabled handling\n\t\t\t\t// - disabled as an array instead of boolean\n\t\t\t\t// - disabled class as method for disabling individual parts\n\t\t\t\tif ( !suppressDisabledCheck &&\n\t\t\t\t\t\t( instance.options.disabled === true ||\n\t\t\t\t\t\t\t$( this ).hasClass( \"ui-state-disabled\" ) ) ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\treturn ( typeof handler === \"string\" ? instance[ handler ] : handler )\n\t\t\t\t\t.apply( instance, arguments );\n\t\t\t}\n\n\t\t\t// copy the guid so direct unbinding works\n\t\t\tif ( typeof handler !== \"string\" ) {\n\t\t\t\thandlerProxy.guid = handler.guid =\n\t\t\t\t\thandler.guid || handlerProxy.guid || $.guid++;\n\t\t\t}\n\n\t\t\tvar match = event.match( /^([\\w:-]*)\\s*(.*)$/ ),\n\t\t\t\teventName = match[1] + instance.eventNamespace,\n\t\t\t\tselector = match[2];\n\t\t\tif ( selector ) {\n\t\t\t\tdelegateElement.delegate( selector, eventName, handlerProxy );\n\t\t\t} else {\n\t\t\t\telement.bind( eventName, handlerProxy );\n\t\t\t}\n\t\t});\n\t},\n\n\t_off: function( element, eventName ) {\n\t\teventName = (eventName || \"\").split( \" \" ).join( this.eventNamespace + \" \" ) +\n\t\t\tthis.eventNamespace;\n\t\telement.unbind( eventName ).undelegate( eventName );\n\n\t\t// Clear the stack to avoid memory leaks (#10056)\n\t\tthis.bindings = $( this.bindings.not( element ).get() );\n\t\tthis.focusable = $( this.focusable.not( element ).get() );\n\t\tthis.hoverable = $( this.hoverable.not( element ).get() );\n\t},\n\n\t_delay: function( handler, delay ) {\n\t\tfunction handlerProxy() {\n\t\t\treturn ( typeof handler === \"string\" ? instance[ handler ] : handler )\n\t\t\t\t.apply( instance, arguments );\n\t\t}\n\t\tvar instance = this;\n\t\treturn setTimeout( handlerProxy, delay || 0 );\n\t},\n\n\t_hoverable: function( element ) {\n\t\tthis.hoverable = this.hoverable.add( element );\n\t\tthis._on( element, {\n\t\t\tmouseenter: function( event ) {\n\t\t\t\t$( event.currentTarget ).addClass( \"ui-state-hover\" );\n\t\t\t},\n\t\t\tmouseleave: function( event ) {\n\t\t\t\t$( event.currentTarget ).removeClass( \"ui-state-hover\" );\n\t\t\t}\n\t\t});\n\t},\n\n\t_focusable: function( element ) {\n\t\tthis.focusable = this.focusable.add( element );\n\t\tthis._on( element, {\n\t\t\tfocusin: function( event ) {\n\t\t\t\t$( event.currentTarget ).addClass( \"ui-state-focus\" );\n\t\t\t},\n\t\t\tfocusout: function( event ) {\n\t\t\t\t$( event.currentTarget ).removeClass( \"ui-state-focus\" );\n\t\t\t}\n\t\t});\n\t},\n\n\t_trigger: function( type, event, data ) {\n\t\tvar prop, orig,\n\t\t\tcallback = this.options[ type ];\n\n\t\tdata = data || {};\n\t\tevent = $.Event( event );\n\t\tevent.type = ( type === this.widgetEventPrefix ?\n\t\t\ttype :\n\t\t\tthis.widgetEventPrefix + type ).toLowerCase();\n\t\t// the original event may come from any element\n\t\t// so we need to reset the target on the new event\n\t\tevent.target = this.element[ 0 ];\n\n\t\t// copy original event properties over to the new event\n\t\torig = event.originalEvent;\n\t\tif ( orig ) {\n\t\t\tfor ( prop in orig ) {\n\t\t\t\tif ( !( prop in event ) ) {\n\t\t\t\t\tevent[ prop ] = orig[ prop ];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthis.element.trigger( event, data );\n\t\treturn !( $.isFunction( callback ) &&\n\t\t\tcallback.apply( this.element[0], [ event ].concat( data ) ) === false ||\n\t\t\tevent.isDefaultPrevented() );\n\t}\n};\n\n$.each( { show: \"fadeIn\", hide: \"fadeOut\" }, function( method, defaultEffect ) {\n\t$.Widget.prototype[ \"_\" + method ] = function( element, options, callback ) {\n\t\tif ( typeof options === \"string\" ) {\n\t\t\toptions = { effect: options };\n\t\t}\n\t\tvar hasOptions,\n\t\t\teffectName = !options ?\n\t\t\t\tmethod :\n\t\t\t\toptions === true || typeof options === \"number\" ?\n\t\t\t\t\tdefaultEffect :\n\t\t\t\t\toptions.effect || defaultEffect;\n\t\toptions = options || {};\n\t\tif ( typeof options === \"number\" ) {\n\t\t\toptions = { duration: options };\n\t\t}\n\t\thasOptions = !$.isEmptyObject( options );\n\t\toptions.complete = callback;\n\t\tif ( options.delay ) {\n\t\t\telement.delay( options.delay );\n\t\t}\n\t\tif ( hasOptions && $.effects && $.effects.effect[ effectName ] ) {\n\t\t\telement[ method ]( options );\n\t\t} else if ( effectName !== method && element[ effectName ] ) {\n\t\t\telement[ effectName ]( options.duration, options.easing, callback );\n\t\t} else {\n\t\t\telement.queue(function( next ) {\n\t\t\t\t$( this )[ method ]();\n\t\t\t\tif ( callback ) {\n\t\t\t\t\tcallback.call( element[ 0 ] );\n\t\t\t\t}\n\t\t\t\tnext();\n\t\t\t});\n\t\t}\n\t};\n});\n\nvar widget = $.widget;\n\n\n\n}));\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/blueimp-file-upload/js/vendor/jquery.ui.widget.js\n// module id = 18\n// module chunks = 0","/*\n * JavaScript Load Image Exif Map\n * https://github.com/blueimp/JavaScript-Load-Image\n *\n * Copyright 2013, Sebastian Tschan\n * https://blueimp.net\n *\n * Exif tags mapping based on\n * https://github.com/jseidelin/exif-js\n *\n * Licensed under the MIT license:\n * https://opensource.org/licenses/MIT\n */\n\n/* global define */\n\n;(function (factory) {\n  'use strict'\n  if (typeof define === 'function' && define.amd) {\n    // Register as an anonymous AMD module:\n    define(['./load-image', './load-image-exif'], factory)\n  } else if (typeof module === 'object' && module.exports) {\n    factory(require('./load-image'), require('./load-image-exif'))\n  } else {\n    // Browser globals:\n    factory(window.loadImage)\n  }\n}(function (loadImage) {\n  'use strict'\n\n  loadImage.ExifMap.prototype.tags = {\n    // =================\n    // TIFF tags (IFD0):\n    // =================\n    0x0100: 'ImageWidth',\n    0x0101: 'ImageHeight',\n    0x8769: 'ExifIFDPointer',\n    0x8825: 'GPSInfoIFDPointer',\n    0xA005: 'InteroperabilityIFDPointer',\n    0x0102: 'BitsPerSample',\n    0x0103: 'Compression',\n    0x0106: 'PhotometricInterpretation',\n    0x0112: 'Orientation',\n    0x0115: 'SamplesPerPixel',\n    0x011C: 'PlanarConfiguration',\n    0x0212: 'YCbCrSubSampling',\n    0x0213: 'YCbCrPositioning',\n    0x011A: 'XResolution',\n    0x011B: 'YResolution',\n    0x0128: 'ResolutionUnit',\n    0x0111: 'StripOffsets',\n    0x0116: 'RowsPerStrip',\n    0x0117: 'StripByteCounts',\n    0x0201: 'JPEGInterchangeFormat',\n    0x0202: 'JPEGInterchangeFormatLength',\n    0x012D: 'TransferFunction',\n    0x013E: 'WhitePoint',\n    0x013F: 'PrimaryChromaticities',\n    0x0211: 'YCbCrCoefficients',\n    0x0214: 'ReferenceBlackWhite',\n    0x0132: 'DateTime',\n    0x010E: 'ImageDescription',\n    0x010F: 'Make',\n    0x0110: 'Model',\n    0x0131: 'Software',\n    0x013B: 'Artist',\n    0x8298: 'Copyright',\n    // ==================\n    // Exif Sub IFD tags:\n    // ==================\n    0x9000: 'ExifVersion', // EXIF version\n    0xA000: 'FlashpixVersion', // Flashpix format version\n    0xA001: 'ColorSpace', // Color space information tag\n    0xA002: 'PixelXDimension', // Valid width of meaningful image\n    0xA003: 'PixelYDimension', // Valid height of meaningful image\n    0xA500: 'Gamma',\n    0x9101: 'ComponentsConfiguration', // Information about channels\n    0x9102: 'CompressedBitsPerPixel', // Compressed bits per pixel\n    0x927C: 'MakerNote', // Any desired information written by the manufacturer\n    0x9286: 'UserComment', // Comments by user\n    0xA004: 'RelatedSoundFile', // Name of related sound file\n    0x9003: 'DateTimeOriginal', // Date and time when the original image was generated\n    0x9004: 'DateTimeDigitized', // Date and time when the image was stored digitally\n    0x9290: 'SubSecTime', // Fractions of seconds for DateTime\n    0x9291: 'SubSecTimeOriginal', // Fractions of seconds for DateTimeOriginal\n    0x9292: 'SubSecTimeDigitized', // Fractions of seconds for DateTimeDigitized\n    0x829A: 'ExposureTime', // Exposure time (in seconds)\n    0x829D: 'FNumber',\n    0x8822: 'ExposureProgram', // Exposure program\n    0x8824: 'SpectralSensitivity', // Spectral sensitivity\n    0x8827: 'PhotographicSensitivity', // EXIF 2.3, ISOSpeedRatings in EXIF 2.2\n    0x8828: 'OECF', // Optoelectric conversion factor\n    0x8830: 'SensitivityType',\n    0x8831: 'StandardOutputSensitivity',\n    0x8832: 'RecommendedExposureIndex',\n    0x8833: 'ISOSpeed',\n    0x8834: 'ISOSpeedLatitudeyyy',\n    0x8835: 'ISOSpeedLatitudezzz',\n    0x9201: 'ShutterSpeedValue', // Shutter speed\n    0x9202: 'ApertureValue', // Lens aperture\n    0x9203: 'BrightnessValue', // Value of brightness\n    0x9204: 'ExposureBias', // Exposure bias\n    0x9205: 'MaxApertureValue', // Smallest F number of lens\n    0x9206: 'SubjectDistance', // Distance to subject in meters\n    0x9207: 'MeteringMode', // Metering mode\n    0x9208: 'LightSource', // Kind of light source\n    0x9209: 'Flash', // Flash status\n    0x9214: 'SubjectArea', // Location and area of main subject\n    0x920A: 'FocalLength', // Focal length of the lens in mm\n    0xA20B: 'FlashEnergy', // Strobe energy in BCPS\n    0xA20C: 'SpatialFrequencyResponse',\n    0xA20E: 'FocalPlaneXResolution', // Number of pixels in width direction per FPRUnit\n    0xA20F: 'FocalPlaneYResolution', // Number of pixels in height direction per FPRUnit\n    0xA210: 'FocalPlaneResolutionUnit', // Unit for measuring the focal plane resolution\n    0xA214: 'SubjectLocation', // Location of subject in image\n    0xA215: 'ExposureIndex', // Exposure index selected on camera\n    0xA217: 'SensingMethod', // Image sensor type\n    0xA300: 'FileSource', // Image source (3 == DSC)\n    0xA301: 'SceneType', // Scene type (1 == directly photographed)\n    0xA302: 'CFAPattern', // Color filter array geometric pattern\n    0xA401: 'CustomRendered', // Special processing\n    0xA402: 'ExposureMode', // Exposure mode\n    0xA403: 'WhiteBalance', // 1 = auto white balance, 2 = manual\n    0xA404: 'DigitalZoomRatio', // Digital zoom ratio\n    0xA405: 'FocalLengthIn35mmFilm',\n    0xA406: 'SceneCaptureType', // Type of scene\n    0xA407: 'GainControl', // Degree of overall image gain adjustment\n    0xA408: 'Contrast', // Direction of contrast processing applied by camera\n    0xA409: 'Saturation', // Direction of saturation processing applied by camera\n    0xA40A: 'Sharpness', // Direction of sharpness processing applied by camera\n    0xA40B: 'DeviceSettingDescription',\n    0xA40C: 'SubjectDistanceRange', // Distance to subject\n    0xA420: 'ImageUniqueID', // Identifier assigned uniquely to each image\n    0xA430: 'CameraOwnerName',\n    0xA431: 'BodySerialNumber',\n    0xA432: 'LensSpecification',\n    0xA433: 'LensMake',\n    0xA434: 'LensModel',\n    0xA435: 'LensSerialNumber',\n    // ==============\n    // GPS Info tags:\n    // ==============\n    0x0000: 'GPSVersionID',\n    0x0001: 'GPSLatitudeRef',\n    0x0002: 'GPSLatitude',\n    0x0003: 'GPSLongitudeRef',\n    0x0004: 'GPSLongitude',\n    0x0005: 'GPSAltitudeRef',\n    0x0006: 'GPSAltitude',\n    0x0007: 'GPSTimeStamp',\n    0x0008: 'GPSSatellites',\n    0x0009: 'GPSStatus',\n    0x000A: 'GPSMeasureMode',\n    0x000B: 'GPSDOP',\n    0x000C: 'GPSSpeedRef',\n    0x000D: 'GPSSpeed',\n    0x000E: 'GPSTrackRef',\n    0x000F: 'GPSTrack',\n    0x0010: 'GPSImgDirectionRef',\n    0x0011: 'GPSImgDirection',\n    0x0012: 'GPSMapDatum',\n    0x0013: 'GPSDestLatitudeRef',\n    0x0014: 'GPSDestLatitude',\n    0x0015: 'GPSDestLongitudeRef',\n    0x0016: 'GPSDestLongitude',\n    0x0017: 'GPSDestBearingRef',\n    0x0018: 'GPSDestBearing',\n    0x0019: 'GPSDestDistanceRef',\n    0x001A: 'GPSDestDistance',\n    0x001B: 'GPSProcessingMethod',\n    0x001C: 'GPSAreaInformation',\n    0x001D: 'GPSDateStamp',\n    0x001E: 'GPSDifferential',\n    0x001F: 'GPSHPositioningError'\n  }\n\n  loadImage.ExifMap.prototype.stringValues = {\n    ExposureProgram: {\n      0: 'Undefined',\n      1: 'Manual',\n      2: 'Normal program',\n      3: 'Aperture priority',\n      4: 'Shutter priority',\n      5: 'Creative program',\n      6: 'Action program',\n      7: 'Portrait mode',\n      8: 'Landscape mode'\n    },\n    MeteringMode: {\n      0: 'Unknown',\n      1: 'Average',\n      2: 'CenterWeightedAverage',\n      3: 'Spot',\n      4: 'MultiSpot',\n      5: 'Pattern',\n      6: 'Partial',\n      255: 'Other'\n    },\n    LightSource: {\n      0: 'Unknown',\n      1: 'Daylight',\n      2: 'Fluorescent',\n      3: 'Tungsten (incandescent light)',\n      4: 'Flash',\n      9: 'Fine weather',\n      10: 'Cloudy weather',\n      11: 'Shade',\n      12: 'Daylight fluorescent (D 5700 - 7100K)',\n      13: 'Day white fluorescent (N 4600 - 5400K)',\n      14: 'Cool white fluorescent (W 3900 - 4500K)',\n      15: 'White fluorescent (WW 3200 - 3700K)',\n      17: 'Standard light A',\n      18: 'Standard light B',\n      19: 'Standard light C',\n      20: 'D55',\n      21: 'D65',\n      22: 'D75',\n      23: 'D50',\n      24: 'ISO studio tungsten',\n      255: 'Other'\n    },\n    Flash: {\n      0x0000: 'Flash did not fire',\n      0x0001: 'Flash fired',\n      0x0005: 'Strobe return light not detected',\n      0x0007: 'Strobe return light detected',\n      0x0009: 'Flash fired, compulsory flash mode',\n      0x000D: 'Flash fired, compulsory flash mode, return light not detected',\n      0x000F: 'Flash fired, compulsory flash mode, return light detected',\n      0x0010: 'Flash did not fire, compulsory flash mode',\n      0x0018: 'Flash did not fire, auto mode',\n      0x0019: 'Flash fired, auto mode',\n      0x001D: 'Flash fired, auto mode, return light not detected',\n      0x001F: 'Flash fired, auto mode, return light detected',\n      0x0020: 'No flash function',\n      0x0041: 'Flash fired, red-eye reduction mode',\n      0x0045: 'Flash fired, red-eye reduction mode, return light not detected',\n      0x0047: 'Flash fired, red-eye reduction mode, return light detected',\n      0x0049: 'Flash fired, compulsory flash mode, red-eye reduction mode',\n      0x004D: 'Flash fired, compulsory flash mode, red-eye reduction mode, return light not detected',\n      0x004F: 'Flash fired, compulsory flash mode, red-eye reduction mode, return light detected',\n      0x0059: 'Flash fired, auto mode, red-eye reduction mode',\n      0x005D: 'Flash fired, auto mode, return light not detected, red-eye reduction mode',\n      0x005F: 'Flash fired, auto mode, return light detected, red-eye reduction mode'\n    },\n    SensingMethod: {\n      1: 'Undefined',\n      2: 'One-chip color area sensor',\n      3: 'Two-chip color area sensor',\n      4: 'Three-chip color area sensor',\n      5: 'Color sequential area sensor',\n      7: 'Trilinear sensor',\n      8: 'Color sequential linear sensor'\n    },\n    SceneCaptureType: {\n      0: 'Standard',\n      1: 'Landscape',\n      2: 'Portrait',\n      3: 'Night scene'\n    },\n    SceneType: {\n      1: 'Directly photographed'\n    },\n    CustomRendered: {\n      0: 'Normal process',\n      1: 'Custom process'\n    },\n    WhiteBalance: {\n      0: 'Auto white balance',\n      1: 'Manual white balance'\n    },\n    GainControl: {\n      0: 'None',\n      1: 'Low gain up',\n      2: 'High gain up',\n      3: 'Low gain down',\n      4: 'High gain down'\n    },\n    Contrast: {\n      0: 'Normal',\n      1: 'Soft',\n      2: 'Hard'\n    },\n    Saturation: {\n      0: 'Normal',\n      1: 'Low saturation',\n      2: 'High saturation'\n    },\n    Sharpness: {\n      0: 'Normal',\n      1: 'Soft',\n      2: 'Hard'\n    },\n    SubjectDistanceRange: {\n      0: 'Unknown',\n      1: 'Macro',\n      2: 'Close view',\n      3: 'Distant view'\n    },\n    FileSource: {\n      3: 'DSC'\n    },\n    ComponentsConfiguration: {\n      0: '',\n      1: 'Y',\n      2: 'Cb',\n      3: 'Cr',\n      4: 'R',\n      5: 'G',\n      6: 'B'\n    },\n    Orientation: {\n      1: 'top-left',\n      2: 'top-right',\n      3: 'bottom-right',\n      4: 'bottom-left',\n      5: 'left-top',\n      6: 'right-top',\n      7: 'right-bottom',\n      8: 'left-bottom'\n    }\n  }\n\n  loadImage.ExifMap.prototype.getText = function (id) {\n    var value = this.get(id)\n    switch (id) {\n      case 'LightSource':\n      case 'Flash':\n      case 'MeteringMode':\n      case 'ExposureProgram':\n      case 'SensingMethod':\n      case 'SceneCaptureType':\n      case 'SceneType':\n      case 'CustomRendered':\n      case 'WhiteBalance':\n      case 'GainControl':\n      case 'Contrast':\n      case 'Saturation':\n      case 'Sharpness':\n      case 'SubjectDistanceRange':\n      case 'FileSource':\n      case 'Orientation':\n        return this.stringValues[id][value]\n      case 'ExifVersion':\n      case 'FlashpixVersion':\n        if (!value) return\n        return String.fromCharCode(value[0], value[1], value[2], value[3])\n      case 'ComponentsConfiguration':\n        if (!value) return\n        return this.stringValues[id][value[0]] +\n        this.stringValues[id][value[1]] +\n        this.stringValues[id][value[2]] +\n        this.stringValues[id][value[3]]\n      case 'GPSVersionID':\n        if (!value) return\n        return value[0] + '.' + value[1] + '.' + value[2] + '.' + value[3]\n    }\n    return String(value)\n  }\n\n  ;(function (exifMapPrototype) {\n    var tags = exifMapPrototype.tags\n    var map = exifMapPrototype.map\n    var prop\n    // Map the tag names to tags:\n    for (prop in tags) {\n      if (tags.hasOwnProperty(prop)) {\n        map[tags[prop]] = prop\n      }\n    }\n  }(loadImage.ExifMap.prototype))\n\n  loadImage.ExifMap.prototype.getAll = function () {\n    var map = {}\n    var prop\n    var id\n    for (prop in this) {\n      if (this.hasOwnProperty(prop)) {\n        id = this.tags[prop]\n        if (id) {\n          map[id] = this.getText(id)\n        }\n      }\n    }\n    return map\n  }\n}))\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/blueimp-load-image/js/load-image-exif-map.js\n// module id = 19\n// module chunks = 0","/*\n * JavaScript Load Image Fetch\n * https://github.com/blueimp/JavaScript-Load-Image\n *\n * Copyright 2017, Sebastian Tschan\n * https://blueimp.net\n *\n * Licensed under the MIT license:\n * https://opensource.org/licenses/MIT\n */\n\n/* global define, fetch, Request */\n\n;(function (factory) {\n  'use strict'\n  if (typeof define === 'function' && define.amd) {\n    // Register as an anonymous AMD module:\n    define(['./load-image', './load-image-meta'], factory)\n  } else if (typeof module === 'object' && module.exports) {\n    factory(require('./load-image'), require('./load-image-meta'))\n  } else {\n    // Browser globals:\n    factory(window.loadImage)\n  }\n}(function (loadImage) {\n  'use strict'\n\n  if ('fetch' in window && 'Request' in window) {\n    loadImage.fetchBlob = function (url, callback, options) {\n      if (loadImage.hasMetaOption(options)) {\n        return fetch(new Request(url, options)).then(function (response) {\n          return response.blob()\n        }).then(callback).catch(function (err) {\n          console.log(err)\n          callback()\n        })\n      } else {\n        callback()\n      }\n    }\n  }\n}))\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/blueimp-load-image/js/load-image-fetch.js\n// module id = 20\n// module chunks = 0","/*\n * JavaScript Load Image Orientation\n * https://github.com/blueimp/JavaScript-Load-Image\n *\n * Copyright 2013, Sebastian Tschan\n * https://blueimp.net\n *\n * Licensed under the MIT license:\n * https://opensource.org/licenses/MIT\n */\n\n/* global define */\n\n;(function (factory) {\n  'use strict'\n  if (typeof define === 'function' && define.amd) {\n    // Register as an anonymous AMD module:\n    define(['./load-image', './load-image-scale', './load-image-meta'], factory)\n  } else if (typeof module === 'object' && module.exports) {\n    factory(\n      require('./load-image'),\n      require('./load-image-scale'),\n      require('./load-image-meta')\n    )\n  } else {\n    // Browser globals:\n    factory(window.loadImage)\n  }\n}(function (loadImage) {\n  'use strict'\n\n  var originalHasCanvasOption = loadImage.hasCanvasOption\n  var originalHasMetaOption = loadImage.hasMetaOption\n  var originalTransformCoordinates = loadImage.transformCoordinates\n  var originalGetTransformedOptions = loadImage.getTransformedOptions\n\n  // Determines if the target image should be a canvas element:\n  loadImage.hasCanvasOption = function (options) {\n    return !!options.orientation ||\n      originalHasCanvasOption.call(loadImage, options)\n  }\n\n  // Determines if meta data should be loaded automatically:\n  loadImage.hasMetaOption = function (options) {\n    return options && options.orientation === true ||\n      originalHasMetaOption.call(loadImage, options)\n  }\n\n  // Transform image orientation based on\n  // the given EXIF orientation option:\n  loadImage.transformCoordinates = function (canvas, options) {\n    originalTransformCoordinates.call(loadImage, canvas, options)\n    var ctx = canvas.getContext('2d')\n    var width = canvas.width\n    var height = canvas.height\n    var styleWidth = canvas.style.width\n    var styleHeight = canvas.style.height\n    var orientation = options.orientation\n    if (!orientation || orientation > 8) {\n      return\n    }\n    if (orientation > 4) {\n      canvas.width = height\n      canvas.height = width\n      canvas.style.width = styleHeight\n      canvas.style.height = styleWidth\n    }\n    switch (orientation) {\n      case 2:\n        // horizontal flip\n        ctx.translate(width, 0)\n        ctx.scale(-1, 1)\n        break\n      case 3:\n        // 180° rotate left\n        ctx.translate(width, height)\n        ctx.rotate(Math.PI)\n        break\n      case 4:\n        // vertical flip\n        ctx.translate(0, height)\n        ctx.scale(1, -1)\n        break\n      case 5:\n        // vertical flip + 90 rotate right\n        ctx.rotate(0.5 * Math.PI)\n        ctx.scale(1, -1)\n        break\n      case 6:\n        // 90° rotate right\n        ctx.rotate(0.5 * Math.PI)\n        ctx.translate(0, -height)\n        break\n      case 7:\n        // horizontal flip + 90 rotate right\n        ctx.rotate(0.5 * Math.PI)\n        ctx.translate(width, -height)\n        ctx.scale(-1, 1)\n        break\n      case 8:\n        // 90° rotate left\n        ctx.rotate(-0.5 * Math.PI)\n        ctx.translate(-width, 0)\n        break\n    }\n  }\n\n  // Transforms coordinate and dimension options\n  // based on the given orientation option:\n  loadImage.getTransformedOptions = function (img, opts, data) {\n    var options = originalGetTransformedOptions.call(loadImage, img, opts)\n    var orientation = options.orientation\n    var newOptions\n    var i\n    if (orientation === true && data && data.exif) {\n      orientation = data.exif.get('Orientation')\n    }\n    if (!orientation || orientation > 8 || orientation === 1) {\n      return options\n    }\n    newOptions = {}\n    for (i in options) {\n      if (options.hasOwnProperty(i)) {\n        newOptions[i] = options[i]\n      }\n    }\n    newOptions.orientation = orientation\n    switch (orientation) {\n      case 2:\n        // horizontal flip\n        newOptions.left = options.right\n        newOptions.right = options.left\n        break\n      case 3:\n        // 180° rotate left\n        newOptions.left = options.right\n        newOptions.top = options.bottom\n        newOptions.right = options.left\n        newOptions.bottom = options.top\n        break\n      case 4:\n        // vertical flip\n        newOptions.top = options.bottom\n        newOptions.bottom = options.top\n        break\n      case 5:\n        // vertical flip + 90 rotate right\n        newOptions.left = options.top\n        newOptions.top = options.left\n        newOptions.right = options.bottom\n        newOptions.bottom = options.right\n        break\n      case 6:\n        // 90° rotate right\n        newOptions.left = options.top\n        newOptions.top = options.right\n        newOptions.right = options.bottom\n        newOptions.bottom = options.left\n        break\n      case 7:\n        // horizontal flip + 90 rotate right\n        newOptions.left = options.bottom\n        newOptions.top = options.right\n        newOptions.right = options.top\n        newOptions.bottom = options.left\n        break\n      case 8:\n        // 90° rotate left\n        newOptions.left = options.bottom\n        newOptions.top = options.left\n        newOptions.right = options.top\n        newOptions.bottom = options.right\n        break\n    }\n    if (newOptions.orientation > 4) {\n      newOptions.maxWidth = options.maxHeight\n      newOptions.maxHeight = options.maxWidth\n      newOptions.minWidth = options.minHeight\n      newOptions.minHeight = options.minWidth\n      newOptions.sourceWidth = options.sourceHeight\n      newOptions.sourceHeight = options.sourceWidth\n    }\n    return newOptions\n  }\n}))\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/blueimp-load-image/js/load-image-orientation.js\n// module id = 21\n// module chunks = 0","import './upload.less';\nimport './upload-icon.png';\n\nimport 'blueimp-tmpl/js/tmpl.js';\nimport 'blueimp-load-image/js/index.js';\nimport 'blueimp-canvas-to-blob/js/canvas-to-blob.js';\nimport 'blueimp-file-upload/js/jquery.iframe-transport.js';\nimport 'blueimp-file-upload/js/jquery.fileupload.js';\nimport 'blueimp-file-upload/js/jquery.fileupload-process.js';\nimport 'blueimp-file-upload/js/jquery.fileupload-image.js';\nimport 'blueimp-file-upload/js/jquery.fileupload-audio.js';\nimport 'blueimp-file-upload/js/jquery.fileupload-video.js';\nimport 'blueimp-file-upload/js/jquery.fileupload-validate.js';\nimport 'blueimp-file-upload/js/jquery.fileupload-ui.js';\n\n\nclass Upload {\n  /**\n   * Create file upload object and bind events\n   * @constructor\n   */\n  constructor() {\n    this.refresh();\n    this.bindEvents();\n    if (this.$el.length > 0) {\n      this.initFileUpload();\n    }\n\n    this.exif = {};\n    this.exif.ImageDescription = 0x010E;\n    this.exif.Artist = 0x013B;\n  }\n\n  /**\n   * Refresh elements (needed when open modal)\n   */\n  refresh() {\n    // if overlay is open at /folder_contents page, pick the overlay fileuploader\n    this.$el = $('.fileupload').last();\n  }\n\n  /**\n   * Bind events\n   */\n  bindEvents() {\n    //overlay\n    $('#plone-contentmenu-factories #multiple-files').prepOverlay({\n      subtype: 'ajax',\n      config: {\n        onLoad: $.proxy(this.initFileUpload, this),\n        onBeforeClose: this.reloadPage\n      }\n    });\n    $(document).on('drop dragover', (e) => {\n      // Prevent the default browser drop action:\n      e.preventDefault();\n    });\n    $(document).on('drop', $.proxy(this.crossSiteDrop, this));\n    $(document).on('click', '.template-upload button.cancel', $.proxy(this.cancelOne, this));\n    $(document).on('click', '.fileupload-buttonbar button.cancel', $.proxy(this.cancelAll, this));\n  }\n\n  /**\n   * Initiate fileupload plugin\n   */\n  initFileUpload() {\n    // Overlay requires to refresh element object\n    this.refresh();\n    let options = this.$el.prop('dataset');\n    let filesRE = new RegExp('(\\\\.|\\/)('+options.extensions+')$', 'i');\n\n    // Map tranlations options to object\n    let translations = {};\n    for (let k in options) {\n      if (/^translations/.test(k)) {\n        let newk = k.substring('translations'.length);\n        newk = newk.charAt(0).toLowerCase() + newk.substring(1);\n        translations[newk] = options[k];\n      }\n    }\n\n    // Initialize the jQuery File Upload widget:\n    this.$el.fileupload({\n      sequentialUploads: true,\n      singleFileUploads: true\n    }).fileupload('option', {\n      // Enable image resizing, except for Android and Opera,\n      // which actually support image resizing, but fail to\n      // send Blob objects via XHR requests:\n      disableImageResize: /Android(?!.*Chrome)|Opera/.test(window.navigator.userAgent),\n      maxFileSize: options.maxFileSize,\n      acceptFileTypes: filesRE,\n      process: [\n        {\n          action: 'load',\n          fileTypes: filesRE,\n          maxFileSize: options.maxFileSize\n        },\n        {\n          action: 'resize',\n          maxWidth: options.resizeMaxWidth,\n          maxHeight: options.resizeMaxHeight\n        },\n        {\n          action: 'save'\n        }\n      ],\n      messages: translations\n    }).on(\n      'fileuploadprocessdone', $.proxy(this.extractMetadata, this)\n    ).on(\n      'fileuploadprogress', $.proxy(this.finishUpload, this)\n    ).on(\n      'fileuploadprogressall', $.proxy(this.finishAllUpload, this)\n    );\n  }\n\n  /**\n   * Decode UTF8 string to Unicode\n   * http://stackoverflow.com/a/13691499\n   * @param {s} string - String to decode\n   */\n  decodeUTF8(s) {\n    return decodeURIComponent(escape(s));\n  }\n\n  /**\n   * Extract image metadata using EXIF\n   * @param {e} event - jQuery event variable\n   * @param {data} data - Image data\n   */\n  extractMetadata(e, data) {\n    if (typeof data.exif === 'undefined') {\n      return;\n    }\n    let description = data.exif[this.exif.ImageDescription];\n    if (typeof description !== 'undefined') {\n      description = this.decodeUTF8(description);\n      $('.description', data.context[0]).val(description);\n    }\n    let artist = data.exif[this.exif.Artist];\n    if (typeof artist !== 'undefined') {\n      artist = this.decodeUTF8(artist);\n      $('.rights', data.context[0]).val(artist);\n    }\n  }\n\n  /**\n   * Check if using Bootstrap 2\n   * http://stackoverflow.com/a/14768682\n   * This method is needed as workaround for old bootstrap version conflict\n   */\n  hasBootstrap2() {\n    let hasBootstrap = (typeof $().modal == 'function');\n    let hasBootstrap3 = (typeof $().emulateTransitionEnd === 'function');\n    return (hasBootstrap && !hasBootstrap3);\n  }\n\n  /**\n   * Cancell all files added\n   * This callback is needed as workaround for old bootstrap version conflict\n   * @param {e} event - jQuery event variable\n   */\n  cancelAll(e) {\n    this.reloadPage();\n    if (!this.hasBootstrap2()) {\n      return;\n    }\n    $('.template-upload').remove();\n  }\n\n  /**\n   * Cancell one file added\n   * This callback is needed as workaround for old bootstrap version conflict\n   * @param {e} event - jQuery event variable\n   */\n  cancelOne(e) {\n    this.reloadPage();\n    if (!this.hasBootstrap2()) {\n      return;\n    }\n    $(e.target).parents('.template-upload').remove();\n  }\n\n  /**\n   * Method copied from jquery.fileupload implementation\n   * This callback is needed as workaround for old bootstrap version conflict\n   * @param {bytes} bytes - Size of file in bytes\n   */\n  formatFileSize(bytes) {\n    if (typeof bytes !== 'number') {\n      return '';\n    }\n    if (bytes >= 1000000000) {\n      return (bytes / 1000000000).toFixed(2) + ' GB';\n    }\n    if (bytes >= 1000000) {\n      return (bytes / 1000000).toFixed(2) + ' MB';\n    }\n    return (bytes / 1000).toFixed(2) + ' KB';\n  }\n\n  /**\n   * Called when finish one file upload\n   * This callback is needed as workaround for old bootstrap version conflict\n   * @param {e} event - jQuery event variable\n   * @param {data} data - Progress data\n   */\n  finishUpload(e, data) {\n    if (!this.hasBootstrap2()) {\n      return;\n    }\n    let progress = parseInt(data.loaded / data.total * 100, 10);\n    if (progress !== 100) {\n      return;\n    }\n    // render template\n    let $html = $(data.downloadTemplate({\n      files: data.files,\n      formatFileSize: this.formatFileSize,\n      options: data\n    }));\n    // update html\n    data.context.replaceWith($html);\n    // render preview\n    $html.find('.preview').each(function (index, elm) {\n      $(elm).append(data.files[index].preview);\n    });\n  }\n\n  /**\n   * Called when finish all uploads\n   * @param {e} event - jQuery event variable\n   * @param {data} data - Progress data\n   */\n  finishAllUpload(e, data) {\n    let progress = parseInt(data.loaded / data.total * 100, 10);\n    if (progress !== 100) {\n      return;\n    }\n    this.reloadPage();\n  }\n\n  /**\n   * Drop image from other website page\n   * @param {e} event - jQuery event variable\n   */\n  crossSiteDrop(e) {\n    if (typeof e.originalEvent.dataTransfer === 'undefined') {\n      return;\n    }\n    // Google Chrome\n    let url = $(e.originalEvent.dataTransfer.getData('text/html')).filter('img').attr('src');\n    // Firefox\n    if (typeof url === 'undefined') {\n      url = e.originalEvent.dataTransfer.getData('text/x-moz-url').split('\\n')[0];\n    }\n    if (typeof url === 'undefined') {\n      return;\n    }\n    // JavaScript URL parser: https://gist.github.com/jlong/2428561\n    let parser = document.createElement('a');\n    parser.href = location.href;\n    parser.pathname = parser.pathname.replace(/\\/folder_contents*|\\/view*/, '');\n    parser.pathname = parser.pathname + '/@@jsonimageserializer';\n    $.ajax({\n      url: parser.href,\n      data: {url: url},\n      context: this,\n      success: (data) => {\n        let img = document.createElement('img');\n        img.name = data.name;\n        img.onload = $.proxy((e) => {\n          let canvas = document.createElement('canvas');\n          canvas.width = img.width;\n          canvas.height = img.height;\n          if (canvas.getContext && canvas.toBlob) {\n            canvas.getContext('2d').drawImage(img, 0, 0, img.width, img.height);\n            canvas.toBlob(function(that, name) {\n              return (blob) => {\n                blob.name = name;\n                that.$el.fileupload('add', {files: [blob]});\n              };\n            }(this, img.name), 'image/jpeg');\n          }\n        }, this);\n        img.src = data.data;\n      }\n    });\n  }\n  /**       \n   * Reload page when close overlay     \n   * @param {e} event - jQuery event variable       \n   */       \n  reloadPage(e) {       \n    // reload page if all uploads finish\n    let $uploads = $('.template-upload', this.$el);\n    if ($uploads.length === 0 || $('.progress', $uploads).attr('aria-valuenow') === '100') {\n      location.reload();\n    }\n  }\n}\n\n\n$(() => {\n  new Upload();\n});\n\n\nmodule.exports = Upload;\n\n\n\n// WEBPACK FOOTER //\n// ./app/upload.js"],"sourceRoot":""}